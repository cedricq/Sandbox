
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006200  08006200  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006200  08006200  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006200  08006200  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800620c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000074  08006280  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08006280  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011afc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b23  00000000  00000000  00031ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00035560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cabc  00000000  00000000  000362d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001195d  00000000  00000000  00052d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6554  00000000  00000000  000646e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ac3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f88  00000000  00000000  0010ac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006104 	.word	0x08006104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006104 	.word	0x08006104

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <serial_add_char>:

static Buffer BufferSerialInstance;


void serial_add_char(unsigned char c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	BufferSerialInstance.AddChar(c);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4619      	mov	r1, r3
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <serial_add_char+0x1c>)
 8000290:	f000 f81e 	bl	80002d0 <_ZN6Buffer7AddCharEh>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000090 	.word	0x20000090

080002a0 <_ZN6BufferC1Ev>:


Buffer::Buffer()
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4618      	mov	r0, r3
 80002ac:	23ff      	movs	r3, #255	; 0xff
 80002ae:	461a      	mov	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f005 faf1 	bl	8005898 <memset>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
{}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZN6Buffer7AddCharEh>:

void Buffer::AddChar(unsigned char c)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	buf[index_in] = c;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	78f9      	ldrb	r1, [r7, #3]
 80002e6:	54d1      	strb	r1, [r2, r3]
	index_in++;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	index_in = index_in % BUFF_SIZE;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <_ZN6Buffer7AddCharEh+0x50>)
 80002fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000302:	09da      	lsrs	r2, r3, #7
 8000304:	4613      	mov	r3, r2
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	1a9b      	subs	r3, r3, r2
 800030a:	1aca      	subs	r2, r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	80808081 	.word	0x80808081

08000324 <_Z41__static_initialization_and_destruction_0ii>:
	{
		c = ReadChar();
		str[i] = c;
		i++;
	}
}
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d107      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033a:	4293      	cmp	r3, r2
 800033c:	d102      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Buffer BufferSerialInstance;
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000340:	f7ff ffae 	bl	80002a0 <_ZN6BufferC1Ev>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090

08000350 <_GLOBAL__sub_I_serial_add_char>:
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
 8000354:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ffe3 	bl	8000324 <_Z41__static_initialization_and_destruction_0ii>
 800035e:	bd80      	pop	{r7, pc}

08000360 <SF04_CalcCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 800036c:	23ff      	movs	r3, #255	; 0xff
 800036e:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000370:	2300      	movs	r3, #0
 8000372:	73bb      	strb	r3, [r7, #14]
 8000374:	e021      	b.n	80003ba <SF04_CalcCrc+0x5a>
    {
        crc ^= (data[byteCtr]);
 8000376:	7bbb      	ldrb	r3, [r7, #14]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	4053      	eors	r3, r2
 8000382:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000384:	2308      	movs	r3, #8
 8000386:	737b      	strb	r3, [r7, #13]
 8000388:	e011      	b.n	80003ae <SF04_CalcCrc+0x4e>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 800038a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800038e:	2b00      	cmp	r3, #0
 8000390:	da07      	bge.n	80003a2 <SF04_CalcCrc+0x42>
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	b25b      	sxtb	r3, r3
 8000398:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800039c:	b25b      	sxtb	r3, r3
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e002      	b.n	80003a8 <SF04_CalcCrc+0x48>
            else crc = (crc << 1);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 80003a8:	7b7b      	ldrb	r3, [r7, #13]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	737b      	strb	r3, [r7, #13]
 80003ae:	7b7b      	ldrb	r3, [r7, #13]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1ea      	bne.n	800038a <SF04_CalcCrc+0x2a>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73bb      	strb	r3, [r7, #14]
 80003ba:	7bba      	ldrb	r2, [r7, #14]
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3d9      	bcc.n	8000376 <SF04_CalcCrc+0x16>
        }
    }
    return crc;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(huart, UART3_rxBuffer, 1, 100);
 80003d8:	2364      	movs	r3, #100	; 0x64
 80003da:	2201      	movs	r2, #1
 80003dc:	4908      	ldr	r1, [pc, #32]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f004 fadc 	bl	800499c <HAL_UART_Transmit>
    serial_add_char(UART3_rxBuffer[0]);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff49 	bl	8000280 <serial_add_char>
    HAL_UART_Receive_IT(huart, UART3_rxBuffer, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	4903      	ldr	r1, [pc, #12]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f004 fb66 	bl	8004ac4 <HAL_UART_Receive_IT>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000027c 	.word	0x2000027c

08000404 <printVal_4>:
    sprintf (buffer, "%d %d %d %d %d\n", out, a, b, c, d);
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
}

void printVal_4(int out, int a, int b, int c)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b096      	sub	sp, #88	; 0x58
 8000408:	af02      	add	r7, sp, #8
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	603b      	str	r3, [r7, #0]
    char buffer [60];
    sprintf (buffer, "%d %d %d %d\n", out, a, b, c);
 8000412:	f107 0014 	add.w	r0, r7, #20
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	490a      	ldr	r1, [pc, #40]	; (800044c <printVal_4+0x48>)
 8000424:	f005 fa40 	bl	80058a8 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fecf 	bl	80001d0 <strlen>
 8000432:	4603      	mov	r3, r0
 8000434:	b29a      	uxth	r2, r3
 8000436:	f107 0114 	add.w	r1, r7, #20
 800043a:	2364      	movs	r3, #100	; 0x64
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <printVal_4+0x4c>)
 800043e:	f004 faad 	bl	800499c <HAL_UART_Transmit>
}
 8000442:	bf00      	nop
 8000444:	3750      	adds	r7, #80	; 0x50
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	08006140 	.word	0x08006140
 8000450:	200001ac 	.word	0x200001ac

08000454 <Tick_1ms>:
	buffer [size] = '\0';
	HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
}

void Tick_1ms()
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
    //I2C reading
    //HAL_I2C_Master_Transmit_IT (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t * pData, uint16_t Size);
    //HAL_I2C_Master_Receive_IT (&hi2c1, 0x2E, rcv_txt, 2);
    //HAL_I2C_IsDeviceReady (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);

}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
	...

08000464 <RawToCalOffset>:

const int32_t PRESSURE_OFFSET   = 300;
const int32_t PRESSURE_GAIN     = 60000;

int32_t RawToCalOffset(int32_t raw, int32_t offset, int32_t gain_1000)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
    return (((raw - offset) * gain_1000) / 1000);
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	fb02 f303 	mul.w	r3, r2, r3
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <RawToCalOffset+0x30>)
 800047e:	fb82 1203 	smull	r1, r2, r2, r3
 8000482:	1192      	asrs	r2, r2, #6
 8000484:	17db      	asrs	r3, r3, #31
 8000486:	1ad3      	subs	r3, r2, r3
}
 8000488:	4618      	mov	r0, r3
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	10624dd3 	.word	0x10624dd3

08000498 <RawToCal>:

int32_t RawToCal(int32_t raw, int32_t max_cal, int32_t max_raw)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
    return (raw * max_cal) / max_raw;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	fb02 f203 	mul.w	r2, r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	; 0x50
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fe4b 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f957 	bl	800077c <SystemClock_Config>
  // +++ Comment HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); --> No interrupt required

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fb29 	bl	8000b24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 faad 	bl	8000a30 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80004d6:	f000 fb0b 	bl	8000af0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004da:	f000 f9af 	bl	800083c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80004de:	f000 fad7 	bl	8000a90 <MX_USART3_UART_Init>
  MX_DAC_Init();
 80004e2:	f000 fa31 	bl	8000948 <MX_DAC_Init>
  MX_I2C1_Init();
 80004e6:	f000 fa63 	bl	80009b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // !!! Start UART before ADC  !!! ////////
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	4993      	ldr	r1, [pc, #588]	; (800073c <main+0x27c>)
 80004ee:	4894      	ldr	r0, [pc, #592]	; (8000740 <main+0x280>)
 80004f0:	f004 fae8 	bl	8004ac4 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80004f4:	2204      	movs	r2, #4
 80004f6:	4993      	ldr	r1, [pc, #588]	; (8000744 <main+0x284>)
 80004f8:	4893      	ldr	r0, [pc, #588]	; (8000748 <main+0x288>)
 80004fa:	f001 f85f 	bl	80015bc <HAL_ADC_Start_DMA>

  uint8_t test[3] = {0xBE, 0xEF, 0x00};
 80004fe:	4a93      	ldr	r2, [pc, #588]	; (800074c <main+0x28c>)
 8000500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	4611      	mov	r1, r2
 8000508:	8019      	strh	r1, [r3, #0]
 800050a:	3302      	adds	r3, #2
 800050c:	0c12      	lsrs	r2, r2, #16
 800050e:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SF04_CalcCrc (test, 2);
 8000510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000514:	2102      	movs	r1, #2
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff22 	bl	8000360 <SF04_CalcCrc>
 800051c:	4603      	mov	r3, r0
 800051e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  test[2] = crc;
 8000522:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  uint8_t cmd[3] = {0x36, 0x08, 0x00};
 800052a:	4a89      	ldr	r2, [pc, #548]	; (8000750 <main+0x290>)
 800052c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000530:	6812      	ldr	r2, [r2, #0]
 8000532:	4611      	mov	r1, r2
 8000534:	8019      	strh	r1, [r3, #0]
 8000536:	3302      	adds	r3, #2
 8000538:	0c12      	lsrs	r2, r2, #16
 800053a:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd, 2);
 800053c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff0c 	bl	8000360 <SF04_CalcCrc>
 8000548:	4603      	mov	r3, r0
 800054a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  cmd[2] = crc;
 800054e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  uint8_t cmd_status[3] = {0xE1, 0x02, 0x00};
 8000556:	4a7f      	ldr	r2, [pc, #508]	; (8000754 <main+0x294>)
 8000558:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	4611      	mov	r1, r2
 8000560:	8019      	strh	r1, [r3, #0]
 8000562:	3302      	adds	r3, #2
 8000564:	0c12      	lsrs	r2, r2, #16
 8000566:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd_status, 2);
 8000568:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800056c:	2102      	movs	r1, #2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fef6 	bl	8000360 <SF04_CalcCrc>
 8000574:	4603      	mov	r3, r0
 8000576:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  cmd_status[2] = crc;
 800057a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800057e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

  HAL_Delay(200);
 8000582:	20c8      	movs	r0, #200	; 0xc8
 8000584:	f000 fe52 	bl	800122c <HAL_Delay>

  uint8_t i2c_state = I2C_INIT;
 8000588:	2300      	movs	r3, #0
 800058a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer [50];
  while (1)
  {
	  HAL_Delay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f000 fe4c 	bl	800122c <HAL_Delay>

	  if (i2c_state == I2C_INIT)
 8000594:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000598:	2b00      	cmp	r3, #0
 800059a:	d134      	bne.n	8000606 <main+0x146>
	  {
	      uint8_t status = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	      HAL_Delay(100);
 80005a2:	2064      	movs	r0, #100	; 0x64
 80005a4:	f000 fe42 	bl	800122c <HAL_Delay>
          status = HAL_I2C_Master_Transmit(&hi2c1, SFM3219_ADDRESS<<1, cmd, 3, 1000);
 80005a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2303      	movs	r3, #3
 80005b4:	215c      	movs	r1, #92	; 0x5c
 80005b6:	4868      	ldr	r0, [pc, #416]	; (8000758 <main+0x298>)
 80005b8:	f002 fa56 	bl	8002a68 <HAL_I2C_Master_Transmit>
 80005bc:	4603      	mov	r3, r0
 80005be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
          if (status == HAL_OK)
 80005c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d106      	bne.n	80005d8 <main+0x118>
          {
              i2c_cnt_errors = 0;
 80005ca:	4b64      	ldr	r3, [pc, #400]	; (800075c <main+0x29c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
              i2c_state = I2C_READ;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80005d6:	e060      	b.n	800069a <main+0x1da>
          }
          else
          {
              i2c_cnt_errors += 1;
 80005d8:	4b60      	ldr	r3, [pc, #384]	; (800075c <main+0x29c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b5e      	ldr	r3, [pc, #376]	; (800075c <main+0x29c>)
 80005e2:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Init Failure\n\0");
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	495e      	ldr	r1, [pc, #376]	; (8000760 <main+0x2a0>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f005 f95d 	bl	80058a8 <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fded 	bl	80001d0 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	4850      	ldr	r0, [pc, #320]	; (8000740 <main+0x280>)
 8000600:	f004 f9cc 	bl	800499c <HAL_UART_Transmit>
 8000604:	e049      	b.n	800069a <main+0x1da>
          }
	  }
	  else if (i2c_state == I2C_READ)
 8000606:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800060a:	2b01      	cmp	r3, #1
 800060c:	d145      	bne.n	800069a <main+0x1da>
	  {
	      uint8_t status = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	      uint8_t i2c_rcv_buff[3] = {0x00, 0x00, 0x00};
 8000614:	4a53      	ldr	r2, [pc, #332]	; (8000764 <main+0x2a4>)
 8000616:	463b      	mov	r3, r7
 8000618:	6812      	ldr	r2, [r2, #0]
 800061a:	4611      	mov	r1, r2
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	3302      	adds	r3, #2
 8000620:	0c12      	lsrs	r2, r2, #16
 8000622:	701a      	strb	r2, [r3, #0]
	      status = HAL_I2C_Master_Receive(&hi2c1, SFM3219_ADDRESS<<1, i2c_rcv_buff, 3, 1000);
 8000624:	463a      	mov	r2, r7
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2303      	movs	r3, #3
 800062e:	215c      	movs	r1, #92	; 0x5c
 8000630:	4849      	ldr	r0, [pc, #292]	; (8000758 <main+0x298>)
 8000632:	f002 fb0d 	bl	8002c50 <HAL_I2C_Master_Receive>
 8000636:	4603      	mov	r3, r0
 8000638:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	      if (status == HAL_OK)
 800063c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000640:	2b00      	cmp	r3, #0
 8000642:	d109      	bne.n	8000658 <main+0x198>
          {
	          rawQout = ((uint32_t)i2c_rcv_buff[0])<<8 | i2c_rcv_buff[0];
 8000644:	783b      	ldrb	r3, [r7, #0]
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	783a      	ldrb	r2, [r7, #0]
 800064a:	4313      	orrs	r3, r2
 800064c:	4a46      	ldr	r2, [pc, #280]	; (8000768 <main+0x2a8>)
 800064e:	6013      	str	r3, [r2, #0]
	          i2c_cnt_errors = 0;
 8000650:	4b42      	ldr	r3, [pc, #264]	; (800075c <main+0x29c>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e019      	b.n	800068c <main+0x1cc>
          }
          else
          {
              rawQout = 0xFFFFFF;
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <main+0x2a8>)
 800065a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800065e:	601a      	str	r2, [r3, #0]
              i2c_cnt_errors += 1;
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <main+0x29c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b3c      	ldr	r3, [pc, #240]	; (800075c <main+0x29c>)
 800066a:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Reading Failure\n\0");
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	493f      	ldr	r1, [pc, #252]	; (800076c <main+0x2ac>)
 8000670:	4618      	mov	r0, r3
 8000672:	f005 f919 	bl	80058a8 <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fda9 	bl	80001d0 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	1d39      	adds	r1, r7, #4
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	482e      	ldr	r0, [pc, #184]	; (8000740 <main+0x280>)
 8000688:	f004 f988 	bl	800499c <HAL_UART_Transmit>
          }
	      if (i2c_cnt_errors > 20)
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <main+0x29c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b14      	cmp	r3, #20
 8000692:	d902      	bls.n	800069a <main+0x1da>
	      {
	          i2c_state = I2C_INIT;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	      }
	  }

	  cmd_target += 10;
 800069a:	4b35      	ldr	r3, [pc, #212]	; (8000770 <main+0x2b0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	330a      	adds	r3, #10
 80006a0:	4a33      	ldr	r2, [pc, #204]	; (8000770 <main+0x2b0>)
 80006a2:	6013      	str	r3, [r2, #0]
	  cmd_target = cmd_target % 4096;
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <main+0x2b0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006ac:	4a30      	ldr	r2, [pc, #192]	; (8000770 <main+0x2b0>)
 80006ae:	6013      	str	r3, [r2, #0]
	  DAC1->DHR12R1 = cmd_target;
 80006b0:	4a30      	ldr	r2, [pc, #192]	; (8000774 <main+0x2b4>)
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <main+0x2b0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6093      	str	r3, [r2, #8]

	  //printVal(cmd_target, adc_buf[0], adc_buf[1], adc_buf[2], adc_buf[3], rawQout);

	  Measures[MEAS_POUT]   = RawToCalOffset(adc_buf[ADC_A1_PA0_POUT], 0, 1000);
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <main+0x284>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fece 	bl	8000464 <RawToCalOffset>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <main+0x2b8>)
 80006ce:	601a      	str	r2, [r3, #0]
	  Measures[MEAS_QOUT]   = RawToCalOffset(rawQout, 0, 1000);
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <main+0x2a8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fec2 	bl	8000464 <RawToCalOffset>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <main+0x2b8>)
 80006e6:	605a      	str	r2, [r3, #4]
	  Measures[MEAS_S_MOT]  = RawToCal(adc_buf[ADC_A7_PC1_S_MOT], MAX_SPEED, MAX_RAW_ADC);
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <main+0x284>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80006f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006f6:	4619      	mov	r1, r3
 80006f8:	f7ff fece 	bl	8000498 <RawToCal>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0x2b8>)
 8000702:	611a      	str	r2, [r3, #16]
	  Measures[MEAS_I_MOT]  = RawToCal(adc_buf[ADC_A6_PC0_I_MOT], MAX_CURRENT, MAX_RAW_ADC);
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <main+0x284>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4618      	mov	r0, r3
 800070a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800070e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000712:	4619      	mov	r1, r3
 8000714:	f7ff fec0 	bl	8000498 <RawToCal>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <main+0x2b8>)
 800071e:	60da      	str	r2, [r3, #12]

	  printVal_4(Measures[MEAS_POUT], Measures[MEAS_QOUT], Measures[MEAS_S_MOT], Measures[MEAS_I_MOT]);
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <main+0x2b8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <main+0x2b8>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	4619      	mov	r1, r3
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0x2b8>)
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	461a      	mov	r2, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0x2b8>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	f7ff fe65 	bl	8000404 <printVal_4>
	  HAL_Delay(10);
 800073a:	e728      	b.n	800058e <main+0xce>
 800073c:	2000027c 	.word	0x2000027c
 8000740:	200001ac 	.word	0x200001ac
 8000744:	20000438 	.word	0x20000438
 8000748:	2000037c 	.word	0x2000037c
 800074c:	08006184 	.word	0x08006184
 8000750:	08006188 	.word	0x08006188
 8000754:	0800618c 	.word	0x0800618c
 8000758:	20000230 	.word	0x20000230
 800075c:	20000198 	.word	0x20000198
 8000760:	08006150 	.word	0x08006150
 8000764:	08006190 	.word	0x08006190
 8000768:	2000019c 	.word	0x2000019c
 800076c:	08006168 	.word	0x08006168
 8000770:	20000000 	.word	0x20000000
 8000774:	40007400 	.word	0x40007400
 8000778:	200003e0 	.word	0x200003e0

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	; 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 f884 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 f876 	bl	8005898 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007ac:	2303      	movs	r3, #3
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007be:	2310      	movs	r3, #16
 80007c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fdc2 	bl	8003360 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007e2:	f000 fa1b 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fcb4 	bl	8004170 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 fa05 	bl	8000c1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800081a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4618      	mov	r0, r3
 8000824:	f003 feda 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800082e:	f000 f9f5 	bl	8000c1c <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3770      	adds	r7, #112	; 0x70
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_ADC1_Init+0x108>)
 8000854:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085a:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <MX_ADC1_Init+0x108>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000860:	4b38      	ldr	r3, [pc, #224]	; (8000944 <MX_ADC1_Init+0x108>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000866:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_ADC1_Init+0x108>)
 8000868:	2201      	movs	r2, #1
 800086a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086c:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_ADC1_Init+0x108>)
 800086e:	2201      	movs	r2, #1
 8000870:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000872:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_ADC1_Init+0x108>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <MX_ADC1_Init+0x108>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_ADC1_Init+0x108>)
 8000882:	2201      	movs	r2, #1
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_ADC1_Init+0x108>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_ADC1_Init+0x108>)
 800088e:	2204      	movs	r2, #4
 8000890:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_ADC1_Init+0x108>)
 8000894:	2201      	movs	r2, #1
 8000896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_ADC1_Init+0x108>)
 800089c:	2204      	movs	r2, #4
 800089e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_ADC1_Init+0x108>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_ADC1_Init+0x108>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ac:	4825      	ldr	r0, [pc, #148]	; (8000944 <MX_ADC1_Init+0x108>)
 80008ae:	f000 fcff 	bl	80012b0 <HAL_ADC_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80008b8:	f000 f9b0 	bl	8000c1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008bc:	2301      	movs	r3, #1
 80008be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80008c8:	2303      	movs	r3, #3
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_ADC1_Init+0x108>)
 80008da:	f000 ff0b 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008e4:	f000 f99a 	bl	8000c1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_ADC1_Init+0x108>)
 80008f6:	f000 fefd 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000900:	f000 f98c 	bl	8000c1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000904:	2306      	movs	r3, #6
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_ADC1_Init+0x108>)
 8000912:	f000 feef 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800091c:	f000 f97e 	bl	8000c1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000920:	2307      	movs	r3, #7
 8000922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000924:	2304      	movs	r3, #4
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_ADC1_Init+0x108>)
 800092e:	f000 fee1 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000938:	f000 f970 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000037c 	.word	0x2000037c

08000948 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_DAC_Init+0x5c>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_DAC_Init+0x60>)
 800095c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <MX_DAC_Init+0x5c>)
 8000960:	f001 fbb3 	bl	80020ca <HAL_DAC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800096a:	f000 f957 	bl	8000c1c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	4619      	mov	r1, r3
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_DAC_Init+0x5c>)
 800097e:	f001 fbfd 	bl	800217c <HAL_DAC_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000988:	f000 f948 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = cmd_target;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <MX_DAC_Init+0x60>)
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_DAC_Init+0x64>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6093      	str	r3, [r2, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000994:	2100      	movs	r1, #0
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <MX_DAC_Init+0x5c>)
 8000998:	f001 fbb9 	bl	800210e <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200003cc 	.word	0x200003cc
 80009a8:	40007400 	.word	0x40007400
 80009ac:	20000000 	.word	0x20000000

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	f001 ffac 	bl	8002948 <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f911 	bl	8000c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009fe:	f002 fc17 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f908 	bl	8000c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C1_Init+0x74>)
 8000a10:	f002 fc59 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f8ff 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000230 	.word	0x20000230
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	2000090e 	.word	0x2000090e

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_USART2_UART_Init+0x5c>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a3c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a74:	f003 ff44 	bl	8004900 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f8cd 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000448 	.word	0x20000448
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <MX_USART3_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000a9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f003 ff14 	bl	8004900 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f89d 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001ac 	.word	0x200001ac
 8000aec:	40004800 	.word	0x40004800

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_DMA_Init+0x30>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <MX_DMA_Init+0x30>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_DMA_Init+0x30>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	200b      	movs	r0, #11
 8000b14:	f001 faa3 	bl	800205e <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a33      	ldr	r2, [pc, #204]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6153      	str	r3, [r2, #20]
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_GPIO_Init+0xe8>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <MX_GPIO_Init+0xec>)
 8000ba2:	f001 feb9 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	481a      	ldr	r0, [pc, #104]	; (8000c14 <MX_GPIO_Init+0xf0>)
 8000bac:	f001 feb4 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_GPIO_Init+0xf4>)
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_GPIO_Init+0xf0>)
 8000bc6:	f001 fd35 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0xec>)
 8000be4:	f001 fd26 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_GPIO_Init+0xf0>)
 8000c00:	f001 fd18 	bl	8002634 <HAL_GPIO_Init>

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800
 8000c18:	10210000 	.word	0x10210000

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f001 f9f2 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c90:	d165      	bne.n	8000d5e <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HAL_ADC_MspInit+0xf8>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	481f      	ldr	r0, [pc, #124]	; (8000d6c <HAL_ADC_MspInit+0xfc>)
 8000cee:	f001 fca1 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f001 fc94 	bl	8002634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_ADC_MspInit+0x104>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d36:	2220      	movs	r2, #32
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d40:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d44:	f001 fa67 	bl	8002216 <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000d4e:	f7ff ff65 	bl	8000c1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_ADC_MspInit+0x100>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000800 	.word	0x48000800
 8000d70:	200003f4 	.word	0x200003f4
 8000d74:	40020008 	.word	0x40020008

08000d78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a15      	ldr	r2, [pc, #84]	; (8000dec <HAL_DAC_MspInit+0x74>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d124      	bne.n	8000de4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000da0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_DAC_MspInit+0x78>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f001 fc28 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40007400 	.word	0x40007400
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <HAL_I2C_MspInit+0xc8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d14d      	bne.n	8000eb2 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f001 fbe5 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6e:	2312      	movs	r3, #18
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <HAL_I2C_MspInit+0xd0>)
 8000e86:	f001 fbd5 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e94:	61d3      	str	r3, [r2, #28]
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_I2C_MspInit+0xcc>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	201f      	movs	r0, #31
 8000ea8:	f001 f8d9 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eac:	201f      	movs	r0, #31
 8000eae:	f001 f8f2 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <HAL_UART_MspInit+0xfc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d131      	bne.n	8000f4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eea:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a30      	ldr	r2, [pc, #192]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f001 fb7c 	bl	8002634 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2026      	movs	r0, #38	; 0x26
 8000f42:	f001 f88c 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f46:	2026      	movs	r0, #38	; 0x26
 8000f48:	f001 f8a5 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f4c:	e035      	b.n	8000fba <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_UART_MspInit+0x104>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d130      	bne.n	8000fba <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f62:	61d3      	str	r3, [r2, #28]
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7a:	6153      	str	r3, [r2, #20]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_UART_MspInit+0x100>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <HAL_UART_MspInit+0x108>)
 8000fa6:	f001 fb45 	bl	8002634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2027      	movs	r0, #39	; 0x27
 8000fb0:	f001 f855 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb4:	2027      	movs	r0, #39	; 0x27
 8000fb6:	f001 f86e 	bl	8002096 <HAL_NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	; 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40004800 	.word	0x40004800
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8e4 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Tick_1ms();
 8001024:	f7ff fa16 	bl	8000454 <Tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA1_Channel1_IRQHandler+0x10>)
 8001032:	f001 fa0d 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003f4 	.word	0x200003f4

08001040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <I2C1_EV_IRQHandler+0x10>)
 8001046:	f001 fef9 	bl	8002e3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000230 	.word	0x20000230

08001054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART2_IRQHandler+0x10>)
 800105a:	f003 fd71 	bl	8004b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000448 	.word	0x20000448

08001068 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <USART3_IRQHandler+0x10>)
 800106e:	f003 fd67 	bl	8004b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001ac 	.word	0x200001ac

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f004 fbca 	bl	8005844 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20004000 	.word	0x20004000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200001a0 	.word	0x200001a0
 80010e4:	200004e0 	.word	0x200004e0

080010e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f004 fb89 	bl	8005850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff f9bf 	bl	80004c0 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001150:	0800620c 	.word	0x0800620c
  ldr r2, =_sbss
 8001154:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001158:	200004e0 	.word	0x200004e0

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>
	...

08001160 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 ff69 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fd54 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 ff81 	bl	80020b2 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 ff49 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000004 	.word	0x20000004
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000000c 	.word	0x2000000c
 8001210:	200004cc 	.word	0x200004cc

08001214 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;  
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200004cc 	.word	0x200004cc

0800122c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09a      	sub	sp, #104	; 0x68
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e169      	b.n	80015a4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d176      	bne.n	80013d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d152      	bne.n	8001390 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fcb3 	bl	8000c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d13b      	bne.n	8001390 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fd65 	bl	8001de8 <ADC_Disable>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	d12f      	bne.n	8001390 <HAL_ADC_Init+0xe0>
 8001330:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001334:	2b00      	cmp	r3, #0
 8001336:	d12b      	bne.n	8001390 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800135a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800136a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800136c:	4b8f      	ldr	r3, [pc, #572]	; (80015ac <HAL_ADC_Init+0x2fc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a8f      	ldr	r2, [pc, #572]	; (80015b0 <HAL_ADC_Init+0x300>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0c9a      	lsrs	r2, r3, #18
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001382:	e002      	b.n	800138a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ac:	d110      	bne.n	80013d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f023 0312 	bic.w	r3, r3, #18
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 80d6 	bne.w	800158a <HAL_ADC_Init+0x2da>
 80013de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80d1 	bne.w	800158a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80c9 	bne.w	800158a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001400:	f043 0202 	orr.w	r2, r3, #2
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_ADC_Init+0x304>)
 800140a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_ADC_Init+0x180>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ADC_Init+0x180>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_ADC_Init+0x182>
 8001430:	2300      	movs	r3, #0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11c      	bne.n	8001470 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001436:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001438:	2b00      	cmp	r3, #0
 800143a:	d010      	beq.n	800145e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_ADC_Init+0x1a8>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_Init+0x1a8>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_ADC_Init+0x1aa>
 8001458:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800145a:	2b00      	cmp	r3, #0
 800145c:	d108      	bne.n	8001470 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800145e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	431a      	orrs	r2, r3
 800146c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7e5b      	ldrb	r3, [r3, #25]
 8001474:	035b      	lsls	r3, r3, #13
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800147a:	2a01      	cmp	r2, #1
 800147c:	d002      	beq.n	8001484 <HAL_ADC_Init+0x1d4>
 800147e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001482:	e000      	b.n	8001486 <HAL_ADC_Init+0x1d6>
 8001484:	2200      	movs	r2, #0
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4313      	orrs	r3, r2
 8001494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001496:	4313      	orrs	r3, r2
 8001498:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d11b      	bne.n	80014dc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e5b      	ldrb	r3, [r3, #25]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	3b01      	subs	r3, #1
 80014b2:	045a      	lsls	r2, r3, #17
 80014b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	663b      	str	r3, [r7, #96]	; 0x60
 80014be:	e00d      	b.n	80014dc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d007      	beq.n	80014f4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	4313      	orrs	r3, r2
 80014ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014f0:	4313      	orrs	r3, r2
 80014f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d114      	bne.n	800152c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001510:	f023 0302 	bic.w	r3, r3, #2
 8001514:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7e1b      	ldrb	r3, [r3, #24]
 800151a:	039a      	lsls	r2, r3, #14
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4313      	orrs	r3, r2
 8001526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001528:	4313      	orrs	r3, r2
 800152a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_ADC_Init+0x308>)
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800153c:	430b      	orrs	r3, r1
 800153e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10c      	bne.n	8001562 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f023 010f 	bic.w	r1, r3, #15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
 8001560:	e007      	b.n	8001572 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 020f 	bic.w	r2, r2, #15
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
 8001588:	e00a      	b.n	80015a0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f023 0312 	bic.w	r3, r3, #18
 8001592:	f043 0210 	orr.w	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3768      	adds	r7, #104	; 0x68
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000004 	.word	0x20000004
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	50000300 	.word	0x50000300
 80015b8:	fff0c007 	.word	0xfff0c007

080015bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d17e      	bne.n	80016d8 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x2c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e07a      	b.n	80016de <HAL_ADC_Start_DMA+0x122>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fb9b 	bl	8001d2c <ADC_Enable>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d166      	bne.n	80016ce <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d007      	beq.n	800163e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001636:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164a:	d106      	bne.n	800165a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f023 0206 	bic.w	r2, r3, #6
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
 8001658:	e002      	b.n	8001660 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_ADC_Start_DMA+0x12c>)
 800166e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_ADC_Start_DMA+0x130>)
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_ADC_Start_DMA+0x134>)
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	221c      	movs	r2, #28
 8001686:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0210 	orr.w	r2, r2, #16
 8001696:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3340      	adds	r3, #64	; 0x40
 80016b2:	4619      	mov	r1, r3
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f000 fdf4 	bl	80022a4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0204 	orr.w	r2, r2, #4
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e006      	b.n	80016dc <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
 80016da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08001c61 	.word	0x08001c61
 80016ec:	08001cdb 	.word	0x08001cdb
 80016f0:	08001cf7 	.word	0x08001cf7

080016f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b09b      	sub	sp, #108	; 0x6c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x22>
 8001712:	2302      	movs	r3, #2
 8001714:	e299      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x556>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f040 827d 	bne.w	8001c28 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d81c      	bhi.n	8001770 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	461a      	mov	r2, r3
 800174a:	231f      	movs	r3, #31
 800174c:	4093      	lsls	r3, r2
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
 800176e:	e063      	b.n	8001838 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b09      	cmp	r3, #9
 8001776:	d81e      	bhi.n	80017b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	3b1e      	subs	r3, #30
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	4019      	ands	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	3b1e      	subs	r3, #30
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
 80017b4:	e040      	b.n	8001838 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b0e      	cmp	r3, #14
 80017bc:	d81e      	bhi.n	80017fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	3b3c      	subs	r3, #60	; 0x3c
 80017d2:	221f      	movs	r2, #31
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3b3c      	subs	r3, #60	; 0x3c
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
 80017fa:	e01d      	b.n	8001838 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	3b5a      	subs	r3, #90	; 0x5a
 8001810:	221f      	movs	r2, #31
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	4019      	ands	r1, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	3b5a      	subs	r3, #90	; 0x5a
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 80e5 	bne.w	8001a12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b09      	cmp	r3, #9
 800184e:	d91c      	bls.n	800188a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6999      	ldr	r1, [r3, #24]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	3b1e      	subs	r3, #30
 8001862:	2207      	movs	r2, #7
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	4019      	ands	r1, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6898      	ldr	r0, [r3, #8]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	3b1e      	subs	r3, #30
 800187c:	fa00 f203 	lsl.w	r2, r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	e019      	b.n	80018be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6959      	ldr	r1, [r3, #20]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	2207      	movs	r2, #7
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4019      	ands	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6898      	ldr	r0, [r3, #8]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	3b01      	subs	r3, #1
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d84f      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0x28c>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	0800191b 	.word	0x0800191b
 80018f0:	0800193d 	.word	0x0800193d
 80018f4:	0800195f 	.word	0x0800195f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018fe:	4b99      	ldr	r3, [pc, #612]	; (8001b64 <HAL_ADC_ConfigChannel+0x470>)
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	0691      	lsls	r1, r2, #26
 8001908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800190a:	430a      	orrs	r2, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001916:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001918:	e07e      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001920:	4b90      	ldr	r3, [pc, #576]	; (8001b64 <HAL_ADC_ConfigChannel+0x470>)
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	0691      	lsls	r1, r2, #26
 800192a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192c:	430a      	orrs	r2, r1
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001938:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800193a:	e06d      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_ADC_ConfigChannel+0x470>)
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0691      	lsls	r1, r2, #26
 800194c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194e:	430a      	orrs	r2, r1
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800195a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800195c:	e05c      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001964:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <HAL_ADC_ConfigChannel+0x470>)
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	0691      	lsls	r1, r2, #26
 800196e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001970:	430a      	orrs	r2, r1
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800197c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800197e:	e04b      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	069b      	lsls	r3, r3, #26
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	069b      	lsls	r3, r3, #26
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	069b      	lsls	r3, r3, #26
 80019d8:	429a      	cmp	r2, r3
 80019da:	d107      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	069b      	lsls	r3, r3, #26
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10a      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a10:	e001      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x344>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x344>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x346>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 80ff 	bne.w	8001c3e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d00f      	beq.n	8001a68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	400a      	ands	r2, r1
 8001a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a66:	e049      	b.n	8001afc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	409a      	lsls	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	d91c      	bls.n	8001ac4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6999      	ldr	r1, [r3, #24]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b1b      	subs	r3, #27
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4019      	ands	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6898      	ldr	r0, [r3, #8]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b1b      	subs	r3, #27
 8001ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	619a      	str	r2, [r3, #24]
 8001ac2:	e01b      	b.n	8001afc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6959      	ldr	r1, [r3, #20]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2207      	movs	r2, #7
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6898      	ldr	r0, [r3, #8]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_ADC_ConfigChannel+0x474>)
 8001afe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d014      	beq.n	8001b3e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b18:	2b11      	cmp	r3, #17
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00a      	beq.n	8001b3e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	f040 8086 	bne.w	8001c3e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d17f      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x478>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d106      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x478>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e005      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x47a>
 8001b62:	bf00      	nop
 8001b64:	83fff000 	.word	0x83fff000
 8001b68:	50000300 	.word	0x50000300
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d150      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x4a0>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x4a0>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x4a2>
 8001b94:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d13c      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b10      	cmp	r3, #16
 8001ba0:	d11d      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x4ea>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001baa:	d118      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_ADC_ConfigChannel+0x564>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <HAL_ADC_ConfigChannel+0x568>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9a      	lsrs	r2, r3, #18
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f9      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bdc:	e02e      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d10b      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x50a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfc:	e01e      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d11a      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c12:	e013      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c26:	e00a      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c3c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	376c      	adds	r7, #108	; 0x6c
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d126      	bne.n	8001cc8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d115      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff fad7 	bl	8001274 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cc6:	e004      	b.n	8001cd2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff facd 	bl	8001288 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fabd 	bl	800129c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <ADC_Enable+0x2c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <ADC_Enable+0x2c>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <ADC_Enable+0x2e>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d13c      	bne.n	8001dd8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <ADC_Enable+0xb8>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e028      	b.n	8001dda <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d98:	f7ff fa3c 	bl	8001214 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d9e:	e014      	b.n	8001dca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001da0:	f7ff fa38 	bl	8001214 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d90d      	bls.n	8001dca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1e3      	bne.n	8001da0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	8000003f 	.word	0x8000003f

08001de8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <ADC_Disable+0x2c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <ADC_Disable+0x2c>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <ADC_Disable+0x2e>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d040      	beq.n	8001e9c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030d 	and.w	r3, r3, #13
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10f      	bne.n	8001e48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0202 	orr.w	r2, r2, #2
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e40:	f7ff f9e8 	bl	8001214 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e46:	e022      	b.n	8001e8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e01c      	b.n	8001e9e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e64:	f7ff f9d6 	bl	8001214 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d90d      	bls.n	8001e8e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e007      	b.n	8001e9e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d0e3      	beq.n	8001e64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fe43 	bl	8000d78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	795b      	ldrb	r3, [r3, #5]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_DAC_Start+0x16>
 8002120:	2302      	movs	r3, #2
 8002122:	e025      	b.n	8002170 <HAL_DAC_Start+0x62>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	409a      	lsls	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800214e:	2b3c      	cmp	r3, #60	; 0x3c
 8002150:	d107      	bne.n	8002162 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	795b      	ldrb	r3, [r3, #5]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_DAC_ConfigChannel+0x20>
 8002198:	2302      	movs	r3, #2
 800219a:	e036      	b.n	800220a <HAL_DAC_ConfigChannel+0x8e>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80021b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4013      	ands	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	22c0      	movs	r2, #192	; 0xc0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e037      	b.n	800229c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002242:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002246:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9b8 	bl	80025f4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}  
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Start_IT+0x20>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e04a      	b.n	800235a <HAL_DMA_Start_IT+0xb6>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d13a      	bne.n	800234c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f94b 	bl	8002596 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 020e 	orr.w	r2, r2, #14
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e00f      	b.n	800233a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 020a 	orr.w	r2, r2, #10
 8002328:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0204 	bic.w	r2, r2, #4
 8002338:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e005      	b.n	8002358 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002354:	2302      	movs	r3, #2
 8002356:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002358:	7dfb      	ldrb	r3, [r7, #23]
} 
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002370:	2b02      	cmp	r3, #2
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2204      	movs	r2, #4
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e020      	b.n	80023c8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 020e 	bic.w	r2, r2, #14
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d005      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2204      	movs	r2, #4
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e027      	b.n	8002446 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 020e 	bic.w	r2, r2, #14
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
    } 
  }
  return status;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2204      	movs	r2, #4
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d024      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x72>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01f      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	2104      	movs	r1, #4
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d06a      	beq.n	800258e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	e065      	b.n	800258e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2202      	movs	r2, #2
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02c      	beq.n	800252c <HAL_DMA_IRQHandler+0xdc>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d027      	beq.n	800252c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020a 	bic.w	r2, r2, #10
 80024f8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	2102      	movs	r1, #2
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	d035      	beq.n	800258e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800252a:	e030      	b.n	800258e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2208      	movs	r2, #8
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d028      	beq.n	800258e <HAL_DMA_IRQHandler+0x13e>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 020e 	bic.w	r2, r2, #14
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
    }
  }
}  
 800258c:	e7ff      	b.n	800258e <HAL_DMA_IRQHandler+0x13e>
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d108      	bne.n	80025d6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025d4:	e007      	b.n	80025e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	60da      	str	r2, [r3, #12]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <DMA_CalcBaseAndBitshift+0x34>)
 8002604:	4413      	add	r3, r2
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <DMA_CalcBaseAndBitshift+0x38>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a06      	ldr	r2, [pc, #24]	; (8002630 <DMA_CalcBaseAndBitshift+0x3c>)
 8002618:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	bffdfff8 	.word	0xbffdfff8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002642:	e14e      	b.n	80028e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8140 	beq.w	80028dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d00b      	beq.n	800267c <HAL_GPIO_Init+0x48>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002670:	2b11      	cmp	r3, #17
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d130      	bne.n	80026de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b2:	2201      	movs	r2, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0201 	and.w	r2, r3, #1
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0xea>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b12      	cmp	r3, #18
 800271c:	d123      	bne.n	8002766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	6939      	ldr	r1, [r7, #16]
 8002762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 809a 	beq.w	80028dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_GPIO_Init+0x2cc>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_GPIO_Init+0x2cc>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x2cc>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027c0:	4a50      	ldr	r2, [pc, #320]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_Init+0x1e0>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a46      	ldr	r2, [pc, #280]	; (8002908 <HAL_GPIO_Init+0x2d4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a45      	ldr	r2, [pc, #276]	; (800290c <HAL_GPIO_Init+0x2d8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x1d8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a44      	ldr	r2, [pc, #272]	; (8002910 <HAL_GPIO_Init+0x2dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_Init+0x1d4>
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x1e2>
 8002808:	2305      	movs	r3, #5
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x1e2>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x1e2>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x1e2>
 8002814:	2300      	movs	r3, #0
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002826:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_GPIO_Init+0x2d0>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002858:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <HAL_GPIO_Init+0x2e0>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f aea9 	bne.w	8002644 <HAL_GPIO_Init+0x10>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000
 8002908:	48000400 	.word	0x48000400
 800290c:	48000800 	.word	0x48000800
 8002910:	48000c00 	.word	0x48000c00
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002934:	e002      	b.n	800293c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e081      	b.n	8002a5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fa40 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e006      	b.n	80029d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d104      	bne.n	80029e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	ea42 0103 	orr.w	r1, r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	021a      	lsls	r2, r3, #8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 80da 	bne.w	8002c3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2C_Master_Transmit+0x30>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0d3      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fbb8 	bl	8001214 <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2319      	movs	r3, #25
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa00 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0be      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2210      	movs	r2, #16
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2bff      	cmp	r3, #255	; 0xff
 8002af2:	d90e      	bls.n	8002b12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	8979      	ldrh	r1, [r7, #10]
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fb62 	bl	80031d4 <I2C_TransferConfig>
 8002b10:	e06c      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	4b48      	ldr	r3, [pc, #288]	; (8002c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fb51 	bl	80031d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b32:	e05b      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f9fd 	bl	8002f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e07b      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d034      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x184>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d130      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f98f 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04d      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d90e      	bls.n	8002bcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fb05 	bl	80031d4 <I2C_TransferConfig>
 8002bca:	e00f      	b.n	8002bec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 faf4 	bl	80031d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d19e      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9dc 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e01a      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_I2C_Master_Transmit+0x1e4>)
 8002c1e:	400b      	ands	r3, r1
 8002c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	80002000 	.word	0x80002000
 8002c4c:	fe00e800 	.word	0xfe00e800

08002c50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	817b      	strh	r3, [r7, #10]
 8002c60:	4613      	mov	r3, r2
 8002c62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	f040 80db 	bne.w	8002e28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_I2C_Master_Receive+0x30>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0d4      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c88:	f7fe fac4 	bl	8001214 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2319      	movs	r3, #25
 8002c94:	2201      	movs	r2, #1
 8002c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f90c 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0bf      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2222      	movs	r2, #34	; 0x22
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2bff      	cmp	r3, #255	; 0xff
 8002cda:	d90e      	bls.n	8002cfa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	22ff      	movs	r2, #255	; 0xff
 8002ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	8979      	ldrh	r1, [r7, #10]
 8002cea:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <HAL_I2C_Master_Receive+0x1e4>)
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fa6e 	bl	80031d4 <I2C_TransferConfig>
 8002cf8:	e06d      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <HAL_I2C_Master_Receive+0x1e4>)
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fa5d 	bl	80031d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d1a:	e05c      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6a39      	ldr	r1, [r7, #32]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f985 	bl	8003030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e07c      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d034      	beq.n	8002dd6 <HAL_I2C_Master_Receive+0x186>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d130      	bne.n	8002dd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f89a 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04d      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2bff      	cmp	r3, #255	; 0xff
 8002d96:	d90e      	bls.n	8002db6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa10 	bl	80031d4 <I2C_TransferConfig>
 8002db4:	e00f      	b.n	8002dd6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f9ff 	bl	80031d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d19d      	bne.n	8002d1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	6a39      	ldr	r1, [r7, #32]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f8e7 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e01a      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_I2C_Master_Receive+0x1e8>)
 8002e08:	400b      	ands	r3, r1
 8002e0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	80002400 	.word	0x80002400
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68f9      	ldr	r1, [r7, #12]
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	619a      	str	r2, [r3, #24]
  }
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e022      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d01e      	beq.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe f99f 	bl	8001214 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d113      	bne.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e00f      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d0cd      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f44:	e02c      	b.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8dc 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02a      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d01e      	beq.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe f957 	bl	8001214 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d1cb      	bne.n	8002f46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	e028      	b.n	8003018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f89c 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e026      	b.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe f91b 	bl	8001214 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d113      	bne.n	8003018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d1cf      	bne.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303c:	e055      	b.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f860 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e053      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d129      	bne.n	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d105      	bne.n	800307a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e03f      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e022      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fe f8ae 	bl	8001214 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d1a2      	bne.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	fe00e800 	.word	0xfe00e800

08003108 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b10      	cmp	r3, #16
 8003120:	d151      	bne.n	80031c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003122:	e022      	b.n	800316a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d01e      	beq.n	800316a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fe f872 	bl	8001214 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_IsAcknowledgeFailed+0x3a>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d113      	bne.n	800316a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02e      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d1d5      	bne.n	8003124 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe71 	bl	8002e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800319a:	400b      	ands	r3, r1
 800319c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fe00e800 	.word	0xfe00e800

080031d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	4613      	mov	r3, r2
 80031e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	0d5b      	lsrs	r3, r3, #21
 80031f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <I2C_TransferConfig+0x58>)
 80031f6:	430b      	orrs	r3, r1
 80031f8:	43db      	mvns	r3, r3
 80031fa:	ea02 0103 	and.w	r1, r2, r3
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	03ff63ff 	.word	0x03ff63ff

08003230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d138      	bne.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e032      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d139      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e033      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	; 0x24
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003366:	af00      	add	r7, sp, #0
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f000 bef4 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 816a 	beq.w	800365e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800338a:	4bb3      	ldr	r3, [pc, #716]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b04      	cmp	r3, #4
 8003394:	d00c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003396:	4bb0      	ldr	r3, [pc, #704]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d159      	bne.n	8003456 <HAL_RCC_OscConfig+0xf6>
 80033a2:	4bad      	ldr	r3, [pc, #692]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d152      	bne.n	8003456 <HAL_RCC_OscConfig+0xf6>
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_OscConfig+0x82>
 80033dc:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0xae>
 80033e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800340a:	4b93      	ldr	r3, [pc, #588]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003412:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003416:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800341a:	fa92 f2a2 	rbit	r2, r2
 800341e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003422:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 810c 	beq.w	800365c <HAL_RCC_OscConfig+0x2fc>
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8106 	bne.w	800365c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f000 be86 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0x110>
 8003462:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7c      	ldr	r2, [pc, #496]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e030      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x134>
 800347a:	4b77      	ldr	r3, [pc, #476]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b74      	ldr	r3, [pc, #464]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800348c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01e      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x15a>
 80034a0:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6c      	ldr	r2, [pc, #432]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a69      	ldr	r2, [pc, #420]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x172>
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a66      	ldr	r2, [pc, #408]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	495d      	ldr	r1, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d059      	beq.n	80035a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fe90 	bl	8001214 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fa:	f7fd fe8b 	bl	8001214 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d902      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	f000 be29 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 8003510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003514:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003524:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <HAL_RCC_OscConfig+0x1e2>
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x20e>
 8003542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003546:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800355e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003572:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003576:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003582:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f002 021f 	and.w	r2, r2, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ab      	beq.n	80034fa <HAL_RCC_OscConfig+0x19a>
 80035a2:	e05c      	b.n	800365e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fd fe36 	bl	8001214 <HAL_GetTick>
 80035a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ae:	f7fd fe31 	bl	8001214 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d902      	bls.n	80035c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	f000 bdcf 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80035c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80035d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d102      	bne.n	80035f6 <HAL_RCC_OscConfig+0x296>
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	e015      	b.n	8003622 <HAL_RCC_OscConfig+0x2c2>
 80035f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800360a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800360e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003612:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCC_OscConfig+0x2f8>)
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003626:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800362a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003636:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800363a:	fab2 f282 	clz	r2, r2
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f002 021f 	and.w	r2, r2, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f202 	lsl.w	r2, r1, r2
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ab      	bne.n	80035ae <HAL_RCC_OscConfig+0x24e>
 8003656:	e002      	b.n	800365e <HAL_RCC_OscConfig+0x2fe>
 8003658:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 816f 	beq.w	800394c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800366e:	4bd0      	ldr	r3, [pc, #832]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800367a:	4bcd      	ldr	r3, [pc, #820]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d16c      	bne.n	8003760 <HAL_RCC_OscConfig+0x400>
 8003686:	4bca      	ldr	r3, [pc, #808]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d166      	bne.n	8003760 <HAL_RCC_OscConfig+0x400>
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x362>
 80036bc:	4bbc      	ldr	r3, [pc, #752]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0x38a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036d4:	2302      	movs	r3, #2
 80036d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036e6:	4bb2      	ldr	r3, [pc, #712]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2202      	movs	r2, #2
 80036ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80036f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80036fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f002 021f 	and.w	r2, r2, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_RCC_OscConfig+0x3cc>
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f000 bd1b 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4ba0      	ldr	r3, [pc, #640]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	21f8      	movs	r1, #248	; 0xf8
 800373c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003744:	fa91 f1a1 	rbit	r1, r1
 8003748:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800374c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003750:	fab1 f181 	clz	r1, r1
 8003754:	b2c9      	uxtb	r1, r1
 8003756:	408b      	lsls	r3, r1
 8003758:	4995      	ldr	r1, [pc, #596]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	e0f5      	b.n	800394c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8085 	beq.w	8003876 <HAL_RCC_OscConfig+0x516>
 800376c:	2301      	movs	r3, #1
 800376e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800377e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800378c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	461a      	mov	r2, r3
 8003794:	2301      	movs	r3, #1
 8003796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fd fd3c 	bl	8001214 <HAL_GetTick>
 800379c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fd fd37 	bl	8001214 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f000 bcd5 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_RCC_OscConfig+0x488>
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e013      	b.n	8003810 <HAL_RCC_OscConfig+0x4b0>
 80037e8:	2302      	movs	r3, #2
 80037ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037fa:	2302      	movs	r3, #2
 80037fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003800:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003816:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800381a:	fa92 f2a2 	rbit	r2, r2
 800381e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003822:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f042 0220 	orr.w	r2, r2, #32
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	f002 021f 	and.w	r2, r2, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0af      	beq.n	80037a2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	21f8      	movs	r1, #248	; 0xf8
 8003852:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800385a:	fa91 f1a1 	rbit	r1, r1
 800385e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003862:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003866:	fab1 f181 	clz	r1, r1
 800386a:	b2c9      	uxtb	r1, r1
 800386c:	408b      	lsls	r3, r1
 800386e:	4950      	ldr	r1, [pc, #320]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e06a      	b.n	800394c <HAL_RCC_OscConfig+0x5ec>
 8003876:	2301      	movs	r3, #1
 8003878:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003896:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fd fcb7 	bl	8001214 <HAL_GetTick>
 80038a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd fcb2 	bl	8001214 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d902      	bls.n	80038c2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	f000 bc50 	b.w	8004162 <HAL_RCC_OscConfig+0xe02>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0x592>
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e013      	b.n	800391a <HAL_RCC_OscConfig+0x5ba>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003904:	2302      	movs	r3, #2
 8003906:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800390a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCC_OscConfig+0x650>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2202      	movs	r2, #2
 800391c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003920:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800392c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1af      	bne.n	80038ac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80da 	beq.w	8003b10 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d069      	beq.n	8003a3a <HAL_RCC_OscConfig+0x6da>
 8003966:	2301      	movs	r3, #1
 8003968:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	461a      	mov	r2, r3
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x654>)
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	461a      	mov	r2, r3
 800398c:	2301      	movs	r3, #1
 800398e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fd fc40 	bl	8001214 <HAL_GetTick>
 8003994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e00e      	b.n	80039b8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fd fc3b 	bl	8001214 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d906      	bls.n	80039b8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e3d9      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	10908120 	.word	0x10908120
 80039b8:	2302      	movs	r3, #2
 80039ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039ce:	2202      	movs	r2, #2
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039e6:	2202      	movs	r2, #2
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	fa93 f2a3 	rbit	r2, r3
 80039f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80039f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 80039fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a02:	2102      	movs	r1, #2
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f1a3 	rbit	r1, r3
 8003a10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a14:	6019      	str	r1, [r3, #0]
  return result;
 8003a16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0b0      	beq.n	800399a <HAL_RCC_OscConfig+0x63a>
 8003a38:	e06a      	b.n	8003b10 <HAL_RCC_OscConfig+0x7b0>
 8003a3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fa93 f2a3 	rbit	r2, r3
 8003a4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a50:	601a      	str	r2, [r3, #0]
  return result;
 8003a52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b8c      	ldr	r3, [pc, #560]	; (8003c94 <HAL_RCC_OscConfig+0x934>)
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fbd2 	bl	8001214 <HAL_GetTick>
 8003a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	e009      	b.n	8003a8a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a76:	f7fd fbcd 	bl	8001214 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e36b      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003a8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a8e:	2202      	movs	r2, #2
 8003a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ad0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ada:	2102      	movs	r1, #2
 8003adc:	6019      	str	r1, [r3, #0]
 8003ade:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	fa93 f1a3 	rbit	r1, r3
 8003ae8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003aec:	6019      	str	r1, [r3, #0]
  return result;
 8003aee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1b2      	bne.n	8003a76 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8158 	beq.w	8003dd0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d112      	bne.n	8003b58 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a56      	ldr	r2, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b54      	ldr	r3, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11a      	bne.n	8003b9a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4b      	ldr	r2, [pc, #300]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7fd fb50 	bl	8001214 <HAL_GetTick>
 8003b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e009      	b.n	8003b8e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fd fb4b 	bl	8001214 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e2e9      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x938>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ef      	beq.n	8003b7a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x852>
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e02f      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x876>
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e01d      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x89a>
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6213      	str	r3, [r2, #32]
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0x8b2>
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d06b      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fafa 	bl	8001214 <HAL_GetTick>
 8003c20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fd faf5 	bl	8001214 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e291      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003c3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c6c:	601a      	str	r2, [r3, #0]
  return result;
 8003c6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0302 	orr.w	r3, r3, #2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_OscConfig+0x93c>
 8003c88:	4b01      	ldr	r3, [pc, #4]	; (8003c90 <HAL_RCC_OscConfig+0x930>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x958>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	10908120 	.word	0x10908120
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	4bbb      	ldr	r3, [pc, #748]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	6011      	str	r1, [r2, #0]
 8003cc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	fa92 f1a2 	rbit	r1, r2
 8003cca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cce:	6011      	str	r1, [r2, #0]
  return result;
 8003cd0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d099      	beq.n	8003c26 <HAL_RCC_OscConfig+0x8c6>
 8003cf2:	e063      	b.n	8003dbc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa8e 	bl	8001214 <HAL_GetTick>
 8003cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fd fa89 	bl	8001214 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e225      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d44:	601a      	str	r2, [r3, #0]
  return result;
 8003d46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d102      	bne.n	8003d66 <HAL_RCC_OscConfig+0xa06>
 8003d60:	4b90      	ldr	r3, [pc, #576]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	e00d      	b.n	8003d82 <HAL_RCC_OscConfig+0xa22>
 8003d66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d86:	2102      	movs	r1, #2
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	fa92 f1a2 	rbit	r1, r2
 8003d94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d98:	6011      	str	r1, [r2, #0]
  return result;
 8003d9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f002 021f 	and.w	r2, r2, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1a0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b77      	ldr	r3, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4a76      	ldr	r2, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 81c2 	beq.w	8004160 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ddc:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f000 819c 	beq.w	8004122 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f040 8114 	bne.w	800401e <HAL_RCC_OscConfig+0xcbe>
 8003df6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	fa93 f2a3 	rbit	r2, r3
 8003e0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e0e:	601a      	str	r2, [r3, #0]
  return result;
 8003e10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fd f9f2 	bl	8001214 <HAL_GetTick>
 8003e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e34:	e009      	b.n	8003e4a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd f9ed 	bl	8001214 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e18b      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003e4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e62:	601a      	str	r2, [r3, #0]
  return result;
 8003e64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0xb24>
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e01b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb5c>
 8003e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ec0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	fa92 f1a2 	rbit	r1, r2
 8003ed0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ed4:	6011      	str	r1, [r2, #0]
  return result;
 8003ed6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	fab2 f282 	clz	r2, r2
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f042 0220 	orr.w	r2, r2, #32
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f002 021f 	and.w	r2, r2, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d19e      	bne.n	8003e36 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	4925      	ldr	r1, [pc, #148]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f2c:	601a      	str	r2, [r3, #0]
  return result;
 8003f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f32:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	2301      	movs	r3, #1
 8003f48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fd f963 	bl	8001214 <HAL_GetTick>
 8003f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f52:	e009      	b.n	8003f68 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd f95e 	bl	8001214 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0fc      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8003f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f80:	601a      	str	r2, [r3, #0]
  return result;
 8003f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xc48>
 8003f9c:	4b01      	ldr	r3, [pc, #4]	; (8003fa4 <HAL_RCC_OscConfig+0xc44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	e01e      	b.n	8003fe0 <HAL_RCC_OscConfig+0xc80>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	fa93 f2a3 	rbit	r2, r3
 8003fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	fa92 f1a2 	rbit	r1, r2
 8003ff4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ff8:	6011      	str	r1, [r2, #0]
  return result;
 8003ffa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	fab2 f282 	clz	r2, r2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	f002 021f 	and.w	r2, r2, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d09b      	beq.n	8003f54 <HAL_RCC_OscConfig+0xbf4>
 800401c:	e0a0      	b.n	8004160 <HAL_RCC_OscConfig+0xe00>
 800401e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004036:	601a      	str	r2, [r3, #0]
  return result;
 8004038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004048:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fd f8de 	bl	8001214 <HAL_GetTick>
 8004058:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	e009      	b.n	8004072 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd f8d9 	bl	8001214 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e077      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fa93 f2a3 	rbit	r2, r3
 8004086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408a:	601a      	str	r2, [r3, #0]
  return result;
 800408c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004090:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <HAL_RCC_OscConfig+0xd4c>
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0xd84>
 80040ac:	f107 0320 	add.w	r3, r7, #32
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f107 0320 	add.w	r3, r7, #32
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f107 031c 	add.w	r3, r7, #28
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f107 0318 	add.w	r3, r7, #24
 80040ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f107 0318 	add.w	r3, r7, #24
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f107 0210 	add.w	r2, r7, #16
 80040e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	f107 0210 	add.w	r2, r7, #16
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f107 020c 	add.w	r2, r7, #12
 80040fc:	6011      	str	r1, [r2, #0]
  return result;
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	fab2 f282 	clz	r2, r2
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f042 0220 	orr.w	r2, r2, #32
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f002 021f 	and.w	r2, r2, #31
 8004114:	2101      	movs	r1, #1
 8004116:	fa01 f202 	lsl.w	r2, r1, r2
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d19e      	bne.n	800405e <HAL_RCC_OscConfig+0xcfe>
 8004120:	e01e      	b.n	8004160 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004122:	1d3b      	adds	r3, r7, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e018      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0xe0c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004138:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800413c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	429a      	cmp	r2, r3
 8004148:	d108      	bne.n	800415c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800414a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800414e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b09e      	sub	sp, #120	; 0x78
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e162      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b90      	ldr	r3, [pc, #576]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d910      	bls.n	80041b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	498b      	ldr	r1, [pc, #556]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b89      	ldr	r3, [pc, #548]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e14a      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b82      	ldr	r3, [pc, #520]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	497f      	ldr	r1, [pc, #508]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80dc 	beq.w	800439c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d13c      	bne.n	8004266 <HAL_RCC_ClockConfig+0xf6>
 80041ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <HAL_RCC_ClockConfig+0xa6>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	e00f      	b.n	8004236 <HAL_RCC_ClockConfig+0xc6>
 8004216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	667b      	str	r3, [r7, #100]	; 0x64
 8004224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
 800422a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004232:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800423a:	65ba      	str	r2, [r7, #88]	; 0x58
 800423c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800423e:	fa92 f2a2 	rbit	r2, r2
 8004242:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004246:	fab2 f282 	clz	r2, r2
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	f042 0220 	orr.w	r2, r2, #32
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	f002 021f 	and.w	r2, r2, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f202 	lsl.w	r2, r1, r2
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d17b      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e0f3      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d13c      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x178>
 800426e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_RCC_ClockConfig+0x128>
 8004292:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	e00f      	b.n	80042b8 <HAL_RCC_ClockConfig+0x148>
 8004298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40
 80042ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80042be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c0:	fa92 f2a2 	rbit	r2, r2
 80042c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d13a      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b2      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
 80042e8:	2302      	movs	r3, #2
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
 800430a:	4b31      	ldr	r3, [pc, #196]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e00d      	b.n	800432c <HAL_RCC_ClockConfig+0x1bc>
 8004310:	2302      	movs	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2202      	movs	r2, #2
 800432e:	61ba      	str	r2, [r7, #24]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	fa92 f2a2 	rbit	r2, r2
 8004336:	617a      	str	r2, [r7, #20]
  return result;
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	fab2 f282 	clz	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	f042 0220 	orr.w	r2, r2, #32
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	f002 021f 	and.w	r2, r2, #31
 800434a:	2101      	movs	r1, #1
 800434c:	fa01 f202 	lsl.w	r2, r1, r2
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e079      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	491a      	ldr	r1, [pc, #104]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7fc ff52 	bl	8001214 <HAL_GetTick>
 8004370:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fc ff4e 	bl	8001214 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e061      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d214      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4906      	ldr	r1, [pc, #24]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e040      	b.n	800444e <HAL_RCC_ClockConfig+0x2de>
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	491a      	ldr	r1, [pc, #104]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b16      	ldr	r3, [pc, #88]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4912      	ldr	r1, [pc, #72]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004412:	f000 f829 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004416:	4601      	mov	r1, r0
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_RCC_ClockConfig+0x2e8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004420:	22f0      	movs	r2, #240	; 0xf0
 8004422:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	fa92 f2a2 	rbit	r2, r2
 800442a:	60fa      	str	r2, [r7, #12]
  return result;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	fab2 f282 	clz	r2, r2
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	40d3      	lsrs	r3, r2
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x2ec>)
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	fa21 f303 	lsr.w	r3, r1, r3
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <HAL_RCC_ClockConfig+0x2f0>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_RCC_ClockConfig+0x2f4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fea0 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3778      	adds	r7, #120	; 0x78
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	08006194 	.word	0x08006194
 8004460:	20000004 	.word	0x20000004
 8004464:	20000008 	.word	0x20000008

08004468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b08b      	sub	sp, #44	; 0x2c
 800446c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b04      	cmp	r3, #4
 8004490:	d002      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x30>
 8004492:	2b08      	cmp	r3, #8
 8004494:	d003      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x36>
 8004496:	e03c      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004498:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 800449a:	623b      	str	r3, [r7, #32]
      break;
 800449c:	e03c      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	fa92 f2a2 	rbit	r2, r2
 80044b0:	607a      	str	r2, [r7, #4]
  return result;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	40d3      	lsrs	r3, r2
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	220f      	movs	r2, #15
 80044cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	fa92 f2a2 	rbit	r2, r2
 80044d4:	60fa      	str	r2, [r7, #12]
  return result;
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	40d3      	lsrs	r3, r2
 80044e0:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044f0:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	e004      	b.n	800450c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	623b      	str	r3, [r7, #32]
      break;
 8004510:	e002      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004514:	623b      	str	r3, [r7, #32]
      break;
 8004516:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004518:	6a3b      	ldr	r3, [r7, #32]
}
 800451a:	4618      	mov	r0, r3
 800451c:	372c      	adds	r7, #44	; 0x2c
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	007a1200 	.word	0x007a1200
 8004530:	080061ac 	.word	0x080061ac
 8004534:	080061bc 	.word	0x080061bc
 8004538:	003d0900 	.word	0x003d0900

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800455a:	f7ff ffef 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455e:	4601      	mov	r1, r0
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004568:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800456c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	fa92 f2a2 	rbit	r2, r2
 8004574:	603a      	str	r2, [r7, #0]
  return result;
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	40d3      	lsrs	r3, r2
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	080061a4 	.word	0x080061a4

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800459e:	f7ff ffcd 	bl	800453c <HAL_RCC_GetHCLKFreq>
 80045a2:	4601      	mov	r1, r0
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	603a      	str	r2, [r7, #0]
  return result;
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	fab2 f282 	clz	r2, r2
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	40d3      	lsrs	r3, r2
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	080061a4 	.word	0x080061a4

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b092      	sub	sp, #72	; 0x48
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80d4 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004600:	4b4e      	ldr	r3, [pc, #312]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10e      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4a4a      	ldr	r2, [pc, #296]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	61d3      	str	r3, [r2, #28]
 8004618:	4b48      	ldr	r3, [pc, #288]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b45      	ldr	r3, [pc, #276]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b42      	ldr	r3, [pc, #264]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a41      	ldr	r2, [pc, #260]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fc fde7 	bl	8001214 <HAL_GetTick>
 8004646:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fc fde3 	bl	8001214 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e14b      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	4b38      	ldr	r3, [pc, #224]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004668:	4b34      	ldr	r3, [pc, #208]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8084 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004684:	429a      	cmp	r2, r3
 8004686:	d07c      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	2301      	movs	r3, #1
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	461a      	mov	r2, r3
 80046d6:	2300      	movs	r3, #0
 80046d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04b      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fd93 	bl	8001214 <HAL_GetTick>
 80046ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fc fd8f 	bl	8001214 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e0f5      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004708:	2302      	movs	r3, #2
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
 8004714:	2302      	movs	r3, #2
 8004716:	623b      	str	r3, [r7, #32]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	61fb      	str	r3, [r7, #28]
  return result;
 8004720:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f043 0302 	orr.w	r3, r3, #2
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d108      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004736:	4b01      	ldr	r3, [pc, #4]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	e00d      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800473c:	40021000 	.word	0x40021000
 8004740:	40007000 	.word	0x40007000
 8004744:	10908100 	.word	0x10908100
 8004748:	2302      	movs	r3, #2
 800474a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	4b69      	ldr	r3, [pc, #420]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	2202      	movs	r2, #2
 800475a:	613a      	str	r2, [r7, #16]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	fa92 f2a2 	rbit	r2, r2
 8004762:	60fa      	str	r2, [r7, #12]
  return result;
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	fab2 f282 	clz	r2, r2
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	f002 021f 	and.w	r2, r2, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f202 	lsl.w	r2, r1, r2
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0b7      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004782:	4b5e      	ldr	r3, [pc, #376]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	495b      	ldr	r1, [pc, #364]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004790:	4313      	orrs	r3, r2
 8004792:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004794:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b57      	ldr	r3, [pc, #348]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4a56      	ldr	r2, [pc, #344]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b4:	4b51      	ldr	r3, [pc, #324]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	f023 0203 	bic.w	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	494e      	ldr	r1, [pc, #312]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d2:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f023 0210 	bic.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4947      	ldr	r1, [pc, #284]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	493f      	ldr	r1, [pc, #252]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f023 0220 	bic.w	r2, r3, #32
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	4938      	ldr	r1, [pc, #224]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800481c:	4313      	orrs	r3, r2
 800481e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	4930      	ldr	r1, [pc, #192]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800483a:	4313      	orrs	r3, r2
 800483c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800484a:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4929      	ldr	r1, [pc, #164]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004868:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4921      	ldr	r1, [pc, #132]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004876:	4313      	orrs	r3, r2
 8004878:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	491a      	ldr	r1, [pc, #104]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004894:	4313      	orrs	r3, r2
 8004896:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	4912      	ldr	r1, [pc, #72]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80048c2:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	490b      	ldr	r1, [pc, #44]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3748      	adds	r7, #72	; 0x48
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000

08004900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e040      	b.n	8004994 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fad0 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fb1e 	bl	8004f80 <UART_SetConfig>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e022      	b.n	8004994 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fc48 	bl	80051ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800496a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800497a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fccf 	bl	8005330 <UART_CheckIdleState>
 8004992:	4603      	mov	r3, r0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	f040 8082 	bne.w	8004aba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_UART_Transmit+0x26>
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e07a      	b.n	8004abc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Transmit+0x38>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e073      	b.n	8004abc <HAL_UART_Transmit+0x120>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2221      	movs	r2, #33	; 0x21
 80049e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ea:	f7fc fc13 	bl	8001214 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d108      	bne.n	8004a1c <HAL_UART_Transmit+0x80>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e003      	b.n	8004a24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a2c:	e02d      	b.n	8004a8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fcc2 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e039      	b.n	8004abc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	881a      	ldrh	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a5a:	b292      	uxth	r2, r2
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3302      	adds	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e008      	b.n	8004a78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3301      	adds	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1cb      	bne.n	8004a2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fc8e 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e005      	b.n	8004abc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d12c      	bne.n	8004b34 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_UART_Receive_IT+0x22>
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e025      	b.n	8004b36 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Receive_IT+0x34>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e01e      	b.n	8004b36 <HAL_UART_Receive_IT+0x72>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b22:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	461a      	mov	r2, r3
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fcc6 	bl	80054bc <UART_Start_Receive_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	e000      	b.n	8004b36 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d113      	bne.n	8004b98 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00e      	beq.n	8004b98 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 81cc 	beq.w	8004f26 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
      }
      return;
 8004b96:	e1c6      	b.n	8004f26 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80e3 	beq.w	8004d66 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <HAL_UART_IRQHandler+0x304>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80d8 	beq.w	8004d66 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_UART_IRQHandler+0xa2>
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd8:	f043 0201 	orr.w	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d010      	beq.n	8004c0e <HAL_UART_IRQHandler+0xce>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <HAL_UART_IRQHandler+0xfa>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2204      	movs	r2, #4
 8004c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c30:	f043 0202 	orr.w	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c66:	f043 0208 	orr.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d011      	beq.n	8004c9e <HAL_UART_IRQHandler+0x15e>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00c      	beq.n	8004c9e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8140 	beq.w	8004f2a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d004      	beq.n	8004cee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d031      	beq.n	8004d52 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fc6c 	bl	80055cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d123      	bne.n	8004d4a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d013      	beq.n	8004d42 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_UART_IRQHandler+0x308>)
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fb54 	bl	80023d4 <HAL_DMA_Abort_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d017      	beq.n	8004d62 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	e00f      	b.n	8004d62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f906 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	e00b      	b.n	8004d62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f902 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d50:	e007      	b.n	8004d62 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8fe 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004d60:	e0e3      	b.n	8004f2a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d62:	bf00      	nop
    return;
 8004d64:	e0e1      	b.n	8004f2a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	f040 80a7 	bne.w	8004ebe <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80a1 	beq.w	8004ebe <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 809b 	beq.w	8004ebe <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d156      	bne.n	8004e4c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004da8:	893b      	ldrh	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80bf 	beq.w	8004f2e <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004db6:	893a      	ldrh	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	f080 80b8 	bcs.w	8004f2e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	893a      	ldrh	r2, [r7, #8]
 8004dc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d02a      	beq.n	8004e26 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dde:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fa9e 	bl	8002362 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f894 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e40:	e075      	b.n	8004f2e <HAL_UART_IRQHandler+0x3ee>
 8004e42:	bf00      	nop
 8004e44:	04000120 	.word	0x04000120
 8004e48:	0800562b 	.word	0x0800562b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d063      	beq.n	8004f32 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d060      	beq.n	8004f32 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0210 	bic.w	r2, r2, #16
 8004eb0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb2:	897b      	ldrh	r3, [r7, #10]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f856 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ebc:	e039      	b.n	8004f32 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x3a4>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fca7 	bl	8005830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee2:	e029      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01a      	beq.n	8004f36 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
    }
    return;
 8004f08:	e015      	b.n	8004f36 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb99 	bl	8005656 <UART_EndTransmit_IT>
    return;
 8004f24:	e008      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004f26:	bf00      	nop
 8004f28:	e006      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004f2a:	bf00      	nop
 8004f2c:	e004      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004f36:	bf00      	nop
  }

}
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b8a      	ldr	r3, [pc, #552]	; (80051d4 <UART_SetConfig+0x254>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a78      	ldr	r2, [pc, #480]	; (80051d8 <UART_SetConfig+0x258>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d120      	bne.n	800503e <UART_SetConfig+0xbe>
 8004ffc:	4b77      	ldr	r3, [pc, #476]	; (80051dc <UART_SetConfig+0x25c>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	2b03      	cmp	r3, #3
 8005006:	d817      	bhi.n	8005038 <UART_SetConfig+0xb8>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x90>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005021 	.word	0x08005021
 8005014:	0800502d 	.word	0x0800502d
 8005018:	08005033 	.word	0x08005033
 800501c:	08005027 	.word	0x08005027
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e01d      	b.n	8005062 <UART_SetConfig+0xe2>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e01a      	b.n	8005062 <UART_SetConfig+0xe2>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e017      	b.n	8005062 <UART_SetConfig+0xe2>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e014      	b.n	8005062 <UART_SetConfig+0xe2>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e011      	b.n	8005062 <UART_SetConfig+0xe2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a67      	ldr	r2, [pc, #412]	; (80051e0 <UART_SetConfig+0x260>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d102      	bne.n	800504e <UART_SetConfig+0xce>
 8005048:	2300      	movs	r3, #0
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e009      	b.n	8005062 <UART_SetConfig+0xe2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a64      	ldr	r2, [pc, #400]	; (80051e4 <UART_SetConfig+0x264>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d102      	bne.n	800505e <UART_SetConfig+0xde>
 8005058:	2300      	movs	r3, #0
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e001      	b.n	8005062 <UART_SetConfig+0xe2>
 800505e:	2310      	movs	r3, #16
 8005060:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d15b      	bne.n	8005124 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800506c:	7ffb      	ldrb	r3, [r7, #31]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d827      	bhi.n	80050c2 <UART_SetConfig+0x142>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0xf8>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	080050c3 	.word	0x080050c3
 8005088:	080050b3 	.word	0x080050b3
 800508c:	080050c3 	.word	0x080050c3
 8005090:	080050c3 	.word	0x080050c3
 8005094:	080050c3 	.word	0x080050c3
 8005098:	080050bb 	.word	0x080050bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800509c:	f7ff fa5a 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80050a0:	61b8      	str	r0, [r7, #24]
        break;
 80050a2:	e013      	b.n	80050cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7ff fa78 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 80050a8:	61b8      	str	r0, [r7, #24]
        break;
 80050aa:	e00f      	b.n	80050cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050ac:	4b4e      	ldr	r3, [pc, #312]	; (80051e8 <UART_SetConfig+0x268>)
 80050ae:	61bb      	str	r3, [r7, #24]
        break;
 80050b0:	e00c      	b.n	80050cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b2:	f7ff f9d9 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 80050b6:	61b8      	str	r0, [r7, #24]
        break;
 80050b8:	e008      	b.n	80050cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e004      	b.n	80050cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	77bb      	strb	r3, [r7, #30]
        break;
 80050ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d074      	beq.n	80051bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	005a      	lsls	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b0f      	cmp	r3, #15
 80050ee:	d916      	bls.n	800511e <UART_SetConfig+0x19e>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f6:	d212      	bcs.n	800511e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f023 030f 	bic.w	r3, r3, #15
 8005100:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	b29b      	uxth	r3, r3
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	b29a      	uxth	r2, r3
 800510e:	89fb      	ldrh	r3, [r7, #14]
 8005110:	4313      	orrs	r3, r2
 8005112:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	89fa      	ldrh	r2, [r7, #14]
 800511a:	60da      	str	r2, [r3, #12]
 800511c:	e04e      	b.n	80051bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	77bb      	strb	r3, [r7, #30]
 8005122:	e04b      	b.n	80051bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005124:	7ffb      	ldrb	r3, [r7, #31]
 8005126:	2b08      	cmp	r3, #8
 8005128:	d827      	bhi.n	800517a <UART_SetConfig+0x1fa>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <UART_SetConfig+0x1b0>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7ff f9fe 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005158:	61b8      	str	r0, [r7, #24]
        break;
 800515a:	e013      	b.n	8005184 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7ff fa1c 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8005160:	61b8      	str	r0, [r7, #24]
        break;
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <UART_SetConfig+0x268>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00c      	b.n	8005184 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7ff f97d 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 800516e:	61b8      	str	r0, [r7, #24]
        break;
 8005170:	e008      	b.n	8005184 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005176:	61bb      	str	r3, [r7, #24]
        break;
 8005178:	e004      	b.n	8005184 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	77bb      	strb	r3, [r7, #30]
        break;
 8005182:	bf00      	nop
    }

    if (pclk != 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	085a      	lsrs	r2, r3, #1
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	441a      	add	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	b29b      	uxth	r3, r3
 800519e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d908      	bls.n	80051b8 <UART_SetConfig+0x238>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d204      	bcs.n	80051b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	e001      	b.n	80051bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	efff69f3 	.word	0xefff69f3
 80051d8:	40013800 	.word	0x40013800
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40004400 	.word	0x40004400
 80051e4:	40004800 	.word	0x40004800
 80051e8:	007a1200 	.word	0x007a1200

080051ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01a      	beq.n	8005302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ea:	d10a      	bne.n	8005302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af02      	add	r7, sp, #8
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005340:	f7fb ff68 	bl	8001214 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b08      	cmp	r3, #8
 8005352:	d10e      	bne.n	8005372 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f82d 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e023      	b.n	80053ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d10e      	bne.n	800539e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f817 	bl	80053c2 <UART_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e00d      	b.n	80053ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d2:	e05e      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d05a      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fb ff1a 	bl	8001214 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11b      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005400:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e043      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d02c      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005446:	d124      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005460:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e00f      	b.n	80054b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4013      	ands	r3, r2
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bf0c      	ite	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	2300      	movne	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	461a      	mov	r2, r3
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d091      	beq.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d10e      	bne.n	800550e <UART_Start_Receive_IT+0x52>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <UART_Start_Receive_IT+0x48>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005502:	e02d      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	22ff      	movs	r2, #255	; 0xff
 8005508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800550c:	e028      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <UART_Start_Receive_IT+0x76>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <UART_Start_Receive_IT+0x6c>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	22ff      	movs	r2, #255	; 0xff
 8005522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005526:	e01b      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	227f      	movs	r2, #127	; 0x7f
 800552c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005530:	e016      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800553a:	d10d      	bne.n	8005558 <UART_Start_Receive_IT+0x9c>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <UART_Start_Receive_IT+0x92>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	227f      	movs	r2, #127	; 0x7f
 8005548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554c:	e008      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	223f      	movs	r2, #63	; 0x3f
 8005552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005556:	e003      	b.n	8005560 <UART_Start_Receive_IT+0xa4>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2222      	movs	r2, #34	; 0x22
 800556c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	d107      	bne.n	8005598 <UART_Start_Receive_IT+0xdc>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <UART_Start_Receive_IT+0x108>)
 8005594:	665a      	str	r2, [r3, #100]	; 0x64
 8005596:	e002      	b.n	800559e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <UART_Start_Receive_IT+0x10c>)
 800559c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80055b4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	0800575d 	.word	0x0800575d
 80055c8:	08005689 	.word	0x08005689

080055cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0210 	bic.w	r2, r2, #16
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fc83 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fc60 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005696:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569c:	2b22      	cmp	r3, #34	; 0x22
 800569e:	d151      	bne.n	8005744 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056a8:	89bb      	ldrh	r3, [r7, #12]
 80056aa:	b2d9      	uxtb	r1, r3
 80056ac:	89fb      	ldrh	r3, [r7, #14]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b4:	400a      	ands	r2, r1
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d138      	bne.n	8005754 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	2b01      	cmp	r3, #1
 8005714:	d10f      	bne.n	8005736 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0210 	bic.w	r2, r2, #16
 8005724:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fc1a 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
 8005734:	e002      	b.n	800573c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fa fe4a 	bl	80003d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005742:	e007      	b.n	8005754 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0208 	orr.w	r2, r2, #8
 8005752:	619a      	str	r2, [r3, #24]
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800576a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005770:	2b22      	cmp	r3, #34	; 0x22
 8005772:	d151      	bne.n	8005818 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800577a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005782:	89ba      	ldrh	r2, [r7, #12]
 8005784:	89fb      	ldrh	r3, [r7, #14]
 8005786:	4013      	ands	r3, r2
 8005788:	b29a      	uxth	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d138      	bne.n	8005828 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d10f      	bne.n	800580a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0210 	bic.w	r2, r2, #16
 80057f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fbb0 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
 8005808:	e002      	b.n	8005810 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fa fde0 	bl	80003d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005816:	e007      	b.n	8005828 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <__errno>:
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <__errno+0x8>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000010 	.word	0x20000010

08005850 <__libc_init_array>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4d0d      	ldr	r5, [pc, #52]	; (8005888 <__libc_init_array+0x38>)
 8005854:	4c0d      	ldr	r4, [pc, #52]	; (800588c <__libc_init_array+0x3c>)
 8005856:	1b64      	subs	r4, r4, r5
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	2600      	movs	r6, #0
 800585c:	42a6      	cmp	r6, r4
 800585e:	d109      	bne.n	8005874 <__libc_init_array+0x24>
 8005860:	4d0b      	ldr	r5, [pc, #44]	; (8005890 <__libc_init_array+0x40>)
 8005862:	4c0c      	ldr	r4, [pc, #48]	; (8005894 <__libc_init_array+0x44>)
 8005864:	f000 fc4e 	bl	8006104 <_init>
 8005868:	1b64      	subs	r4, r4, r5
 800586a:	10a4      	asrs	r4, r4, #2
 800586c:	2600      	movs	r6, #0
 800586e:	42a6      	cmp	r6, r4
 8005870:	d105      	bne.n	800587e <__libc_init_array+0x2e>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f855 3b04 	ldr.w	r3, [r5], #4
 8005878:	4798      	blx	r3
 800587a:	3601      	adds	r6, #1
 800587c:	e7ee      	b.n	800585c <__libc_init_array+0xc>
 800587e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005882:	4798      	blx	r3
 8005884:	3601      	adds	r6, #1
 8005886:	e7f2      	b.n	800586e <__libc_init_array+0x1e>
 8005888:	08006200 	.word	0x08006200
 800588c:	08006200 	.word	0x08006200
 8005890:	08006200 	.word	0x08006200
 8005894:	08006208 	.word	0x08006208

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <siprintf>:
 80058a8:	b40e      	push	{r1, r2, r3}
 80058aa:	b500      	push	{lr}
 80058ac:	b09c      	sub	sp, #112	; 0x70
 80058ae:	ab1d      	add	r3, sp, #116	; 0x74
 80058b0:	9002      	str	r0, [sp, #8]
 80058b2:	9006      	str	r0, [sp, #24]
 80058b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <siprintf+0x38>)
 80058ba:	9107      	str	r1, [sp, #28]
 80058bc:	9104      	str	r1, [sp, #16]
 80058be:	4909      	ldr	r1, [pc, #36]	; (80058e4 <siprintf+0x3c>)
 80058c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c4:	9105      	str	r1, [sp, #20]
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	a902      	add	r1, sp, #8
 80058cc:	f000 f868 	bl	80059a0 <_svfiprintf_r>
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	b01c      	add	sp, #112	; 0x70
 80058d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058dc:	b003      	add	sp, #12
 80058de:	4770      	bx	lr
 80058e0:	20000010 	.word	0x20000010
 80058e4:	ffff0208 	.word	0xffff0208

080058e8 <__ssputs_r>:
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	688e      	ldr	r6, [r1, #8]
 80058ee:	429e      	cmp	r6, r3
 80058f0:	4682      	mov	sl, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4690      	mov	r8, r2
 80058f6:	461f      	mov	r7, r3
 80058f8:	d838      	bhi.n	800596c <__ssputs_r+0x84>
 80058fa:	898a      	ldrh	r2, [r1, #12]
 80058fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005900:	d032      	beq.n	8005968 <__ssputs_r+0x80>
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	6909      	ldr	r1, [r1, #16]
 8005906:	eba5 0901 	sub.w	r9, r5, r1
 800590a:	6965      	ldr	r5, [r4, #20]
 800590c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005914:	3301      	adds	r3, #1
 8005916:	444b      	add	r3, r9
 8005918:	106d      	asrs	r5, r5, #1
 800591a:	429d      	cmp	r5, r3
 800591c:	bf38      	it	cc
 800591e:	461d      	movcc	r5, r3
 8005920:	0553      	lsls	r3, r2, #21
 8005922:	d531      	bpl.n	8005988 <__ssputs_r+0xa0>
 8005924:	4629      	mov	r1, r5
 8005926:	f000 fb47 	bl	8005fb8 <_malloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	b950      	cbnz	r0, 8005944 <__ssputs_r+0x5c>
 800592e:	230c      	movs	r3, #12
 8005930:	f8ca 3000 	str.w	r3, [sl]
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	6921      	ldr	r1, [r4, #16]
 8005946:	464a      	mov	r2, r9
 8005948:	f000 fabe 	bl	8005ec8 <memcpy>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	6126      	str	r6, [r4, #16]
 800595a:	6165      	str	r5, [r4, #20]
 800595c:	444e      	add	r6, r9
 800595e:	eba5 0509 	sub.w	r5, r5, r9
 8005962:	6026      	str	r6, [r4, #0]
 8005964:	60a5      	str	r5, [r4, #8]
 8005966:	463e      	mov	r6, r7
 8005968:	42be      	cmp	r6, r7
 800596a:	d900      	bls.n	800596e <__ssputs_r+0x86>
 800596c:	463e      	mov	r6, r7
 800596e:	4632      	mov	r2, r6
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4641      	mov	r1, r8
 8005974:	f000 fab6 	bl	8005ee4 <memmove>
 8005978:	68a3      	ldr	r3, [r4, #8]
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	1b9b      	subs	r3, r3, r6
 800597e:	4432      	add	r2, r6
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	6022      	str	r2, [r4, #0]
 8005984:	2000      	movs	r0, #0
 8005986:	e7db      	b.n	8005940 <__ssputs_r+0x58>
 8005988:	462a      	mov	r2, r5
 800598a:	f000 fb6f 	bl	800606c <_realloc_r>
 800598e:	4606      	mov	r6, r0
 8005990:	2800      	cmp	r0, #0
 8005992:	d1e1      	bne.n	8005958 <__ssputs_r+0x70>
 8005994:	6921      	ldr	r1, [r4, #16]
 8005996:	4650      	mov	r0, sl
 8005998:	f000 fabe 	bl	8005f18 <_free_r>
 800599c:	e7c7      	b.n	800592e <__ssputs_r+0x46>
	...

080059a0 <_svfiprintf_r>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4698      	mov	r8, r3
 80059a6:	898b      	ldrh	r3, [r1, #12]
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	b09d      	sub	sp, #116	; 0x74
 80059ac:	4607      	mov	r7, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	d50e      	bpl.n	80059d2 <_svfiprintf_r+0x32>
 80059b4:	690b      	ldr	r3, [r1, #16]
 80059b6:	b963      	cbnz	r3, 80059d2 <_svfiprintf_r+0x32>
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	f000 fafd 	bl	8005fb8 <_malloc_r>
 80059be:	6028      	str	r0, [r5, #0]
 80059c0:	6128      	str	r0, [r5, #16]
 80059c2:	b920      	cbnz	r0, 80059ce <_svfiprintf_r+0x2e>
 80059c4:	230c      	movs	r3, #12
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e0d1      	b.n	8005b72 <_svfiprintf_r+0x1d2>
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	616b      	str	r3, [r5, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9309      	str	r3, [sp, #36]	; 0x24
 80059d6:	2320      	movs	r3, #32
 80059d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e0:	2330      	movs	r3, #48	; 0x30
 80059e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b8c <_svfiprintf_r+0x1ec>
 80059e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ea:	f04f 0901 	mov.w	r9, #1
 80059ee:	4623      	mov	r3, r4
 80059f0:	469a      	mov	sl, r3
 80059f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f6:	b10a      	cbz	r2, 80059fc <_svfiprintf_r+0x5c>
 80059f8:	2a25      	cmp	r2, #37	; 0x25
 80059fa:	d1f9      	bne.n	80059f0 <_svfiprintf_r+0x50>
 80059fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005a00:	d00b      	beq.n	8005a1a <_svfiprintf_r+0x7a>
 8005a02:	465b      	mov	r3, fp
 8005a04:	4622      	mov	r2, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff ff6d 	bl	80058e8 <__ssputs_r>
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f000 80aa 	beq.w	8005b68 <_svfiprintf_r+0x1c8>
 8005a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a16:	445a      	add	r2, fp
 8005a18:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80a2 	beq.w	8005b68 <_svfiprintf_r+0x1c8>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2e:	f10a 0a01 	add.w	sl, sl, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	9307      	str	r3, [sp, #28]
 8005a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3c:	4654      	mov	r4, sl
 8005a3e:	2205      	movs	r2, #5
 8005a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a44:	4851      	ldr	r0, [pc, #324]	; (8005b8c <_svfiprintf_r+0x1ec>)
 8005a46:	f7fa fbcb 	bl	80001e0 <memchr>
 8005a4a:	9a04      	ldr	r2, [sp, #16]
 8005a4c:	b9d8      	cbnz	r0, 8005a86 <_svfiprintf_r+0xe6>
 8005a4e:	06d0      	lsls	r0, r2, #27
 8005a50:	bf44      	itt	mi
 8005a52:	2320      	movmi	r3, #32
 8005a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a58:	0711      	lsls	r1, r2, #28
 8005a5a:	bf44      	itt	mi
 8005a5c:	232b      	movmi	r3, #43	; 0x2b
 8005a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a62:	f89a 3000 	ldrb.w	r3, [sl]
 8005a66:	2b2a      	cmp	r3, #42	; 0x2a
 8005a68:	d015      	beq.n	8005a96 <_svfiprintf_r+0xf6>
 8005a6a:	9a07      	ldr	r2, [sp, #28]
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	4621      	mov	r1, r4
 8005a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7a:	3b30      	subs	r3, #48	; 0x30
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d94e      	bls.n	8005b1e <_svfiprintf_r+0x17e>
 8005a80:	b1b0      	cbz	r0, 8005ab0 <_svfiprintf_r+0x110>
 8005a82:	9207      	str	r2, [sp, #28]
 8005a84:	e014      	b.n	8005ab0 <_svfiprintf_r+0x110>
 8005a86:	eba0 0308 	sub.w	r3, r0, r8
 8005a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	46a2      	mov	sl, r4
 8005a94:	e7d2      	b.n	8005a3c <_svfiprintf_r+0x9c>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	9103      	str	r1, [sp, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bfbb      	ittet	lt
 8005aa2:	425b      	neglt	r3, r3
 8005aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa8:	9307      	strge	r3, [sp, #28]
 8005aaa:	9307      	strlt	r3, [sp, #28]
 8005aac:	bfb8      	it	lt
 8005aae:	9204      	strlt	r2, [sp, #16]
 8005ab0:	7823      	ldrb	r3, [r4, #0]
 8005ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab4:	d10c      	bne.n	8005ad0 <_svfiprintf_r+0x130>
 8005ab6:	7863      	ldrb	r3, [r4, #1]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d135      	bne.n	8005b28 <_svfiprintf_r+0x188>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005acc:	3402      	adds	r4, #2
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b9c <_svfiprintf_r+0x1fc>
 8005ad4:	7821      	ldrb	r1, [r4, #0]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4650      	mov	r0, sl
 8005ada:	f7fa fb81 	bl	80001e0 <memchr>
 8005ade:	b140      	cbz	r0, 8005af2 <_svfiprintf_r+0x152>
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	eba0 000a 	sub.w	r0, r0, sl
 8005ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aea:	9b04      	ldr	r3, [sp, #16]
 8005aec:	4303      	orrs	r3, r0
 8005aee:	3401      	adds	r4, #1
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	4826      	ldr	r0, [pc, #152]	; (8005b90 <_svfiprintf_r+0x1f0>)
 8005af8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afc:	2206      	movs	r2, #6
 8005afe:	f7fa fb6f 	bl	80001e0 <memchr>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d038      	beq.n	8005b78 <_svfiprintf_r+0x1d8>
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <_svfiprintf_r+0x1f4>)
 8005b08:	bb1b      	cbnz	r3, 8005b52 <_svfiprintf_r+0x1b2>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	3307      	adds	r3, #7
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	3308      	adds	r3, #8
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	4433      	add	r3, r6
 8005b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1c:	e767      	b.n	80059ee <_svfiprintf_r+0x4e>
 8005b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b22:	460c      	mov	r4, r1
 8005b24:	2001      	movs	r0, #1
 8005b26:	e7a5      	b.n	8005a74 <_svfiprintf_r+0xd4>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	3401      	adds	r4, #1
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f04f 0c0a 	mov.w	ip, #10
 8005b34:	4620      	mov	r0, r4
 8005b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3a:	3a30      	subs	r2, #48	; 0x30
 8005b3c:	2a09      	cmp	r2, #9
 8005b3e:	d903      	bls.n	8005b48 <_svfiprintf_r+0x1a8>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0c5      	beq.n	8005ad0 <_svfiprintf_r+0x130>
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	e7c3      	b.n	8005ad0 <_svfiprintf_r+0x130>
 8005b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e7f0      	b.n	8005b34 <_svfiprintf_r+0x194>
 8005b52:	ab03      	add	r3, sp, #12
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	462a      	mov	r2, r5
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <_svfiprintf_r+0x1f8>)
 8005b5a:	a904      	add	r1, sp, #16
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	f3af 8000 	nop.w
 8005b62:	1c42      	adds	r2, r0, #1
 8005b64:	4606      	mov	r6, r0
 8005b66:	d1d6      	bne.n	8005b16 <_svfiprintf_r+0x176>
 8005b68:	89ab      	ldrh	r3, [r5, #12]
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	f53f af2c 	bmi.w	80059c8 <_svfiprintf_r+0x28>
 8005b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b72:	b01d      	add	sp, #116	; 0x74
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <_svfiprintf_r+0x1f8>)
 8005b80:	a904      	add	r1, sp, #16
 8005b82:	4638      	mov	r0, r7
 8005b84:	f000 f87a 	bl	8005c7c <_printf_i>
 8005b88:	e7eb      	b.n	8005b62 <_svfiprintf_r+0x1c2>
 8005b8a:	bf00      	nop
 8005b8c:	080061cc 	.word	0x080061cc
 8005b90:	080061d6 	.word	0x080061d6
 8005b94:	00000000 	.word	0x00000000
 8005b98:	080058e9 	.word	0x080058e9
 8005b9c:	080061d2 	.word	0x080061d2

08005ba0 <_printf_common>:
 8005ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	688a      	ldr	r2, [r1, #8]
 8005baa:	690b      	ldr	r3, [r1, #16]
 8005bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	bfb8      	it	lt
 8005bb4:	4613      	movlt	r3, r2
 8005bb6:	6033      	str	r3, [r6, #0]
 8005bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	b10a      	cbz	r2, 8005bc6 <_printf_common+0x26>
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	0699      	lsls	r1, r3, #26
 8005bca:	bf42      	ittt	mi
 8005bcc:	6833      	ldrmi	r3, [r6, #0]
 8005bce:	3302      	addmi	r3, #2
 8005bd0:	6033      	strmi	r3, [r6, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	f015 0506 	ands.w	r5, r5, #6
 8005bd8:	d106      	bne.n	8005be8 <_printf_common+0x48>
 8005bda:	f104 0a19 	add.w	sl, r4, #25
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	6832      	ldr	r2, [r6, #0]
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dc26      	bgt.n	8005c36 <_printf_common+0x96>
 8005be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bec:	1e13      	subs	r3, r2, #0
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	0692      	lsls	r2, r2, #26
 8005bf6:	d42b      	bmi.n	8005c50 <_printf_common+0xb0>
 8005bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d01e      	beq.n	8005c44 <_printf_common+0xa4>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	68e5      	ldr	r5, [r4, #12]
 8005c0a:	6832      	ldr	r2, [r6, #0]
 8005c0c:	f003 0306 	and.w	r3, r3, #6
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	bf08      	it	eq
 8005c14:	1aad      	subeq	r5, r5, r2
 8005c16:	68a3      	ldr	r3, [r4, #8]
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	bf0c      	ite	eq
 8005c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c20:	2500      	movne	r5, #0
 8005c22:	4293      	cmp	r3, r2
 8005c24:	bfc4      	itt	gt
 8005c26:	1a9b      	subgt	r3, r3, r2
 8005c28:	18ed      	addgt	r5, r5, r3
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	341a      	adds	r4, #26
 8005c2e:	42b5      	cmp	r5, r6
 8005c30:	d11a      	bne.n	8005c68 <_printf_common+0xc8>
 8005c32:	2000      	movs	r0, #0
 8005c34:	e008      	b.n	8005c48 <_printf_common+0xa8>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4652      	mov	r2, sl
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4638      	mov	r0, r7
 8005c3e:	47c0      	blx	r8
 8005c40:	3001      	adds	r0, #1
 8005c42:	d103      	bne.n	8005c4c <_printf_common+0xac>
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	e7c6      	b.n	8005bde <_printf_common+0x3e>
 8005c50:	18e1      	adds	r1, r4, r3
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	2030      	movs	r0, #48	; 0x30
 8005c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c5a:	4422      	add	r2, r4
 8005c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c64:	3302      	adds	r3, #2
 8005c66:	e7c7      	b.n	8005bf8 <_printf_common+0x58>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e6      	beq.n	8005c44 <_printf_common+0xa4>
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7d9      	b.n	8005c2e <_printf_common+0x8e>
	...

08005c7c <_printf_i>:
 8005c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c80:	460c      	mov	r4, r1
 8005c82:	4691      	mov	r9, r2
 8005c84:	7e27      	ldrb	r7, [r4, #24]
 8005c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c88:	2f78      	cmp	r7, #120	; 0x78
 8005c8a:	4680      	mov	r8, r0
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c92:	d807      	bhi.n	8005ca4 <_printf_i+0x28>
 8005c94:	2f62      	cmp	r7, #98	; 0x62
 8005c96:	d80a      	bhi.n	8005cae <_printf_i+0x32>
 8005c98:	2f00      	cmp	r7, #0
 8005c9a:	f000 80d8 	beq.w	8005e4e <_printf_i+0x1d2>
 8005c9e:	2f58      	cmp	r7, #88	; 0x58
 8005ca0:	f000 80a3 	beq.w	8005dea <_printf_i+0x16e>
 8005ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cac:	e03a      	b.n	8005d24 <_printf_i+0xa8>
 8005cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cb2:	2b15      	cmp	r3, #21
 8005cb4:	d8f6      	bhi.n	8005ca4 <_printf_i+0x28>
 8005cb6:	a001      	add	r0, pc, #4	; (adr r0, 8005cbc <_printf_i+0x40>)
 8005cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cbc:	08005d15 	.word	0x08005d15
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005ca5 	.word	0x08005ca5
 8005cc8:	08005ca5 	.word	0x08005ca5
 8005ccc:	08005ca5 	.word	0x08005ca5
 8005cd0:	08005ca5 	.word	0x08005ca5
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005ca5 	.word	0x08005ca5
 8005cdc:	08005ca5 	.word	0x08005ca5
 8005ce0:	08005ca5 	.word	0x08005ca5
 8005ce4:	08005ca5 	.word	0x08005ca5
 8005ce8:	08005e35 	.word	0x08005e35
 8005cec:	08005d59 	.word	0x08005d59
 8005cf0:	08005e17 	.word	0x08005e17
 8005cf4:	08005ca5 	.word	0x08005ca5
 8005cf8:	08005ca5 	.word	0x08005ca5
 8005cfc:	08005e57 	.word	0x08005e57
 8005d00:	08005ca5 	.word	0x08005ca5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005ca5 	.word	0x08005ca5
 8005d0c:	08005ca5 	.word	0x08005ca5
 8005d10:	08005e1f 	.word	0x08005e1f
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	600a      	str	r2, [r1, #0]
 8005d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0a3      	b.n	8005e70 <_printf_i+0x1f4>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	6808      	ldr	r0, [r1, #0]
 8005d2c:	062e      	lsls	r6, r5, #24
 8005d2e:	f100 0304 	add.w	r3, r0, #4
 8005d32:	d50a      	bpl.n	8005d4a <_printf_i+0xce>
 8005d34:	6805      	ldr	r5, [r0, #0]
 8005d36:	600b      	str	r3, [r1, #0]
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	da03      	bge.n	8005d44 <_printf_i+0xc8>
 8005d3c:	232d      	movs	r3, #45	; 0x2d
 8005d3e:	426d      	negs	r5, r5
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d44:	485e      	ldr	r0, [pc, #376]	; (8005ec0 <_printf_i+0x244>)
 8005d46:	230a      	movs	r3, #10
 8005d48:	e019      	b.n	8005d7e <_printf_i+0x102>
 8005d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d4e:	6805      	ldr	r5, [r0, #0]
 8005d50:	600b      	str	r3, [r1, #0]
 8005d52:	bf18      	it	ne
 8005d54:	b22d      	sxthne	r5, r5
 8005d56:	e7ef      	b.n	8005d38 <_printf_i+0xbc>
 8005d58:	680b      	ldr	r3, [r1, #0]
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	1d18      	adds	r0, r3, #4
 8005d5e:	6008      	str	r0, [r1, #0]
 8005d60:	0628      	lsls	r0, r5, #24
 8005d62:	d501      	bpl.n	8005d68 <_printf_i+0xec>
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <_printf_i+0xf2>
 8005d68:	0669      	lsls	r1, r5, #25
 8005d6a:	d5fb      	bpl.n	8005d64 <_printf_i+0xe8>
 8005d6c:	881d      	ldrh	r5, [r3, #0]
 8005d6e:	4854      	ldr	r0, [pc, #336]	; (8005ec0 <_printf_i+0x244>)
 8005d70:	2f6f      	cmp	r7, #111	; 0x6f
 8005d72:	bf0c      	ite	eq
 8005d74:	2308      	moveq	r3, #8
 8005d76:	230a      	movne	r3, #10
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d7e:	6866      	ldr	r6, [r4, #4]
 8005d80:	60a6      	str	r6, [r4, #8]
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	bfa2      	ittt	ge
 8005d86:	6821      	ldrge	r1, [r4, #0]
 8005d88:	f021 0104 	bicge.w	r1, r1, #4
 8005d8c:	6021      	strge	r1, [r4, #0]
 8005d8e:	b90d      	cbnz	r5, 8005d94 <_printf_i+0x118>
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	d04d      	beq.n	8005e30 <_printf_i+0x1b4>
 8005d94:	4616      	mov	r6, r2
 8005d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d9e:	5dc7      	ldrb	r7, [r0, r7]
 8005da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005da4:	462f      	mov	r7, r5
 8005da6:	42bb      	cmp	r3, r7
 8005da8:	460d      	mov	r5, r1
 8005daa:	d9f4      	bls.n	8005d96 <_printf_i+0x11a>
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d10b      	bne.n	8005dc8 <_printf_i+0x14c>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	07df      	lsls	r7, r3, #31
 8005db4:	d508      	bpl.n	8005dc8 <_printf_i+0x14c>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6861      	ldr	r1, [r4, #4]
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	bfde      	ittt	le
 8005dbe:	2330      	movle	r3, #48	; 0x30
 8005dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dc8:	1b92      	subs	r2, r2, r6
 8005dca:	6122      	str	r2, [r4, #16]
 8005dcc:	f8cd a000 	str.w	sl, [sp]
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	aa03      	add	r2, sp, #12
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fee2 	bl	8005ba0 <_printf_common>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d14c      	bne.n	8005e7a <_printf_i+0x1fe>
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	b004      	add	sp, #16
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dea:	4835      	ldr	r0, [pc, #212]	; (8005ec0 <_printf_i+0x244>)
 8005dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	680e      	ldr	r6, [r1, #0]
 8005df4:	061f      	lsls	r7, r3, #24
 8005df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dfa:	600e      	str	r6, [r1, #0]
 8005dfc:	d514      	bpl.n	8005e28 <_printf_i+0x1ac>
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	bf44      	itt	mi
 8005e02:	f043 0320 	orrmi.w	r3, r3, #32
 8005e06:	6023      	strmi	r3, [r4, #0]
 8005e08:	b91d      	cbnz	r5, 8005e12 <_printf_i+0x196>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f023 0320 	bic.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2310      	movs	r3, #16
 8005e14:	e7b0      	b.n	8005d78 <_printf_i+0xfc>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	f043 0320 	orr.w	r3, r3, #32
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	2378      	movs	r3, #120	; 0x78
 8005e20:	4828      	ldr	r0, [pc, #160]	; (8005ec4 <_printf_i+0x248>)
 8005e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e26:	e7e3      	b.n	8005df0 <_printf_i+0x174>
 8005e28:	065e      	lsls	r6, r3, #25
 8005e2a:	bf48      	it	mi
 8005e2c:	b2ad      	uxthmi	r5, r5
 8005e2e:	e7e6      	b.n	8005dfe <_printf_i+0x182>
 8005e30:	4616      	mov	r6, r2
 8005e32:	e7bb      	b.n	8005dac <_printf_i+0x130>
 8005e34:	680b      	ldr	r3, [r1, #0]
 8005e36:	6826      	ldr	r6, [r4, #0]
 8005e38:	6960      	ldr	r0, [r4, #20]
 8005e3a:	1d1d      	adds	r5, r3, #4
 8005e3c:	600d      	str	r5, [r1, #0]
 8005e3e:	0635      	lsls	r5, r6, #24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	d501      	bpl.n	8005e48 <_printf_i+0x1cc>
 8005e44:	6018      	str	r0, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <_printf_i+0x1d2>
 8005e48:	0671      	lsls	r1, r6, #25
 8005e4a:	d5fb      	bpl.n	8005e44 <_printf_i+0x1c8>
 8005e4c:	8018      	strh	r0, [r3, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	4616      	mov	r6, r2
 8005e54:	e7ba      	b.n	8005dcc <_printf_i+0x150>
 8005e56:	680b      	ldr	r3, [r1, #0]
 8005e58:	1d1a      	adds	r2, r3, #4
 8005e5a:	600a      	str	r2, [r1, #0]
 8005e5c:	681e      	ldr	r6, [r3, #0]
 8005e5e:	6862      	ldr	r2, [r4, #4]
 8005e60:	2100      	movs	r1, #0
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7fa f9bc 	bl	80001e0 <memchr>
 8005e68:	b108      	cbz	r0, 8005e6e <_printf_i+0x1f2>
 8005e6a:	1b80      	subs	r0, r0, r6
 8005e6c:	6060      	str	r0, [r4, #4]
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	2300      	movs	r3, #0
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	e7a8      	b.n	8005dcc <_printf_i+0x150>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	47d0      	blx	sl
 8005e84:	3001      	adds	r0, #1
 8005e86:	d0ab      	beq.n	8005de0 <_printf_i+0x164>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	079b      	lsls	r3, r3, #30
 8005e8c:	d413      	bmi.n	8005eb6 <_printf_i+0x23a>
 8005e8e:	68e0      	ldr	r0, [r4, #12]
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	4298      	cmp	r0, r3
 8005e94:	bfb8      	it	lt
 8005e96:	4618      	movlt	r0, r3
 8005e98:	e7a4      	b.n	8005de4 <_printf_i+0x168>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	47d0      	blx	sl
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d09b      	beq.n	8005de0 <_printf_i+0x164>
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	68e3      	ldr	r3, [r4, #12]
 8005eac:	9903      	ldr	r1, [sp, #12]
 8005eae:	1a5b      	subs	r3, r3, r1
 8005eb0:	42ab      	cmp	r3, r5
 8005eb2:	dcf2      	bgt.n	8005e9a <_printf_i+0x21e>
 8005eb4:	e7eb      	b.n	8005e8e <_printf_i+0x212>
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	f104 0619 	add.w	r6, r4, #25
 8005ebc:	e7f5      	b.n	8005eaa <_printf_i+0x22e>
 8005ebe:	bf00      	nop
 8005ec0:	080061dd 	.word	0x080061dd
 8005ec4:	080061ee 	.word	0x080061ee

08005ec8 <memcpy>:
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	4770      	bx	lr
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d1f9      	bne.n	8005ed6 <memcpy+0xe>
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0402 	add.w	r4, r1, r2
 8005eec:	d902      	bls.n	8005ef4 <memmove+0x10>
 8005eee:	4284      	cmp	r4, r0
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x20>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	42a1      	cmp	r1, r4
 8005ef8:	d008      	beq.n	8005f0c <memmove+0x28>
 8005efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0x12>
 8005f04:	4402      	add	r2, r0
 8005f06:	4601      	mov	r1, r0
 8005f08:	428a      	cmp	r2, r1
 8005f0a:	d100      	bne.n	8005f0e <memmove+0x2a>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f16:	e7f7      	b.n	8005f08 <memmove+0x24>

08005f18 <_free_r>:
 8005f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d048      	beq.n	8005fb0 <_free_r+0x98>
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f22:	9001      	str	r0, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f1a1 0404 	sub.w	r4, r1, #4
 8005f2a:	bfb8      	it	lt
 8005f2c:	18e4      	addlt	r4, r4, r3
 8005f2e:	f000 f8d3 	bl	80060d8 <__malloc_lock>
 8005f32:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <_free_r+0x9c>)
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	4615      	mov	r5, r2
 8005f3a:	b933      	cbnz	r3, 8005f4a <_free_r+0x32>
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	6014      	str	r4, [r2, #0]
 8005f40:	b003      	add	sp, #12
 8005f42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f46:	f000 b8cd 	b.w	80060e4 <__malloc_unlock>
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	d90b      	bls.n	8005f66 <_free_r+0x4e>
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	1862      	adds	r2, r4, r1
 8005f52:	4293      	cmp	r3, r2
 8005f54:	bf04      	itt	eq
 8005f56:	681a      	ldreq	r2, [r3, #0]
 8005f58:	685b      	ldreq	r3, [r3, #4]
 8005f5a:	6063      	str	r3, [r4, #4]
 8005f5c:	bf04      	itt	eq
 8005f5e:	1852      	addeq	r2, r2, r1
 8005f60:	6022      	streq	r2, [r4, #0]
 8005f62:	602c      	str	r4, [r5, #0]
 8005f64:	e7ec      	b.n	8005f40 <_free_r+0x28>
 8005f66:	461a      	mov	r2, r3
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	b10b      	cbz	r3, 8005f70 <_free_r+0x58>
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	d9fa      	bls.n	8005f66 <_free_r+0x4e>
 8005f70:	6811      	ldr	r1, [r2, #0]
 8005f72:	1855      	adds	r5, r2, r1
 8005f74:	42a5      	cmp	r5, r4
 8005f76:	d10b      	bne.n	8005f90 <_free_r+0x78>
 8005f78:	6824      	ldr	r4, [r4, #0]
 8005f7a:	4421      	add	r1, r4
 8005f7c:	1854      	adds	r4, r2, r1
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	6011      	str	r1, [r2, #0]
 8005f82:	d1dd      	bne.n	8005f40 <_free_r+0x28>
 8005f84:	681c      	ldr	r4, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	6053      	str	r3, [r2, #4]
 8005f8a:	4421      	add	r1, r4
 8005f8c:	6011      	str	r1, [r2, #0]
 8005f8e:	e7d7      	b.n	8005f40 <_free_r+0x28>
 8005f90:	d902      	bls.n	8005f98 <_free_r+0x80>
 8005f92:	230c      	movs	r3, #12
 8005f94:	6003      	str	r3, [r0, #0]
 8005f96:	e7d3      	b.n	8005f40 <_free_r+0x28>
 8005f98:	6825      	ldr	r5, [r4, #0]
 8005f9a:	1961      	adds	r1, r4, r5
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf04      	itt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	6063      	str	r3, [r4, #4]
 8005fa6:	bf04      	itt	eq
 8005fa8:	1949      	addeq	r1, r1, r5
 8005faa:	6021      	streq	r1, [r4, #0]
 8005fac:	6054      	str	r4, [r2, #4]
 8005fae:	e7c7      	b.n	8005f40 <_free_r+0x28>
 8005fb0:	b003      	add	sp, #12
 8005fb2:	bd30      	pop	{r4, r5, pc}
 8005fb4:	200001a4 	.word	0x200001a4

08005fb8 <_malloc_r>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	1ccd      	adds	r5, r1, #3
 8005fbc:	f025 0503 	bic.w	r5, r5, #3
 8005fc0:	3508      	adds	r5, #8
 8005fc2:	2d0c      	cmp	r5, #12
 8005fc4:	bf38      	it	cc
 8005fc6:	250c      	movcc	r5, #12
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	db01      	blt.n	8005fd2 <_malloc_r+0x1a>
 8005fce:	42a9      	cmp	r1, r5
 8005fd0:	d903      	bls.n	8005fda <_malloc_r+0x22>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fda:	f000 f87d 	bl	80060d8 <__malloc_lock>
 8005fde:	4921      	ldr	r1, [pc, #132]	; (8006064 <_malloc_r+0xac>)
 8005fe0:	680a      	ldr	r2, [r1, #0]
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	b99c      	cbnz	r4, 800600e <_malloc_r+0x56>
 8005fe6:	4f20      	ldr	r7, [pc, #128]	; (8006068 <_malloc_r+0xb0>)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	b923      	cbnz	r3, 8005ff6 <_malloc_r+0x3e>
 8005fec:	4621      	mov	r1, r4
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 f862 	bl	80060b8 <_sbrk_r>
 8005ff4:	6038      	str	r0, [r7, #0]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f85d 	bl	80060b8 <_sbrk_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d123      	bne.n	800604a <_malloc_r+0x92>
 8006002:	230c      	movs	r3, #12
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f86c 	bl	80060e4 <__malloc_unlock>
 800600c:	e7e3      	b.n	8005fd6 <_malloc_r+0x1e>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1b5b      	subs	r3, r3, r5
 8006012:	d417      	bmi.n	8006044 <_malloc_r+0x8c>
 8006014:	2b0b      	cmp	r3, #11
 8006016:	d903      	bls.n	8006020 <_malloc_r+0x68>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	441c      	add	r4, r3
 800601c:	6025      	str	r5, [r4, #0]
 800601e:	e004      	b.n	800602a <_malloc_r+0x72>
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	42a2      	cmp	r2, r4
 8006024:	bf0c      	ite	eq
 8006026:	600b      	streq	r3, [r1, #0]
 8006028:	6053      	strne	r3, [r2, #4]
 800602a:	4630      	mov	r0, r6
 800602c:	f000 f85a 	bl	80060e4 <__malloc_unlock>
 8006030:	f104 000b 	add.w	r0, r4, #11
 8006034:	1d23      	adds	r3, r4, #4
 8006036:	f020 0007 	bic.w	r0, r0, #7
 800603a:	1ac2      	subs	r2, r0, r3
 800603c:	d0cc      	beq.n	8005fd8 <_malloc_r+0x20>
 800603e:	1a1b      	subs	r3, r3, r0
 8006040:	50a3      	str	r3, [r4, r2]
 8006042:	e7c9      	b.n	8005fd8 <_malloc_r+0x20>
 8006044:	4622      	mov	r2, r4
 8006046:	6864      	ldr	r4, [r4, #4]
 8006048:	e7cc      	b.n	8005fe4 <_malloc_r+0x2c>
 800604a:	1cc4      	adds	r4, r0, #3
 800604c:	f024 0403 	bic.w	r4, r4, #3
 8006050:	42a0      	cmp	r0, r4
 8006052:	d0e3      	beq.n	800601c <_malloc_r+0x64>
 8006054:	1a21      	subs	r1, r4, r0
 8006056:	4630      	mov	r0, r6
 8006058:	f000 f82e 	bl	80060b8 <_sbrk_r>
 800605c:	3001      	adds	r0, #1
 800605e:	d1dd      	bne.n	800601c <_malloc_r+0x64>
 8006060:	e7cf      	b.n	8006002 <_malloc_r+0x4a>
 8006062:	bf00      	nop
 8006064:	200001a4 	.word	0x200001a4
 8006068:	200001a8 	.word	0x200001a8

0800606c <_realloc_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4607      	mov	r7, r0
 8006070:	4614      	mov	r4, r2
 8006072:	460e      	mov	r6, r1
 8006074:	b921      	cbnz	r1, 8006080 <_realloc_r+0x14>
 8006076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800607a:	4611      	mov	r1, r2
 800607c:	f7ff bf9c 	b.w	8005fb8 <_malloc_r>
 8006080:	b922      	cbnz	r2, 800608c <_realloc_r+0x20>
 8006082:	f7ff ff49 	bl	8005f18 <_free_r>
 8006086:	4625      	mov	r5, r4
 8006088:	4628      	mov	r0, r5
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608c:	f000 f830 	bl	80060f0 <_malloc_usable_size_r>
 8006090:	42a0      	cmp	r0, r4
 8006092:	d20f      	bcs.n	80060b4 <_realloc_r+0x48>
 8006094:	4621      	mov	r1, r4
 8006096:	4638      	mov	r0, r7
 8006098:	f7ff ff8e 	bl	8005fb8 <_malloc_r>
 800609c:	4605      	mov	r5, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0f2      	beq.n	8006088 <_realloc_r+0x1c>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4622      	mov	r2, r4
 80060a6:	f7ff ff0f 	bl	8005ec8 <memcpy>
 80060aa:	4631      	mov	r1, r6
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff33 	bl	8005f18 <_free_r>
 80060b2:	e7e9      	b.n	8006088 <_realloc_r+0x1c>
 80060b4:	4635      	mov	r5, r6
 80060b6:	e7e7      	b.n	8006088 <_realloc_r+0x1c>

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	; (80060d4 <_sbrk_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa ffda 	bl	800107c <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	200004d0 	.word	0x200004d0

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_lock+0x8>)
 80060da:	f000 b811 	b.w	8006100 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	200004d8 	.word	0x200004d8

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__malloc_unlock+0x8>)
 80060e6:	f000 b80c 	b.w	8006102 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	200004d8 	.word	0x200004d8

080060f0 <_malloc_usable_size_r>:
 80060f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f4:	1f18      	subs	r0, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bfbc      	itt	lt
 80060fa:	580b      	ldrlt	r3, [r1, r0]
 80060fc:	18c0      	addlt	r0, r0, r3
 80060fe:	4770      	bx	lr

08006100 <__retarget_lock_acquire_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_release_recursive>:
 8006102:	4770      	bx	lr

08006104 <_init>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr

08006110 <_fini>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr
