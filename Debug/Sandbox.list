
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff4  08004ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff4  08004ff4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff4  08004ff4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  0800506c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800506c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df2e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  0002dfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00030368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c52a  00000000  00000000  00031850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1b7  00000000  00000000  0004dd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4aaa  00000000  00000000  0005af31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff9db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f8c  00000000  00000000  000ffa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f6c 	.word	0x08004f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004f6c 	.word	0x08004f6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(huart, UART3_rxBuffer, 1, 100);
 8000288:	2364      	movs	r3, #100	; 0x64
 800028a:	2201      	movs	r2, #1
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <HAL_UART_RxCpltCallback+0x28>)
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f003 fab8 	bl	8003804 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(huart, UART3_rxBuffer, 1);
 8000294:	2201      	movs	r2, #1
 8000296:	4904      	ldr	r1, [pc, #16]	; (80002a8 <HAL_UART_RxCpltCallback+0x28>)
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f003 fb47 	bl	800392c <HAL_UART_Receive_IT>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000008c 	.word	0x2000008c

080002ac <printVal>:

void printVal(int d)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	char buffer [50];
	sprintf (buffer, "%d\n", d);
 80002b4:	f107 030c 	add.w	r3, r7, #12
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	490a      	ldr	r1, [pc, #40]	; (80002e4 <printVal+0x38>)
 80002bc:	4618      	mov	r0, r3
 80002be:	f004 fa27 	bl	8004710 <siprintf>
	HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff82 	bl	80001d0 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	f107 010c 	add.w	r1, r7, #12
 80002d4:	2364      	movs	r3, #100	; 0x64
 80002d6:	4804      	ldr	r0, [pc, #16]	; (80002e8 <printVal+0x3c>)
 80002d8:	f003 fa94 	bl	8003804 <HAL_UART_Transmit>
}
 80002dc:	bf00      	nop
 80002de:	3740      	adds	r7, #64	; 0x40
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	08004f84 	.word	0x08004f84
 80002e8:	200000a4 	.word	0x200000a4

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fbd5 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f821 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 f969 	bl	80005d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002fe:	f000 f907 	bl	8000510 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000302:	f000 f877 	bl	80003f4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000306:	f000 f933 	bl	8000570 <MX_USART3_UART_Init>
  MX_DAC_Init();
 800030a:	f000 f8cf 	bl	80004ac <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x44>)
 8000310:	f000 fdd0 	bl	8000eb4 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000314:	2201      	movs	r2, #1
 8000316:	4907      	ldr	r1, [pc, #28]	; (8000334 <main+0x48>)
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <main+0x4c>)
 800031a:	f003 fb07 	bl	800392c <HAL_UART_Receive_IT>

  int i = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  printVal(i);
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ffc2 	bl	80002ac <printVal>
	  i++;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3301      	adds	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
	  printVal(i);
 800032e:	e7f8      	b.n	8000322 <main+0x36>
 8000330:	20000128 	.word	0x20000128
 8000334:	2000008c 	.word	0x2000008c
 8000338:	200000a4 	.word	0x200000a4

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b09c      	sub	sp, #112	; 0x70
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 f9d8 	bl	8004700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	2234      	movs	r2, #52	; 0x34
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f004 f9ca 	bl	8004700 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036c:	2301      	movs	r3, #1
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000370:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2302      	movs	r3, #2
 8000380:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000388:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000392:	4618      	mov	r0, r3
 8000394:	f001 ff18 	bl	80021c8 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800039e:	f000 f993 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a6:	2302      	movs	r3, #2
 80003a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003bc:	2102      	movs	r1, #2
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fe0a 	bl	8002fd8 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ca:	f000 f97d 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 80003ce:	2380      	movs	r3, #128	; 0x80
 80003d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80003d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d8:	463b      	mov	r3, r7
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 f832 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003e6:	f000 f96f 	bl	80006c8 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3770      	adds	r7, #112	; 0x70
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	463b      	mov	r3, r7
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800040a:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800040c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000410:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000412:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000426:	2201      	movs	r2, #1
 8000428:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800042c:	2200      	movs	r2, #0
 800042e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000434:	2200      	movs	r2, #0
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800043a:	2201      	movs	r2, #1
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000446:	2201      	movs	r2, #1
 8000448:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000454:	2204      	movs	r2, #4
 8000456:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_ADC1_Init+0xb4>)
 800045a:	2200      	movs	r2, #0
 800045c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000460:	2200      	movs	r2, #0
 8000462:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000464:	4810      	ldr	r0, [pc, #64]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000466:	f000 fb9f 	bl	8000ba8 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000470:	f000 f92a 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000474:	2301      	movs	r3, #1
 8000476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000478:	2301      	movs	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000480:	2300      	movs	r3, #0
 8000482:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_ADC1_Init+0xb4>)
 8000492:	f000 ff6d 	bl	8001370 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800049c:	f000 f914 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000128 	.word	0x20000128

080004ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_DAC_Init+0x5c>)
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <MX_DAC_Init+0x60>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80004c2:	4811      	ldr	r0, [pc, #68]	; (8000508 <MX_DAC_Init+0x5c>)
 80004c4:	f001 fbd9 	bl	8001c7a <HAL_DAC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80004ce:	f000 f8fb 	bl	80006c8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <MX_DAC_Init+0x5c>)
 80004e2:	f001 fc23 	bl	8001d2c <HAL_DAC_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80004ec:	f000 f8ec 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = 2482;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_DAC_Init+0x60>)
 80004f2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80004f6:	609a      	str	r2, [r3, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <MX_DAC_Init+0x5c>)
 80004fc:	f001 fbdf 	bl	8001cbe <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000178 	.word	0x20000178
 800050c:	40007400 	.word	0x40007400

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	f003 f908 	bl	8003768 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f8b3 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000018c 	.word	0x2000018c
 800056c:	40004400 	.word	0x40004400

08000570 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <MX_USART3_UART_Init+0x5c>)
 8000578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 800057c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_USART3_UART_Init+0x58>)
 80005b4:	f003 f8d8 	bl	8003768 <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80005be:	f000 f883 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000a4 	.word	0x200000a4
 80005cc:	40004800 	.word	0x40004800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <MX_GPIO_Init+0xe8>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a33      	ldr	r2, [pc, #204]	; (80006b8 <MX_GPIO_Init+0xe8>)
 80005ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <MX_GPIO_Init+0xe8>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_GPIO_Init+0xe8>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <MX_GPIO_Init+0xe8>)
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xe8>)
 8000634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_GPIO_Init+0xe8>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	481b      	ldr	r0, [pc, #108]	; (80006bc <MX_GPIO_Init+0xec>)
 800064e:	f001 fda3 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	481a      	ldr	r0, [pc, #104]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000658:	f001 fd9e 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_GPIO_Init+0xf4>)
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000672:	f001 fc1f 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <MX_GPIO_Init+0xec>)
 8000690:	f001 fc10 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_GPIO_Init+0xf0>)
 80006ac:	f001 fc02 	bl	8001eb4 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000400 	.word	0x48000400
 80006c0:	48000800 	.word	0x48000800
 80006c4:	10210000 	.word	0x10210000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f001 fa74 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800073c:	d12c      	bne.n	8000798 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 800075c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_ADC_MspInit+0x84>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076e:	2303      	movs	r3, #3
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f001 fb96 	bl	8001eb4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2012      	movs	r0, #18
 800078e:	f001 fa3e 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000792:	2012      	movs	r0, #18
 8000794:	f001 fa57 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <HAL_DAC_MspInit+0x74>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d124      	bne.n	8000810 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_DAC_MspInit+0x78>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f6:	2310      	movs	r3, #16
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f001 fb52 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40007400 	.word	0x40007400
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a37      	ldr	r2, [pc, #220]	; (800091c <HAL_UART_MspInit+0xfc>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d131      	bne.n	80008a6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <HAL_UART_MspInit+0x100>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a36      	ldr	r2, [pc, #216]	; (8000920 <HAL_UART_MspInit+0x100>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <HAL_UART_MspInit+0x100>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <HAL_UART_MspInit+0x100>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a30      	ldr	r2, [pc, #192]	; (8000920 <HAL_UART_MspInit+0x100>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <HAL_UART_MspInit+0x100>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000872:	230c      	movs	r3, #12
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000882:	2307      	movs	r3, #7
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f001 fb10 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2026      	movs	r0, #38	; 0x26
 800089a:	f001 f9b8 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f001 f9d1 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008a4:	e035      	b.n	8000912 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <HAL_UART_MspInit+0x104>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d130      	bne.n	8000912 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ba:	61d3      	str	r3, [r2, #28]
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d2:	6153      	str	r3, [r2, #20]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_MspInit+0x100>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f2:	2307      	movs	r3, #7
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <HAL_UART_MspInit+0x108>)
 80008fe:	f001 fad9 	bl	8001eb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2027      	movs	r0, #39	; 0x27
 8000908:	f001 f981 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800090c:	2027      	movs	r0, #39	; 0x27
 800090e:	f001 f99a 	bl	8001c46 <HAL_NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40004400 	.word	0x40004400
 8000920:	40021000 	.word	0x40021000
 8000924:	40004800 	.word	0x40004800
 8000928:	48000400 	.word	0x48000400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8d8 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <ADC1_IRQHandler+0x10>)
 8000986:	f000 fb03 	bl	8000f90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000128 	.word	0x20000128

08000994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USART2_IRQHandler+0x10>)
 800099a:	f003 f805 	bl	80039a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000018c 	.word	0x2000018c

080009a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART3_IRQHandler+0x10>)
 80009ae:	f002 fffb 	bl	80039a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000a4 	.word	0x200000a4

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f003 fe5e 	bl	80046ac <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20004000 	.word	0x20004000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	20000098 	.word	0x20000098
 8000a24:	20000228 	.word	0x20000228

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a76:	f7ff ffd7 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f003 fe1d 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fc35 	bl	80002ec <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a90:	08004ffc 	.word	0x08004ffc
  ldr r2, =_sbss
 8000a94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a98:	20000224 	.word	0x20000224

08000a9c <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <CAN_RX1_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x28>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f001 f8a1 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe0a 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f8b9 	bl	8001c62 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b08:	f001 f881 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000210 	.word	0x20000210

08000b54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000210 	.word	0x20000210

08000b6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b09a      	sub	sp, #104	; 0x68
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e169      	b.n	8000e9c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d176      	bne.n	8000cc8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d152      	bne.n	8000c88 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fd8d 	bl	800071c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d13b      	bne.n	8000c88 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fec1 	bl	8001998 <ADC_Disable>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d12f      	bne.n	8000c88 <HAL_ADC_Init+0xe0>
 8000c28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d12b      	bne.n	8000c88 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c38:	f023 0302 	bic.w	r3, r3, #2
 8000c3c:	f043 0202 	orr.w	r2, r3, #2
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c52:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c62:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c64:	4b8f      	ldr	r3, [pc, #572]	; (8000ea4 <HAL_ADC_Init+0x2fc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a8f      	ldr	r2, [pc, #572]	; (8000ea8 <HAL_ADC_Init+0x300>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9a      	lsrs	r2, r3, #18
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c7a:	e002      	b.n	8000c82 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f9      	bne.n	8000c7c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ca4:	d110      	bne.n	8000cc8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f023 0312 	bic.w	r3, r3, #18
 8000cae:	f043 0210 	orr.w	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 80d6 	bne.w	8000e82 <HAL_ADC_Init+0x2da>
 8000cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f040 80d1 	bne.w	8000e82 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80c9 	bne.w	8000e82 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cf8:	f043 0202 	orr.w	r2, r3, #2
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d00:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_ADC_Init+0x304>)
 8000d02:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_ADC_Init+0x180>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <HAL_ADC_Init+0x180>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_ADC_Init+0x182>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d11c      	bne.n	8000d68 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d010      	beq.n	8000d56 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <HAL_ADC_Init+0x1a8>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_ADC_Init+0x1a8>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_ADC_Init+0x1aa>
 8000d50:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d108      	bne.n	8000d68 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d66:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e5b      	ldrb	r3, [r3, #25]
 8000d6c:	035b      	lsls	r3, r3, #13
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d72:	2a01      	cmp	r2, #1
 8000d74:	d002      	beq.n	8000d7c <HAL_ADC_Init+0x1d4>
 8000d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d7a:	e000      	b.n	8000d7e <HAL_ADC_Init+0x1d6>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d11b      	bne.n	8000dd4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e5b      	ldrb	r3, [r3, #25]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	3b01      	subs	r3, #1
 8000daa:	045a      	lsls	r2, r3, #17
 8000dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
 8000db6:	e00d      	b.n	8000dd4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000dc0:	f043 0220 	orr.w	r2, r3, #32
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d007      	beq.n	8000dec <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	4313      	orrs	r3, r2
 8000de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000de8:	4313      	orrs	r3, r2
 8000dea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d114      	bne.n	8000e24 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e08:	f023 0302 	bic.w	r3, r3, #2
 8000e0c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7e1b      	ldrb	r3, [r3, #24]
 8000e12:	039a      	lsls	r2, r3, #14
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e20:	4313      	orrs	r3, r2
 8000e22:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_ADC_Init+0x308>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e34:	430b      	orrs	r3, r1
 8000e36:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10c      	bne.n	8000e5a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f023 010f 	bic.w	r1, r3, #15
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
 8000e58:	e007      	b.n	8000e6a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 020f 	bic.w	r2, r2, #15
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f023 0303 	bic.w	r3, r3, #3
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e80:	e00a      	b.n	8000e98 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f023 0312 	bic.w	r3, r3, #18
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3768      	adds	r7, #104	; 0x68
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	431bde83 	.word	0x431bde83
 8000eac:	50000300 	.word	0x50000300
 8000eb0:	fff0c007 	.word	0xfff0c007

08000eb4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d158      	bne.n	8000f80 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_Start+0x28>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e054      	b.n	8000f86 <HAL_ADC_Start+0xd2>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fcf9 	bl	80018dc <ADC_Enable>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d140      	bne.n	8000f76 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3e:	d106      	bne.n	8000f4e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	f023 0206 	bic.w	r2, r3, #6
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f4c:	e002      	b.n	8000f54 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	221c      	movs	r2, #28
 8000f62:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0204 	orr.w	r2, r2, #4
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f7e:	e001      	b.n	8000f84 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f80:	2302      	movs	r3, #2
 8000f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d106      	bne.n	8000fc0 <HAL_ADC_IRQHandler+0x30>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d00d      	beq.n	8000fdc <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d15e      	bne.n	800108c <HAL_ADC_IRQHandler+0xfc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d157      	bne.n	800108c <HAL_ADC_IRQHandler+0xfc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001006:	2b00      	cmp	r3, #0
 8001008:	d139      	bne.n	800107e <HAL_ADC_IRQHandler+0xee>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001010:	2b00      	cmp	r3, #0
 8001012:	d134      	bne.n	800107e <HAL_ADC_IRQHandler+0xee>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b08      	cmp	r3, #8
 8001020:	d12d      	bne.n	800107e <HAL_ADC_IRQHandler+0xee>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d11a      	bne.n	8001066 <HAL_ADC_IRQHandler+0xd6>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 020c 	bic.w	r2, r2, #12
 800103e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d112      	bne.n	800107e <HAL_ADC_IRQHandler+0xee>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
 8001064:	e00b      	b.n	800107e <HAL_ADC_IRQHandler+0xee>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fd74 	bl	8000b6c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	220c      	movs	r2, #12
 800108a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	2b20      	cmp	r3, #32
 8001098:	d106      	bne.n	80010a8 <HAL_ADC_IRQHandler+0x118>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b20      	cmp	r3, #32
 80010a6:	d00d      	beq.n	80010c4 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80010b2:	2b40      	cmp	r3, #64	; 0x40
 80010b4:	d16d      	bne.n	8001192 <HAL_ADC_IRQHandler+0x202>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	2b40      	cmp	r3, #64	; 0x40
 80010c2:	d166      	bne.n	8001192 <HAL_ADC_IRQHandler+0x202>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d14e      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_ADC_IRQHandler+0x178>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d142      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001104:	2b00      	cmp	r3, #0
 8001106:	d13d      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d136      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d12d      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d11a      	bne.n	800116c <HAL_ADC_IRQHandler+0x1dc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001144:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d112      	bne.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
 800116a:	e00b      	b.n	8001184 <HAL_ADC_IRQHandler+0x1f4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f043 0210 	orr.w	r2, r3, #16
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8cb 	bl	8001320 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2260      	movs	r2, #96	; 0x60
 8001190:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119c:	2b80      	cmp	r3, #128	; 0x80
 800119e:	d113      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x238>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	2b80      	cmp	r3, #128	; 0x80
 80011ac:	d10c      	bne.n	80011c8 <HAL_ADC_IRQHandler+0x238>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fce0 	bl	8000b80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d6:	d115      	bne.n	8001204 <HAL_ADC_IRQHandler+0x274>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e6:	d10d      	bne.n	8001204 <HAL_ADC_IRQHandler+0x274>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f8a7 	bl	8001348 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800120e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001212:	d115      	bne.n	8001240 <HAL_ADC_IRQHandler+0x2b0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001222:	d10d      	bne.n	8001240 <HAL_ADC_IRQHandler+0x2b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f893 	bl	800135c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b10      	cmp	r3, #16
 800124c:	d13d      	bne.n	80012ca <HAL_ADC_IRQHandler+0x33a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b10      	cmp	r3, #16
 800125a:	d136      	bne.n	80012ca <HAL_ADC_IRQHandler+0x33a>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	2b01      	cmp	r3, #1
 8001262:	d102      	bne.n	800126a <HAL_ADC_IRQHandler+0x2da>
    {
      overrun_error = 1U;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e019      	b.n	800129e <HAL_ADC_IRQHandler+0x30e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_ADC_IRQHandler+0x38c>)
 800126c:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_ADC_IRQHandler+0x2fe>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10a      	bne.n	800129e <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e007      	b.n	800129e <HAL_ADC_IRQHandler+0x30e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_ADC_IRQHandler+0x30e>
        {
          overrun_error = 1U;  
 800129a:	2301      	movs	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10e      	bne.n	80012c2 <HAL_ADC_IRQHandler+0x332>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	f043 0202 	orr.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fc69 	bl	8000b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2210      	movs	r2, #16
 80012c8:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d8:	d11b      	bne.n	8001312 <HAL_ADC_IRQHandler+0x382>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	d113      	bne.n	8001312 <HAL_ADC_IRQHandler+0x382>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f043 0208 	orr.w	r2, r3, #8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f811 	bl	8001334 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	50000300 	.word	0x50000300

08001320 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001370:	b480      	push	{r7}
 8001372:	b09b      	sub	sp, #108	; 0x6c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x22>
 800138e:	2302      	movs	r3, #2
 8001390:	e299      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x556>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 827d 	bne.w	80018a4 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d81c      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	461a      	mov	r2, r3
 80013c6:	231f      	movs	r3, #31
 80013c8:	4093      	lsls	r3, r2
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4019      	ands	r1, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	e063      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d81e      	bhi.n	8001432 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	3b1e      	subs	r3, #30
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	3b1e      	subs	r3, #30
 8001424:	fa00 f203 	lsl.w	r2, r0, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	e040      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b0e      	cmp	r3, #14
 8001438:	d81e      	bhi.n	8001478 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	3b3c      	subs	r3, #60	; 0x3c
 800144e:	221f      	movs	r2, #31
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	4019      	ands	r1, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	3b3c      	subs	r3, #60	; 0x3c
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	e01d      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	3b5a      	subs	r3, #90	; 0x5a
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	4019      	ands	r1, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3b5a      	subs	r3, #90	; 0x5a
 80014a8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 80e5 	bne.w	800168e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	d91c      	bls.n	8001506 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6999      	ldr	r1, [r3, #24]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	3b1e      	subs	r3, #30
 80014de:	2207      	movs	r2, #7
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4019      	ands	r1, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	6898      	ldr	r0, [r3, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	3b1e      	subs	r3, #30
 80014f8:	fa00 f203 	lsl.w	r2, r0, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	e019      	b.n	800153a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	2207      	movs	r2, #7
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	4019      	ands	r1, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	3b01      	subs	r3, #1
 8001558:	2b03      	cmp	r3, #3
 800155a:	d84f      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x28c>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <HAL_ADC_ConfigChannel+0x1f4>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001597 	.word	0x08001597
 800156c:	080015b9 	.word	0x080015b9
 8001570:	080015db 	.word	0x080015db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157a:	4b99      	ldr	r3, [pc, #612]	; (80017e0 <HAL_ADC_ConfigChannel+0x470>)
 800157c:	4013      	ands	r3, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	0691      	lsls	r1, r2, #26
 8001584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001586:	430a      	orrs	r2, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001592:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001594:	e07e      	b.n	8001694 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800159c:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <HAL_ADC_ConfigChannel+0x470>)
 800159e:	4013      	ands	r3, r2
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	0691      	lsls	r1, r2, #26
 80015a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a8:	430a      	orrs	r2, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b6:	e06d      	b.n	8001694 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80015be:	4b88      	ldr	r3, [pc, #544]	; (80017e0 <HAL_ADC_ConfigChannel+0x470>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	0691      	lsls	r1, r2, #26
 80015c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d8:	e05c      	b.n	8001694 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015e0:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_ADC_ConfigChannel+0x470>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	0691      	lsls	r1, r2, #26
 80015ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ec:	430a      	orrs	r2, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fa:	e04b      	b.n	8001694 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	069b      	lsls	r3, r3, #26
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800161e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001642:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800164a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	069b      	lsls	r3, r3, #26
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001666:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800166e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	069b      	lsls	r3, r3, #26
 8001678:	429a      	cmp	r2, r3
 800167a:	d10a      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800168a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800168c:	e001      	b.n	8001692 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800168e:	bf00      	nop
 8001690:	e000      	b.n	8001694 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001692:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x344>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_ADC_ConfigChannel+0x344>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x346>
 80016b4:	2300      	movs	r3, #0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80ff 	bne.w	80018ba <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d00f      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	400a      	ands	r2, r1
 80016de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80016e2:	e049      	b.n	8001778 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	409a      	lsls	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b09      	cmp	r3, #9
 8001704:	d91c      	bls.n	8001740 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6999      	ldr	r1, [r3, #24]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	3b1b      	subs	r3, #27
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	4019      	ands	r1, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6898      	ldr	r0, [r3, #8]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1b      	subs	r3, #27
 8001732:	fa00 f203 	lsl.w	r2, r0, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	619a      	str	r2, [r3, #24]
 800173e:	e01b      	b.n	8001778 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6959      	ldr	r1, [r3, #20]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_ADC_ConfigChannel+0x474>)
 800177a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d014      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001794:	2b11      	cmp	r3, #17
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	f040 8086 	bne.w	80018ba <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d17f      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10d      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x478>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x478>
 80017da:	2301      	movs	r3, #1
 80017dc:	e005      	b.n	80017ea <HAL_ADC_ConfigChannel+0x47a>
 80017de:	bf00      	nop
 80017e0:	83fff000 	.word	0x83fff000
 80017e4:	50000300 	.word	0x50000300
 80017e8:	2300      	movs	r3, #0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d150      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d010      	beq.n	8001816 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d107      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x4a0>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x4a0>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_ADC_ConfigChannel+0x4a2>
 8001810:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	d13c      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d11d      	bne.n	800185a <HAL_ADC_ConfigChannel+0x4ea>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001826:	d118      	bne.n	800185a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001832:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_ADC_ConfigChannel+0x564>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_ADC_ConfigChannel+0x568>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9a      	lsrs	r2, r3, #18
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	e002      	b.n	8001852 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3b01      	subs	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001858:	e02e      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b11      	cmp	r3, #17
 8001860:	d10b      	bne.n	800187a <HAL_ADC_ConfigChannel+0x50a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186a:	d106      	bne.n	800187a <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800186c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001876:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001878:	e01e      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b12      	cmp	r3, #18
 8001880:	d11a      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800188a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800188e:	e013      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018a2:	e00a      	b.n	80018ba <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f043 0220 	orr.w	r2, r3, #32
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018b6:	e000      	b.n	80018ba <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018b8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	376c      	adds	r7, #108	; 0x6c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <ADC_Enable+0x2c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <ADC_Enable+0x2c>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <ADC_Enable+0x2e>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13c      	bne.n	8001988 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <ADC_Enable+0xb8>)
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e028      	b.n	800198a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001948:	f7ff f904 	bl	8000b54 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800194e:	e014      	b.n	800197a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001950:	f7ff f900 	bl	8000b54 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d90d      	bls.n	800197a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e007      	b.n	800198a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1e3      	bne.n	8001950 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	8000003f 	.word	0x8000003f

08001998 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <ADC_Disable+0x2c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <ADC_Disable+0x2c>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <ADC_Disable+0x2e>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030d 	and.w	r3, r3, #13
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10f      	bne.n	80019f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0202 	orr.w	r2, r2, #2
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2203      	movs	r2, #3
 80019ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f8b0 	bl	8000b54 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f6:	e022      	b.n	8001a3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 0210 	orr.w	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e01c      	b.n	8001a4e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a14:	f7ff f89e 	bl	8000b54 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d90d      	bls.n	8001a3e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d0e3      	beq.n	8001a14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e014      	b.n	8001cb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7fe fd81 	bl	80007a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DAC_Start+0x16>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e025      	b.n	8001d20 <HAL_DAC_Start+0x62>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	409a      	lsls	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001cfe:	2b3c      	cmp	r3, #60	; 0x3c
 8001d00:	d107      	bne.n	8001d12 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_DAC_ConfigChannel+0x20>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e036      	b.n	8001dba <HAL_DAC_ConfigChannel+0x8e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d60:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	22c0      	movs	r2, #192	; 0xc0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e020      	b.n	8001e2c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020e 	bic.w	r2, r2, #14
 8001df8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d005      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e027      	b.n	8001eaa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 020e 	bic.w	r2, r2, #14
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
    } 
  }
  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	e14e      	b.n	8002162 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8140 	beq.w	800215c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d00b      	beq.n	8001efc <HAL_GPIO_Init+0x48>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0xea>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d123      	bne.n	8001fe6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	08da      	lsrs	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3208      	adds	r2, #8
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0203 	and.w	r2, r3, #3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 809a 	beq.w	800215c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b52      	ldr	r3, [pc, #328]	; (8002180 <HAL_GPIO_Init+0x2cc>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002040:	4a50      	ldr	r2, [pc, #320]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800206a:	d013      	beq.n	8002094 <HAL_GPIO_Init+0x1e0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a46      	ldr	r2, [pc, #280]	; (8002188 <HAL_GPIO_Init+0x2d4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00d      	beq.n	8002090 <HAL_GPIO_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a45      	ldr	r2, [pc, #276]	; (800218c <HAL_GPIO_Init+0x2d8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_Init+0x1d8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a44      	ldr	r2, [pc, #272]	; (8002190 <HAL_GPIO_Init+0x2dc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_GPIO_Init+0x1d4>
 8002084:	2303      	movs	r3, #3
 8002086:	e006      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 8002088:	2305      	movs	r3, #5
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 800208c:	2302      	movs	r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 8002094:	2300      	movs	r3, #0
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a6:	4937      	ldr	r1, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x2d0>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020d8:	4a2e      	ldr	r2, [pc, #184]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002102:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_GPIO_Init+0x2e0>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f aea9 	bne.w	8001ec4 <HAL_GPIO_Init+0x10>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	48000c00 	.word	0x48000c00
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f000 bef4 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 816a 	beq.w	80024c6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021f2:	4bb3      	ldr	r3, [pc, #716]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d00c      	beq.n	8002218 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021fe:	4bb0      	ldr	r3, [pc, #704]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d159      	bne.n	80022be <HAL_RCC_OscConfig+0xf6>
 800220a:	4bad      	ldr	r3, [pc, #692]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002216:	d152      	bne.n	80022be <HAL_RCC_OscConfig+0xf6>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0x82>
 8002244:	4b9e      	ldr	r3, [pc, #632]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0xae>
 800224a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800225e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002262:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002266:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002272:	4b93      	ldr	r3, [pc, #588]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800227e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800228a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 810c 	beq.w	80024c4 <HAL_RCC_OscConfig+0x2fc>
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8106 	bne.w	80024c4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f000 be86 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x110>
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e030      	b.n	800233a <HAL_RCC_OscConfig+0x172>
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x134>
 80022e2:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a76      	ldr	r2, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01e      	b.n	800233a <HAL_RCC_OscConfig+0x172>
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x15a>
 8002308:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6c      	ldr	r2, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x172>
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a66      	ldr	r2, [pc, #408]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b64      	ldr	r3, [pc, #400]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a63      	ldr	r2, [pc, #396]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233a:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	495d      	ldr	r1, [pc, #372]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800234a:	4313      	orrs	r3, r2
 800234c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d059      	beq.n	800240c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fbfc 	bl	8000b54 <HAL_GetTick>
 800235c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002362:	f7fe fbf7 	bl	8000b54 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d902      	bls.n	8002378 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	f000 be29 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
 8002378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800238c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_OscConfig+0x1e2>
 80023a4:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x20e>
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023e2:	fa92 f2a2 	rbit	r2, r2
 80023e6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023ea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023ee:	fab2 f282 	clz	r2, r2
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f042 0220 	orr.w	r2, r2, #32
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f002 021f 	and.w	r2, r2, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f202 	lsl.w	r2, r1, r2
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ab      	beq.n	8002362 <HAL_RCC_OscConfig+0x19a>
 800240a:	e05c      	b.n	80024c6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fba2 	bl	8000b54 <HAL_GetTick>
 8002410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002416:	f7fe fb9d 	bl	8000b54 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d902      	bls.n	800242c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	f000 bdcf 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
 800242c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002430:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002440:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <HAL_RCC_OscConfig+0x296>
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x2c2>
 800245e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002462:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800247a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_RCC_OscConfig+0x2f8>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800248e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002492:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800249e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ab      	bne.n	8002416 <HAL_RCC_OscConfig+0x24e>
 80024be:	e002      	b.n	80024c6 <HAL_RCC_OscConfig+0x2fe>
 80024c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 816f 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024d6:	4bd0      	ldr	r3, [pc, #832]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024e2:	4bcd      	ldr	r3, [pc, #820]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d16c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x400>
 80024ee:	4bca      	ldr	r3, [pc, #808]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d166      	bne.n	80025c8 <HAL_RCC_OscConfig+0x400>
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800250c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_RCC_OscConfig+0x362>
 8002524:	4bbc      	ldr	r3, [pc, #752]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e013      	b.n	8002552 <HAL_RCC_OscConfig+0x38a>
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002542:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800254e:	4bb2      	ldr	r3, [pc, #712]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2202      	movs	r2, #2
 8002554:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002558:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002564:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_RCC_OscConfig+0x3cc>
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f000 bd1b 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4ba0      	ldr	r3, [pc, #640]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	21f8      	movs	r1, #248	; 0xf8
 80025a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025ac:	fa91 f1a1 	rbit	r1, r1
 80025b0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025b4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025b8:	fab1 f181 	clz	r1, r1
 80025bc:	b2c9      	uxtb	r1, r1
 80025be:	408b      	lsls	r3, r1
 80025c0:	4995      	ldr	r1, [pc, #596]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e0f5      	b.n	80027b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8085 	beq.w	80026de <HAL_RCC_OscConfig+0x516>
 80025d4:	2301      	movs	r3, #1
 80025d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	461a      	mov	r2, r3
 80025fc:	2301      	movs	r3, #1
 80025fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe faa8 	bl	8000b54 <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe faa3 	bl	8000b54 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	f000 bcd5 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002632:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x488>
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e013      	b.n	8002678 <HAL_RCC_OscConfig+0x4b0>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002668:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002674:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800267e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800268a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0af      	beq.n	800260a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	21f8      	movs	r1, #248	; 0xf8
 80026ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026c2:	fa91 f1a1 	rbit	r1, r1
 80026c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026ce:	fab1 f181 	clz	r1, r1
 80026d2:	b2c9      	uxtb	r1, r1
 80026d4:	408b      	lsls	r3, r1
 80026d6:	4950      	ldr	r1, [pc, #320]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e06a      	b.n	80027b4 <HAL_RCC_OscConfig+0x5ec>
 80026de:	2301      	movs	r3, #1
 80026e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	461a      	mov	r2, r3
 8002706:	2300      	movs	r3, #0
 8002708:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fa23 	bl	8000b54 <HAL_GetTick>
 800270e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fa1e 	bl	8000b54 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d902      	bls.n	800272a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	f000 bc50 	b.w	8002fca <HAL_RCC_OscConfig+0xe02>
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800273c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_RCC_OscConfig+0x592>
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e013      	b.n	8002782 <HAL_RCC_OscConfig+0x5ba>
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800276c:	2302      	movs	r3, #2
 800276e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002772:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x650>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	2202      	movs	r2, #2
 8002784:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002788:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800278c:	fa92 f2a2 	rbit	r2, r2
 8002790:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002794:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002798:	fab2 f282 	clz	r2, r2
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f042 0220 	orr.w	r2, r2, #32
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f002 021f 	and.w	r2, r2, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1af      	bne.n	8002714 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80da 	beq.w	8002978 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d069      	beq.n	80028a2 <HAL_RCC_OscConfig+0x6da>
 80027ce:	2301      	movs	r3, #1
 80027d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_OscConfig+0x654>)
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe f9ac 	bl	8000b54 <HAL_GetTick>
 80027fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe f9a7 	bl	8000b54 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d906      	bls.n	8002820 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e3d9      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	10908120 	.word	0x10908120
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002832:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002836:	2202      	movs	r2, #2
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800284e:	2202      	movs	r2, #2
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002860:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4ba5      	ldr	r3, [pc, #660]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002866:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800286a:	2102      	movs	r1, #2
 800286c:	6019      	str	r1, [r3, #0]
 800286e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f1a3 	rbit	r1, r3
 8002878:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800287c:	6019      	str	r1, [r3, #0]
  return result;
 800287e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0b0      	beq.n	8002802 <HAL_RCC_OscConfig+0x63a>
 80028a0:	e06a      	b.n	8002978 <HAL_RCC_OscConfig+0x7b0>
 80028a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028b8:	601a      	str	r2, [r3, #0]
  return result;
 80028ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x934>)
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	461a      	mov	r2, r3
 80028d0:	2300      	movs	r3, #0
 80028d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7fe f93e 	bl	8000b54 <HAL_GetTick>
 80028d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	e009      	b.n	80028f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe f939 	bl	8000b54 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e36b      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 80028f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800290e:	2202      	movs	r2, #2
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002926:	2202      	movs	r2, #2
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002938:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 800293c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002942:	2102      	movs	r1, #2
 8002944:	6019      	str	r1, [r3, #0]
 8002946:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f1a3 	rbit	r1, r3
 8002950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002954:	6019      	str	r1, [r3, #0]
  return result;
 8002956:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1b2      	bne.n	80028de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8158 	beq.w	8002c38 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <HAL_RCC_OscConfig+0x938>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11a      	bne.n	8002a02 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029cc:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x938>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4b      	ldr	r2, [pc, #300]	; (8002b00 <HAL_RCC_OscConfig+0x938>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d8:	f7fe f8bc 	bl	8000b54 <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe f8b7 	bl	8000b54 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e2e9      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <HAL_RCC_OscConfig+0x938>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ef      	beq.n	80029e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x852>
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	e02f      	b.n	8002a7a <HAL_RCC_OscConfig+0x8b2>
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x876>
 8002a24:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a33      	ldr	r2, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e01d      	b.n	8002a7a <HAL_RCC_OscConfig+0x8b2>
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x89a>
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x8b2>
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d06b      	beq.n	8002b5c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f866 	bl	8000b54 <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe f861 	bl	8000b54 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e291      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002aa6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002aaa:	2202      	movs	r2, #2
 8002aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ad4:	601a      	str	r2, [r3, #0]
  return result;
 8002ad6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_OscConfig+0x93c>
 8002af0:	4b01      	ldr	r3, [pc, #4]	; (8002af8 <HAL_RCC_OscConfig+0x930>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x958>
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	10908120 	.word	0x10908120
 8002b00:	40007000 	.word	0x40007000
 8002b04:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b08:	2202      	movs	r2, #2
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	4bbb      	ldr	r3, [pc, #748]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b24:	2102      	movs	r1, #2
 8002b26:	6011      	str	r1, [r2, #0]
 8002b28:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	fa92 f1a2 	rbit	r1, r2
 8002b32:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b36:	6011      	str	r1, [r2, #0]
  return result;
 8002b38:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	fab2 f282 	clz	r2, r2
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f002 021f 	and.w	r2, r2, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d099      	beq.n	8002a8e <HAL_RCC_OscConfig+0x8c6>
 8002b5a:	e063      	b.n	8002c24 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fd fffa 	bl	8000b54 <HAL_GetTick>
 8002b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fd fff5 	bl	8000b54 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e225      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002b7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b82:	2202      	movs	r2, #2
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bac:	601a      	str	r2, [r3, #0]
  return result;
 8002bae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0xa06>
 8002bc8:	4b90      	ldr	r3, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	e00d      	b.n	8002bea <HAL_RCC_OscConfig+0xa22>
 8002bce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	fa93 f2a3 	rbit	r2, r3
 8002be0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bee:	2102      	movs	r1, #2
 8002bf0:	6011      	str	r1, [r2, #0]
 8002bf2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	fa92 f1a2 	rbit	r1, r2
 8002bfc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c00:	6011      	str	r1, [r2, #0]
  return result;
 8002c02:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1a0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2c:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 81c2 	beq.w	8002fc8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	f000 819c 	beq.w	8002f8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 8114 	bne.w	8002e86 <HAL_RCC_OscConfig+0xcbe>
 8002c5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	fa93 f2a3 	rbit	r2, r3
 8002c72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2300      	movs	r3, #0
 8002c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fd ff5e 	bl	8000b54 <HAL_GetTick>
 8002c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e009      	b.n	8002cb2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fd ff59 	bl	8000b54 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e18b      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002cb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	fa93 f2a3 	rbit	r2, r3
 8002cc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cca:	601a      	str	r2, [r3, #0]
  return result;
 8002ccc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0xb24>
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e01b      	b.n	8002d24 <HAL_RCC_OscConfig+0xb5c>
 8002cec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d2c:	6011      	str	r1, [r2, #0]
 8002d2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fa92 f1a2 	rbit	r1, r2
 8002d38:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d3c:	6011      	str	r1, [r2, #0]
  return result;
 8002d3e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f002 021f 	and.w	r2, r2, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d19e      	bne.n	8002c9e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	4925      	ldr	r1, [pc, #148]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d94:	601a      	str	r2, [r3, #0]
  return result;
 8002d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d9a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	2301      	movs	r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fecf 	bl	8000b54 <HAL_GetTick>
 8002db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dba:	e009      	b.n	8002dd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fd feca 	bl	8000b54 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0fc      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002dd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002de8:	601a      	str	r2, [r3, #0]
  return result;
 8002dea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002dee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0xc48>
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <HAL_RCC_OscConfig+0xc44>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e01e      	b.n	8002e48 <HAL_RCC_OscConfig+0xc80>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0xe0c>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e50:	6011      	str	r1, [r2, #0]
 8002e52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	fa92 f1a2 	rbit	r1, r2
 8002e5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e60:	6011      	str	r1, [r2, #0]
  return result;
 8002e62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d09b      	beq.n	8002dbc <HAL_RCC_OscConfig+0xbf4>
 8002e84:	e0a0      	b.n	8002fc8 <HAL_RCC_OscConfig+0xe00>
 8002e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe4a 	bl	8000b54 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fd fe45 	bl	8000b54 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e077      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
 8002eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef2:	601a      	str	r2, [r3, #0]
  return result;
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd4c>
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_OscConfig+0xe0c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e01b      	b.n	8002f4c <HAL_RCC_OscConfig+0xd84>
 8002f14:	f107 0320 	add.w	r3, r7, #32
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f107 0320 	add.w	r3, r7, #32
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f107 0318 	add.w	r3, r7, #24
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f107 0318 	add.w	r3, r7, #24
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_OscConfig+0xe0c>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f107 0210 	add.w	r2, r7, #16
 8002f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	f107 0210 	add.w	r2, r7, #16
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fa92 f1a2 	rbit	r1, r2
 8002f60:	f107 020c 	add.w	r2, r7, #12
 8002f64:	6011      	str	r1, [r2, #0]
  return result;
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d19e      	bne.n	8002ec6 <HAL_RCC_OscConfig+0xcfe>
 8002f88:	e01e      	b.n	8002fc8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e018      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0xe0c>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fa0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d108      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b09e      	sub	sp, #120	; 0x78
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e162      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b90      	ldr	r3, [pc, #576]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	498b      	ldr	r1, [pc, #556]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e14a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	497f      	ldr	r1, [pc, #508]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80dc 	beq.w	8003204 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d13c      	bne.n	80030ce <HAL_RCC_ClockConfig+0xf6>
 8003054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003058:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <HAL_RCC_ClockConfig+0xa6>
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	e00f      	b.n	800309e <HAL_RCC_ClockConfig+0xc6>
 800307e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	667b      	str	r3, [r7, #100]	; 0x64
 800308c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003090:	663b      	str	r3, [r7, #96]	; 0x60
 8003092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80030a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ae:	fab2 f282 	clz	r2, r2
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	f002 021f 	and.w	r2, r2, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d17b      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0f3      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d13c      	bne.n	8003150 <HAL_RCC_ClockConfig+0x178>
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_ClockConfig+0x128>
 80030fa:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_ClockConfig+0x148>
 8003100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003104:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
 800310e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003124:	63ba      	str	r2, [r7, #56]	; 0x38
 8003126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003128:	fa92 f2a2 	rbit	r2, r2
 800312c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800312e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f042 0220 	orr.w	r2, r2, #32
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d13a      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b2      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
 8003150:	2302      	movs	r3, #2
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_RCC_ClockConfig+0x1a0>
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e00d      	b.n	8003194 <HAL_RCC_ClockConfig+0x1bc>
 8003178:	2302      	movs	r3, #2
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2202      	movs	r2, #2
 8003196:	61ba      	str	r2, [r7, #24]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	fa92 f2a2 	rbit	r2, r2
 800319e:	617a      	str	r2, [r7, #20]
  return result;
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e079      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	491a      	ldr	r1, [pc, #104]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fd fcbe 	bl	8000b54 <HAL_GetTick>
 80031d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fd fcba 	bl	8000b54 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e061      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d214      	bcs.n	800323c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4906      	ldr	r1, [pc, #24]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCC_ClockConfig+0x25c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e040      	b.n	80032b6 <HAL_RCC_ClockConfig+0x2de>
 8003234:	40022000 	.word	0x40022000
 8003238:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4912      	ldr	r1, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800327a:	f000 f829 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800327e:	4601      	mov	r1, r0
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	22f0      	movs	r2, #240	; 0xf0
 800328a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	fa92 f2a2 	rbit	r2, r2
 8003292:	60fa      	str	r2, [r7, #12]
  return result;
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	40d3      	lsrs	r3, r2
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x2ec>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	fa21 f303 	lsr.w	r3, r1, r3
 80032a6:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <HAL_RCC_ClockConfig+0x2f0>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCC_ClockConfig+0x2f4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fc0c 	bl	8000acc <HAL_InitTick>
  
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3778      	adds	r7, #120	; 0x78
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08004f88 	.word	0x08004f88
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b08b      	sub	sp, #44	; 0x2c
 80032d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x30>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x36>
 80032fe:	e03c      	b.n	800337a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003302:	623b      	str	r3, [r7, #32]
      break;
 8003304:	e03c      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800330c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003310:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	607a      	str	r2, [r7, #4]
  return result;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	40d3      	lsrs	r3, r2
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc0>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	220f      	movs	r2, #15
 8003334:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	fa92 f2a2 	rbit	r2, r2
 800333c:	60fa      	str	r2, [r7, #12]
  return result;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	40d3      	lsrs	r3, r2
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_RCC_GetSysClockFreq+0xcc>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	e004      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	623b      	str	r3, [r7, #32]
      break;
 8003378:	e002      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc4>)
 800337c:	623b      	str	r3, [r7, #32]
      break;
 800337e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003380:	6a3b      	ldr	r3, [r7, #32]
}
 8003382:	4618      	mov	r0, r3
 8003384:	372c      	adds	r7, #44	; 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	007a1200 	.word	0x007a1200
 8003398:	08004fa0 	.word	0x08004fa0
 800339c:	08004fb0 	.word	0x08004fb0
 80033a0:	003d0900 	.word	0x003d0900

080033a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000

080033bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033c2:	f7ff ffef 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	603a      	str	r2, [r7, #0]
  return result;
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	40d3      	lsrs	r3, r2
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08004f98 	.word	0x08004f98

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003406:	f7ff ffcd 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 800340a:	4601      	mov	r1, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	603a      	str	r2, [r7, #0]
  return result;
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x40>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	08004f98 	.word	0x08004f98

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b092      	sub	sp, #72	; 0x48
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80d4 	beq.w	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003468:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fb53 	bl	8000b54 <HAL_GetTick>
 80034ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fd fb4f 	bl	8000b54 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	; 0x64
 80034be:	d901      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e14b      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d0:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8084 	beq.w	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d07c      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	461a      	mov	r2, r3
 800353e:	2300      	movs	r3, #0
 8003540:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003546:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04b      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fd faff 	bl	8000b54 <HAL_GetTick>
 8003556:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd fafb 	bl	8000b54 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0f5      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003570:	2302      	movs	r3, #2
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	61fb      	str	r3, [r7, #28]
  return result;
 8003588:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d108      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800359e:	4b01      	ldr	r3, [pc, #4]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	e00d      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40007000 	.word	0x40007000
 80035ac:	10908100 	.word	0x10908100
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	4b69      	ldr	r3, [pc, #420]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	613a      	str	r2, [r7, #16]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	60fa      	str	r2, [r7, #12]
  return result;
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0b7      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ea:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	495b      	ldr	r1, [pc, #364]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b57      	ldr	r3, [pc, #348]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4a56      	ldr	r2, [pc, #344]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361c:	4b51      	ldr	r3, [pc, #324]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	f023 0203 	bic.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494e      	ldr	r1, [pc, #312]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800362a:	4313      	orrs	r3, r2
 800362c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363a:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f023 0210 	bic.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4947      	ldr	r1, [pc, #284]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003648:	4313      	orrs	r3, r2
 800364a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	493f      	ldr	r1, [pc, #252]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f023 0220 	bic.w	r2, r3, #32
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	4938      	ldr	r1, [pc, #224]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003684:	4313      	orrs	r3, r2
 8003686:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003694:	4b33      	ldr	r3, [pc, #204]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4930      	ldr	r1, [pc, #192]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4929      	ldr	r1, [pc, #164]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4921      	ldr	r1, [pc, #132]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	491a      	ldr	r1, [pc, #104]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800370c:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	4912      	ldr	r1, [pc, #72]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	490b      	ldr	r1, [pc, #44]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4903      	ldr	r1, [pc, #12]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003756:	4313      	orrs	r3, r2
 8003758:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3748      	adds	r7, #72	; 0x48
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e040      	b.n	80037fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd f848 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fb1e 	bl	8003de8 <UART_SetConfig>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e022      	b.n	80037fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fc48 	bl	8004054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fccf 	bl	8004198 <UART_CheckIdleState>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003818:	2b20      	cmp	r3, #32
 800381a:	f040 8082 	bne.w	8003922 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_Transmit+0x26>
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07a      	b.n	8003924 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x38>
 8003838:	2302      	movs	r3, #2
 800383a:	e073      	b.n	8003924 <HAL_UART_Transmit+0x120>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003852:	f7fd f97f 	bl	8000b54 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d108      	bne.n	8003884 <HAL_UART_Transmit+0x80>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e003      	b.n	800388c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003894:	e02d      	b.n	80038f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fcc2 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e039      	b.n	8003924 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c2:	b292      	uxth	r2, r2
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3302      	adds	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e008      	b.n	80038e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b292      	uxth	r2, r2
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1cb      	bne.n	8003896 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	2140      	movs	r1, #64	; 0x40
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fc8e 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e005      	b.n	8003924 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393e:	2b20      	cmp	r3, #32
 8003940:	d12c      	bne.n	800399c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_Receive_IT+0x22>
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e025      	b.n	800399e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_UART_Receive_IT+0x34>
 800395c:	2302      	movs	r3, #2
 800395e:	e01e      	b.n	800399e <HAL_UART_Receive_IT+0x72>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800398a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	461a      	mov	r2, r3
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fcc6 	bl	8004324 <UART_Start_Receive_IT>
 8003998:	4603      	mov	r3, r0
 800399a:	e000      	b.n	800399e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d113      	bne.n	8003a00 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 81cc 	beq.w	8003d8e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      }
      return;
 80039fe:	e1c6      	b.n	8003d8e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80e3 	beq.w	8003bce <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4ba5      	ldr	r3, [pc, #660]	; (8003cac <HAL_UART_IRQHandler+0x304>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80d8 	beq.w	8003bce <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_UART_IRQHandler+0xa2>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_UART_IRQHandler+0xce>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xfa>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ace:	f043 0208 	orr.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d011      	beq.n	8003b06 <HAL_UART_IRQHandler+0x15e>
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8140 	beq.w	8003d92 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00c      	beq.n	8003b36 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d004      	beq.n	8003b56 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d031      	beq.n	8003bba <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fc6c 	bl	8004434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d123      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d013      	beq.n	8003baa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <HAL_UART_IRQHandler+0x308>)
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f952 	bl	8001e38 <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d017      	beq.n	8003bca <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00f      	b.n	8003bca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f906 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e00b      	b.n	8003bca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f902 	bl	8003dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e007      	b.n	8003bca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8fe 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003bc8:	e0e3      	b.n	8003d92 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bca:	bf00      	nop
    return;
 8003bcc:	e0e1      	b.n	8003d92 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	f040 80a7 	bne.w	8003d26 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80a1 	beq.w	8003d26 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 809b 	beq.w	8003d26 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d156      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80bf 	beq.w	8003d96 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c1e:	893a      	ldrh	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f080 80b8 	bcs.w	8003d96 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d02a      	beq.n	8003c8e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c46:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0210 	bic.w	r2, r2, #16
 8003c82:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe f89c 	bl	8001dc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f894 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ca8:	e075      	b.n	8003d96 <HAL_UART_IRQHandler+0x3ee>
 8003caa:	bf00      	nop
 8003cac:	04000120 	.word	0x04000120
 8003cb0:	08004493 	.word	0x08004493
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d063      	beq.n	8003d9a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d060      	beq.n	8003d9a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0210 	bic.w	r2, r2, #16
 8003d18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f856 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d24:	e039      	b.n	8003d9a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <HAL_UART_IRQHandler+0x3a4>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fca7 	bl	8004698 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d4a:	e029      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01a      	beq.n	8003d9e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
    }
    return;
 8003d70:	e015      	b.n	8003d9e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fb99 	bl	80044be <UART_EndTransmit_IT>
    return;
 8003d8c:	e008      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003d9e:	bf00      	nop
  }

}
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b8a      	ldr	r3, [pc, #552]	; (800403c <UART_SetConfig+0x254>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	6979      	ldr	r1, [r7, #20]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a78      	ldr	r2, [pc, #480]	; (8004040 <UART_SetConfig+0x258>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d120      	bne.n	8003ea6 <UART_SetConfig+0xbe>
 8003e64:	4b77      	ldr	r3, [pc, #476]	; (8004044 <UART_SetConfig+0x25c>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d817      	bhi.n	8003ea0 <UART_SetConfig+0xb8>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x90>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e95 	.word	0x08003e95
 8003e80:	08003e9b 	.word	0x08003e9b
 8003e84:	08003e8f 	.word	0x08003e8f
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e01d      	b.n	8003eca <UART_SetConfig+0xe2>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e01a      	b.n	8003eca <UART_SetConfig+0xe2>
 8003e94:	2304      	movs	r3, #4
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e017      	b.n	8003eca <UART_SetConfig+0xe2>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0xe2>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e011      	b.n	8003eca <UART_SetConfig+0xe2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a67      	ldr	r2, [pc, #412]	; (8004048 <UART_SetConfig+0x260>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d102      	bne.n	8003eb6 <UART_SetConfig+0xce>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e009      	b.n	8003eca <UART_SetConfig+0xe2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a64      	ldr	r2, [pc, #400]	; (800404c <UART_SetConfig+0x264>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d102      	bne.n	8003ec6 <UART_SetConfig+0xde>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e001      	b.n	8003eca <UART_SetConfig+0xe2>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d15b      	bne.n	8003f8c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003ed4:	7ffb      	ldrb	r3, [r7, #31]
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d827      	bhi.n	8003f2a <UART_SetConfig+0x142>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0xf8>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f2b 	.word	0x08003f2b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7ff fa5a 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e013      	b.n	8003f34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7ff fa78 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <UART_SetConfig+0x268>)
 8003f16:	61bb      	str	r3, [r7, #24]
        break;
 8003f18:	e00c      	b.n	8003f34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7ff f9d9 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003f1e:	61b8      	str	r0, [r7, #24]
        break;
 8003f20:	e008      	b.n	8003f34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	61bb      	str	r3, [r7, #24]
        break;
 8003f28:	e004      	b.n	8003f34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	77bb      	strb	r3, [r7, #30]
        break;
 8003f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d074      	beq.n	8004024 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	005a      	lsls	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d916      	bls.n	8003f86 <UART_SetConfig+0x19e>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5e:	d212      	bcs.n	8003f86 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f023 030f 	bic.w	r3, r3, #15
 8003f68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	89fb      	ldrh	r3, [r7, #14]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	89fa      	ldrh	r2, [r7, #14]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e04e      	b.n	8004024 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	77bb      	strb	r3, [r7, #30]
 8003f8a:	e04b      	b.n	8004024 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x1fa>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x1b0>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7ff f9fe 	bl	80033bc <HAL_RCC_GetPCLK1Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e013      	b.n	8003fec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7ff fa1c 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <UART_SetConfig+0x268>)
 8003fce:	61bb      	str	r3, [r7, #24]
        break;
 8003fd0:	e00c      	b.n	8003fec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7ff f97d 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003fd6:	61b8      	str	r0, [r7, #24]
        break;
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	61bb      	str	r3, [r7, #24]
        break;
 8003fe0:	e004      	b.n	8003fec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8003fea:	bf00      	nop
    }

    if (pclk != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085a      	lsrs	r2, r3, #1
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d908      	bls.n	8004020 <UART_SetConfig+0x238>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d204      	bcs.n	8004020 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e001      	b.n	8004024 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004030:	7fbb      	ldrb	r3, [r7, #30]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	efff69f3 	.word	0xefff69f3
 8004040:	40013800 	.word	0x40013800
 8004044:	40021000 	.word	0x40021000
 8004048:	40004400 	.word	0x40004400
 800404c:	40004800 	.word	0x40004800
 8004050:	007a1200 	.word	0x007a1200

08004054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01a      	beq.n	800416a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004152:	d10a      	bne.n	800416a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041a8:	f7fc fcd4 	bl	8000b54 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d10e      	bne.n	80041da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f82d 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e023      	b.n	8004222 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d10e      	bne.n	8004206 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f817 	bl	800422a <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00d      	b.n	8004222 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423a:	e05e      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004242:	d05a      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fc fc86 	bl	8000b54 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <UART_WaitOnFlagUntilTimeout+0x30>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11b      	bne.n	8004292 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004268:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e043      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02c      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d124      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	429a      	cmp	r2, r3
 8004316:	d091      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	d10e      	bne.n	8004376 <UART_Start_Receive_IT+0x52>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <UART_Start_Receive_IT+0x48>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004366:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800436a:	e02d      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	22ff      	movs	r2, #255	; 0xff
 8004370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004374:	e028      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10d      	bne.n	800439a <UART_Start_Receive_IT+0x76>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <UART_Start_Receive_IT+0x6c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800438e:	e01b      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	227f      	movs	r2, #127	; 0x7f
 8004394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004398:	e016      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a2:	d10d      	bne.n	80043c0 <UART_Start_Receive_IT+0x9c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <UART_Start_Receive_IT+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	227f      	movs	r2, #127	; 0x7f
 80043b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b4:	e008      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	223f      	movs	r2, #63	; 0x3f
 80043ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043be:	e003      	b.n	80043c8 <UART_Start_Receive_IT+0xa4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	; 0x22
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d107      	bne.n	8004400 <UART_Start_Receive_IT+0xdc>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a0c      	ldr	r2, [pc, #48]	; (800442c <UART_Start_Receive_IT+0x108>)
 80043fc:	665a      	str	r2, [r3, #100]	; 0x64
 80043fe:	e002      	b.n	8004406 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <UART_Start_Receive_IT+0x10c>)
 8004404:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800441c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	080045c5 	.word	0x080045c5
 8004430:	080044f1 	.word	0x080044f1

08004434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800444a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0210 	bic.w	r2, r2, #16
 8004472:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fc83 	bl	8003dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fc60 	bl	8003da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004504:	2b22      	cmp	r3, #34	; 0x22
 8004506:	d151      	bne.n	80045ac <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800450e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004510:	89bb      	ldrh	r3, [r7, #12]
 8004512:	b2d9      	uxtb	r1, r3
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	400a      	ands	r2, r1
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d138      	bne.n	80045bc <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004558:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10f      	bne.n	800459e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0210 	bic.w	r2, r2, #16
 800458c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fc1a 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
 800459c:	e002      	b.n	80045a4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fb fe6e 	bl	8000280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045aa:	e007      	b.n	80045bc <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	619a      	str	r2, [r3, #24]
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	d151      	bne.n	8004680 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045e2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80045ea:	89ba      	ldrh	r2, [r7, #12]
 80045ec:	89fb      	ldrh	r3, [r7, #14]
 80045ee:	4013      	ands	r3, r2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d138      	bne.n	8004690 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800462c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10f      	bne.n	8004672 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0210 	bic.w	r2, r2, #16
 8004660:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fbb0 	bl	8003dd0 <HAL_UARTEx_RxEventCallback>
 8004670:	e002      	b.n	8004678 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fb fe04 	bl	8000280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800467e:	e007      	b.n	8004690 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	619a      	str	r2, [r3, #24]
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	2000000c 	.word	0x2000000c

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 fc4e 	bl	8004f6c <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08004ff4 	.word	0x08004ff4
 80046f4:	08004ff4 	.word	0x08004ff4
 80046f8:	08004ff4 	.word	0x08004ff4
 80046fc:	08004ff8 	.word	0x08004ff8

08004700 <memset>:
 8004700:	4402      	add	r2, r0
 8004702:	4603      	mov	r3, r0
 8004704:	4293      	cmp	r3, r2
 8004706:	d100      	bne.n	800470a <memset+0xa>
 8004708:	4770      	bx	lr
 800470a:	f803 1b01 	strb.w	r1, [r3], #1
 800470e:	e7f9      	b.n	8004704 <memset+0x4>

08004710 <siprintf>:
 8004710:	b40e      	push	{r1, r2, r3}
 8004712:	b500      	push	{lr}
 8004714:	b09c      	sub	sp, #112	; 0x70
 8004716:	ab1d      	add	r3, sp, #116	; 0x74
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	9006      	str	r0, [sp, #24]
 800471c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004720:	4809      	ldr	r0, [pc, #36]	; (8004748 <siprintf+0x38>)
 8004722:	9107      	str	r1, [sp, #28]
 8004724:	9104      	str	r1, [sp, #16]
 8004726:	4909      	ldr	r1, [pc, #36]	; (800474c <siprintf+0x3c>)
 8004728:	f853 2b04 	ldr.w	r2, [r3], #4
 800472c:	9105      	str	r1, [sp, #20]
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	a902      	add	r1, sp, #8
 8004734:	f000 f868 	bl	8004808 <_svfiprintf_r>
 8004738:	9b02      	ldr	r3, [sp, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	b01c      	add	sp, #112	; 0x70
 8004740:	f85d eb04 	ldr.w	lr, [sp], #4
 8004744:	b003      	add	sp, #12
 8004746:	4770      	bx	lr
 8004748:	2000000c 	.word	0x2000000c
 800474c:	ffff0208 	.word	0xffff0208

08004750 <__ssputs_r>:
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	688e      	ldr	r6, [r1, #8]
 8004756:	429e      	cmp	r6, r3
 8004758:	4682      	mov	sl, r0
 800475a:	460c      	mov	r4, r1
 800475c:	4690      	mov	r8, r2
 800475e:	461f      	mov	r7, r3
 8004760:	d838      	bhi.n	80047d4 <__ssputs_r+0x84>
 8004762:	898a      	ldrh	r2, [r1, #12]
 8004764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004768:	d032      	beq.n	80047d0 <__ssputs_r+0x80>
 800476a:	6825      	ldr	r5, [r4, #0]
 800476c:	6909      	ldr	r1, [r1, #16]
 800476e:	eba5 0901 	sub.w	r9, r5, r1
 8004772:	6965      	ldr	r5, [r4, #20]
 8004774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800477c:	3301      	adds	r3, #1
 800477e:	444b      	add	r3, r9
 8004780:	106d      	asrs	r5, r5, #1
 8004782:	429d      	cmp	r5, r3
 8004784:	bf38      	it	cc
 8004786:	461d      	movcc	r5, r3
 8004788:	0553      	lsls	r3, r2, #21
 800478a:	d531      	bpl.n	80047f0 <__ssputs_r+0xa0>
 800478c:	4629      	mov	r1, r5
 800478e:	f000 fb47 	bl	8004e20 <_malloc_r>
 8004792:	4606      	mov	r6, r0
 8004794:	b950      	cbnz	r0, 80047ac <__ssputs_r+0x5c>
 8004796:	230c      	movs	r3, #12
 8004798:	f8ca 3000 	str.w	r3, [sl]
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a2:	81a3      	strh	r3, [r4, #12]
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	464a      	mov	r2, r9
 80047b0:	f000 fabe 	bl	8004d30 <memcpy>
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	81a3      	strh	r3, [r4, #12]
 80047c0:	6126      	str	r6, [r4, #16]
 80047c2:	6165      	str	r5, [r4, #20]
 80047c4:	444e      	add	r6, r9
 80047c6:	eba5 0509 	sub.w	r5, r5, r9
 80047ca:	6026      	str	r6, [r4, #0]
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	463e      	mov	r6, r7
 80047d0:	42be      	cmp	r6, r7
 80047d2:	d900      	bls.n	80047d6 <__ssputs_r+0x86>
 80047d4:	463e      	mov	r6, r7
 80047d6:	4632      	mov	r2, r6
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	4641      	mov	r1, r8
 80047dc:	f000 fab6 	bl	8004d4c <memmove>
 80047e0:	68a3      	ldr	r3, [r4, #8]
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	1b9b      	subs	r3, r3, r6
 80047e6:	4432      	add	r2, r6
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6022      	str	r2, [r4, #0]
 80047ec:	2000      	movs	r0, #0
 80047ee:	e7db      	b.n	80047a8 <__ssputs_r+0x58>
 80047f0:	462a      	mov	r2, r5
 80047f2:	f000 fb6f 	bl	8004ed4 <_realloc_r>
 80047f6:	4606      	mov	r6, r0
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1e1      	bne.n	80047c0 <__ssputs_r+0x70>
 80047fc:	6921      	ldr	r1, [r4, #16]
 80047fe:	4650      	mov	r0, sl
 8004800:	f000 fabe 	bl	8004d80 <_free_r>
 8004804:	e7c7      	b.n	8004796 <__ssputs_r+0x46>
	...

08004808 <_svfiprintf_r>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	4698      	mov	r8, r3
 800480e:	898b      	ldrh	r3, [r1, #12]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	b09d      	sub	sp, #116	; 0x74
 8004814:	4607      	mov	r7, r0
 8004816:	460d      	mov	r5, r1
 8004818:	4614      	mov	r4, r2
 800481a:	d50e      	bpl.n	800483a <_svfiprintf_r+0x32>
 800481c:	690b      	ldr	r3, [r1, #16]
 800481e:	b963      	cbnz	r3, 800483a <_svfiprintf_r+0x32>
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	f000 fafd 	bl	8004e20 <_malloc_r>
 8004826:	6028      	str	r0, [r5, #0]
 8004828:	6128      	str	r0, [r5, #16]
 800482a:	b920      	cbnz	r0, 8004836 <_svfiprintf_r+0x2e>
 800482c:	230c      	movs	r3, #12
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004834:	e0d1      	b.n	80049da <_svfiprintf_r+0x1d2>
 8004836:	2340      	movs	r3, #64	; 0x40
 8004838:	616b      	str	r3, [r5, #20]
 800483a:	2300      	movs	r3, #0
 800483c:	9309      	str	r3, [sp, #36]	; 0x24
 800483e:	2320      	movs	r3, #32
 8004840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004844:	f8cd 800c 	str.w	r8, [sp, #12]
 8004848:	2330      	movs	r3, #48	; 0x30
 800484a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049f4 <_svfiprintf_r+0x1ec>
 800484e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004852:	f04f 0901 	mov.w	r9, #1
 8004856:	4623      	mov	r3, r4
 8004858:	469a      	mov	sl, r3
 800485a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800485e:	b10a      	cbz	r2, 8004864 <_svfiprintf_r+0x5c>
 8004860:	2a25      	cmp	r2, #37	; 0x25
 8004862:	d1f9      	bne.n	8004858 <_svfiprintf_r+0x50>
 8004864:	ebba 0b04 	subs.w	fp, sl, r4
 8004868:	d00b      	beq.n	8004882 <_svfiprintf_r+0x7a>
 800486a:	465b      	mov	r3, fp
 800486c:	4622      	mov	r2, r4
 800486e:	4629      	mov	r1, r5
 8004870:	4638      	mov	r0, r7
 8004872:	f7ff ff6d 	bl	8004750 <__ssputs_r>
 8004876:	3001      	adds	r0, #1
 8004878:	f000 80aa 	beq.w	80049d0 <_svfiprintf_r+0x1c8>
 800487c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800487e:	445a      	add	r2, fp
 8004880:	9209      	str	r2, [sp, #36]	; 0x24
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80a2 	beq.w	80049d0 <_svfiprintf_r+0x1c8>
 800488c:	2300      	movs	r3, #0
 800488e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004896:	f10a 0a01 	add.w	sl, sl, #1
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	9307      	str	r3, [sp, #28]
 800489e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a2:	931a      	str	r3, [sp, #104]	; 0x68
 80048a4:	4654      	mov	r4, sl
 80048a6:	2205      	movs	r2, #5
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	4851      	ldr	r0, [pc, #324]	; (80049f4 <_svfiprintf_r+0x1ec>)
 80048ae:	f7fb fc97 	bl	80001e0 <memchr>
 80048b2:	9a04      	ldr	r2, [sp, #16]
 80048b4:	b9d8      	cbnz	r0, 80048ee <_svfiprintf_r+0xe6>
 80048b6:	06d0      	lsls	r0, r2, #27
 80048b8:	bf44      	itt	mi
 80048ba:	2320      	movmi	r3, #32
 80048bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c0:	0711      	lsls	r1, r2, #28
 80048c2:	bf44      	itt	mi
 80048c4:	232b      	movmi	r3, #43	; 0x2b
 80048c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ca:	f89a 3000 	ldrb.w	r3, [sl]
 80048ce:	2b2a      	cmp	r3, #42	; 0x2a
 80048d0:	d015      	beq.n	80048fe <_svfiprintf_r+0xf6>
 80048d2:	9a07      	ldr	r2, [sp, #28]
 80048d4:	4654      	mov	r4, sl
 80048d6:	2000      	movs	r0, #0
 80048d8:	f04f 0c0a 	mov.w	ip, #10
 80048dc:	4621      	mov	r1, r4
 80048de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e2:	3b30      	subs	r3, #48	; 0x30
 80048e4:	2b09      	cmp	r3, #9
 80048e6:	d94e      	bls.n	8004986 <_svfiprintf_r+0x17e>
 80048e8:	b1b0      	cbz	r0, 8004918 <_svfiprintf_r+0x110>
 80048ea:	9207      	str	r2, [sp, #28]
 80048ec:	e014      	b.n	8004918 <_svfiprintf_r+0x110>
 80048ee:	eba0 0308 	sub.w	r3, r0, r8
 80048f2:	fa09 f303 	lsl.w	r3, r9, r3
 80048f6:	4313      	orrs	r3, r2
 80048f8:	9304      	str	r3, [sp, #16]
 80048fa:	46a2      	mov	sl, r4
 80048fc:	e7d2      	b.n	80048a4 <_svfiprintf_r+0x9c>
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	1d19      	adds	r1, r3, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	9103      	str	r1, [sp, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfbb      	ittet	lt
 800490a:	425b      	neglt	r3, r3
 800490c:	f042 0202 	orrlt.w	r2, r2, #2
 8004910:	9307      	strge	r3, [sp, #28]
 8004912:	9307      	strlt	r3, [sp, #28]
 8004914:	bfb8      	it	lt
 8004916:	9204      	strlt	r2, [sp, #16]
 8004918:	7823      	ldrb	r3, [r4, #0]
 800491a:	2b2e      	cmp	r3, #46	; 0x2e
 800491c:	d10c      	bne.n	8004938 <_svfiprintf_r+0x130>
 800491e:	7863      	ldrb	r3, [r4, #1]
 8004920:	2b2a      	cmp	r3, #42	; 0x2a
 8004922:	d135      	bne.n	8004990 <_svfiprintf_r+0x188>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	9203      	str	r2, [sp, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfb8      	it	lt
 8004930:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004934:	3402      	adds	r4, #2
 8004936:	9305      	str	r3, [sp, #20]
 8004938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a04 <_svfiprintf_r+0x1fc>
 800493c:	7821      	ldrb	r1, [r4, #0]
 800493e:	2203      	movs	r2, #3
 8004940:	4650      	mov	r0, sl
 8004942:	f7fb fc4d 	bl	80001e0 <memchr>
 8004946:	b140      	cbz	r0, 800495a <_svfiprintf_r+0x152>
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	eba0 000a 	sub.w	r0, r0, sl
 800494e:	fa03 f000 	lsl.w	r0, r3, r0
 8004952:	9b04      	ldr	r3, [sp, #16]
 8004954:	4303      	orrs	r3, r0
 8004956:	3401      	adds	r4, #1
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495e:	4826      	ldr	r0, [pc, #152]	; (80049f8 <_svfiprintf_r+0x1f0>)
 8004960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004964:	2206      	movs	r2, #6
 8004966:	f7fb fc3b 	bl	80001e0 <memchr>
 800496a:	2800      	cmp	r0, #0
 800496c:	d038      	beq.n	80049e0 <_svfiprintf_r+0x1d8>
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <_svfiprintf_r+0x1f4>)
 8004970:	bb1b      	cbnz	r3, 80049ba <_svfiprintf_r+0x1b2>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	3307      	adds	r3, #7
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	3308      	adds	r3, #8
 800497c:	9303      	str	r3, [sp, #12]
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	4433      	add	r3, r6
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	e767      	b.n	8004856 <_svfiprintf_r+0x4e>
 8004986:	fb0c 3202 	mla	r2, ip, r2, r3
 800498a:	460c      	mov	r4, r1
 800498c:	2001      	movs	r0, #1
 800498e:	e7a5      	b.n	80048dc <_svfiprintf_r+0xd4>
 8004990:	2300      	movs	r3, #0
 8004992:	3401      	adds	r4, #1
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	4619      	mov	r1, r3
 8004998:	f04f 0c0a 	mov.w	ip, #10
 800499c:	4620      	mov	r0, r4
 800499e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a2:	3a30      	subs	r2, #48	; 0x30
 80049a4:	2a09      	cmp	r2, #9
 80049a6:	d903      	bls.n	80049b0 <_svfiprintf_r+0x1a8>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0c5      	beq.n	8004938 <_svfiprintf_r+0x130>
 80049ac:	9105      	str	r1, [sp, #20]
 80049ae:	e7c3      	b.n	8004938 <_svfiprintf_r+0x130>
 80049b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b4:	4604      	mov	r4, r0
 80049b6:	2301      	movs	r3, #1
 80049b8:	e7f0      	b.n	800499c <_svfiprintf_r+0x194>
 80049ba:	ab03      	add	r3, sp, #12
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	462a      	mov	r2, r5
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <_svfiprintf_r+0x1f8>)
 80049c2:	a904      	add	r1, sp, #16
 80049c4:	4638      	mov	r0, r7
 80049c6:	f3af 8000 	nop.w
 80049ca:	1c42      	adds	r2, r0, #1
 80049cc:	4606      	mov	r6, r0
 80049ce:	d1d6      	bne.n	800497e <_svfiprintf_r+0x176>
 80049d0:	89ab      	ldrh	r3, [r5, #12]
 80049d2:	065b      	lsls	r3, r3, #25
 80049d4:	f53f af2c 	bmi.w	8004830 <_svfiprintf_r+0x28>
 80049d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049da:	b01d      	add	sp, #116	; 0x74
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <_svfiprintf_r+0x1f8>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4638      	mov	r0, r7
 80049ec:	f000 f87a 	bl	8004ae4 <_printf_i>
 80049f0:	e7eb      	b.n	80049ca <_svfiprintf_r+0x1c2>
 80049f2:	bf00      	nop
 80049f4:	08004fc0 	.word	0x08004fc0
 80049f8:	08004fca 	.word	0x08004fca
 80049fc:	00000000 	.word	0x00000000
 8004a00:	08004751 	.word	0x08004751
 8004a04:	08004fc6 	.word	0x08004fc6

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bfb8      	it	lt
 8004a1c:	4613      	movlt	r3, r2
 8004a1e:	6033      	str	r3, [r6, #0]
 8004a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a24:	4607      	mov	r7, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	b10a      	cbz	r2, 8004a2e <_printf_common+0x26>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	6033      	str	r3, [r6, #0]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	0699      	lsls	r1, r3, #26
 8004a32:	bf42      	ittt	mi
 8004a34:	6833      	ldrmi	r3, [r6, #0]
 8004a36:	3302      	addmi	r3, #2
 8004a38:	6033      	strmi	r3, [r6, #0]
 8004a3a:	6825      	ldr	r5, [r4, #0]
 8004a3c:	f015 0506 	ands.w	r5, r5, #6
 8004a40:	d106      	bne.n	8004a50 <_printf_common+0x48>
 8004a42:	f104 0a19 	add.w	sl, r4, #25
 8004a46:	68e3      	ldr	r3, [r4, #12]
 8004a48:	6832      	ldr	r2, [r6, #0]
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	42ab      	cmp	r3, r5
 8004a4e:	dc26      	bgt.n	8004a9e <_printf_common+0x96>
 8004a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a54:	1e13      	subs	r3, r2, #0
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	bf18      	it	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	0692      	lsls	r2, r2, #26
 8004a5e:	d42b      	bmi.n	8004ab8 <_printf_common+0xb0>
 8004a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a64:	4649      	mov	r1, r9
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d01e      	beq.n	8004aac <_printf_common+0xa4>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	68e5      	ldr	r5, [r4, #12]
 8004a72:	6832      	ldr	r2, [r6, #0]
 8004a74:	f003 0306 	and.w	r3, r3, #6
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	bf08      	it	eq
 8004a7c:	1aad      	subeq	r5, r5, r2
 8004a7e:	68a3      	ldr	r3, [r4, #8]
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	bf0c      	ite	eq
 8004a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a88:	2500      	movne	r5, #0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfc4      	itt	gt
 8004a8e:	1a9b      	subgt	r3, r3, r2
 8004a90:	18ed      	addgt	r5, r5, r3
 8004a92:	2600      	movs	r6, #0
 8004a94:	341a      	adds	r4, #26
 8004a96:	42b5      	cmp	r5, r6
 8004a98:	d11a      	bne.n	8004ad0 <_printf_common+0xc8>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e008      	b.n	8004ab0 <_printf_common+0xa8>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	47c0      	blx	r8
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d103      	bne.n	8004ab4 <_printf_common+0xac>
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab4:	3501      	adds	r5, #1
 8004ab6:	e7c6      	b.n	8004a46 <_printf_common+0x3e>
 8004ab8:	18e1      	adds	r1, r4, r3
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	2030      	movs	r0, #48	; 0x30
 8004abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ac2:	4422      	add	r2, r4
 8004ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004acc:	3302      	adds	r3, #2
 8004ace:	e7c7      	b.n	8004a60 <_printf_common+0x58>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	47c0      	blx	r8
 8004ada:	3001      	adds	r0, #1
 8004adc:	d0e6      	beq.n	8004aac <_printf_common+0xa4>
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7d9      	b.n	8004a96 <_printf_common+0x8e>
	...

08004ae4 <_printf_i>:
 8004ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae8:	460c      	mov	r4, r1
 8004aea:	4691      	mov	r9, r2
 8004aec:	7e27      	ldrb	r7, [r4, #24]
 8004aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004af0:	2f78      	cmp	r7, #120	; 0x78
 8004af2:	4680      	mov	r8, r0
 8004af4:	469a      	mov	sl, r3
 8004af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004afa:	d807      	bhi.n	8004b0c <_printf_i+0x28>
 8004afc:	2f62      	cmp	r7, #98	; 0x62
 8004afe:	d80a      	bhi.n	8004b16 <_printf_i+0x32>
 8004b00:	2f00      	cmp	r7, #0
 8004b02:	f000 80d8 	beq.w	8004cb6 <_printf_i+0x1d2>
 8004b06:	2f58      	cmp	r7, #88	; 0x58
 8004b08:	f000 80a3 	beq.w	8004c52 <_printf_i+0x16e>
 8004b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b14:	e03a      	b.n	8004b8c <_printf_i+0xa8>
 8004b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b1a:	2b15      	cmp	r3, #21
 8004b1c:	d8f6      	bhi.n	8004b0c <_printf_i+0x28>
 8004b1e:	a001      	add	r0, pc, #4	; (adr r0, 8004b24 <_printf_i+0x40>)
 8004b20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b24:	08004b7d 	.word	0x08004b7d
 8004b28:	08004b91 	.word	0x08004b91
 8004b2c:	08004b0d 	.word	0x08004b0d
 8004b30:	08004b0d 	.word	0x08004b0d
 8004b34:	08004b0d 	.word	0x08004b0d
 8004b38:	08004b0d 	.word	0x08004b0d
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004b0d 	.word	0x08004b0d
 8004b44:	08004b0d 	.word	0x08004b0d
 8004b48:	08004b0d 	.word	0x08004b0d
 8004b4c:	08004b0d 	.word	0x08004b0d
 8004b50:	08004c9d 	.word	0x08004c9d
 8004b54:	08004bc1 	.word	0x08004bc1
 8004b58:	08004c7f 	.word	0x08004c7f
 8004b5c:	08004b0d 	.word	0x08004b0d
 8004b60:	08004b0d 	.word	0x08004b0d
 8004b64:	08004cbf 	.word	0x08004cbf
 8004b68:	08004b0d 	.word	0x08004b0d
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004b0d 	.word	0x08004b0d
 8004b74:	08004b0d 	.word	0x08004b0d
 8004b78:	08004c87 	.word	0x08004c87
 8004b7c:	680b      	ldr	r3, [r1, #0]
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	600a      	str	r2, [r1, #0]
 8004b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0a3      	b.n	8004cd8 <_printf_i+0x1f4>
 8004b90:	6825      	ldr	r5, [r4, #0]
 8004b92:	6808      	ldr	r0, [r1, #0]
 8004b94:	062e      	lsls	r6, r5, #24
 8004b96:	f100 0304 	add.w	r3, r0, #4
 8004b9a:	d50a      	bpl.n	8004bb2 <_printf_i+0xce>
 8004b9c:	6805      	ldr	r5, [r0, #0]
 8004b9e:	600b      	str	r3, [r1, #0]
 8004ba0:	2d00      	cmp	r5, #0
 8004ba2:	da03      	bge.n	8004bac <_printf_i+0xc8>
 8004ba4:	232d      	movs	r3, #45	; 0x2d
 8004ba6:	426d      	negs	r5, r5
 8004ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bac:	485e      	ldr	r0, [pc, #376]	; (8004d28 <_printf_i+0x244>)
 8004bae:	230a      	movs	r3, #10
 8004bb0:	e019      	b.n	8004be6 <_printf_i+0x102>
 8004bb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bb6:	6805      	ldr	r5, [r0, #0]
 8004bb8:	600b      	str	r3, [r1, #0]
 8004bba:	bf18      	it	ne
 8004bbc:	b22d      	sxthne	r5, r5
 8004bbe:	e7ef      	b.n	8004ba0 <_printf_i+0xbc>
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	1d18      	adds	r0, r3, #4
 8004bc6:	6008      	str	r0, [r1, #0]
 8004bc8:	0628      	lsls	r0, r5, #24
 8004bca:	d501      	bpl.n	8004bd0 <_printf_i+0xec>
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <_printf_i+0xf2>
 8004bd0:	0669      	lsls	r1, r5, #25
 8004bd2:	d5fb      	bpl.n	8004bcc <_printf_i+0xe8>
 8004bd4:	881d      	ldrh	r5, [r3, #0]
 8004bd6:	4854      	ldr	r0, [pc, #336]	; (8004d28 <_printf_i+0x244>)
 8004bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bda:	bf0c      	ite	eq
 8004bdc:	2308      	moveq	r3, #8
 8004bde:	230a      	movne	r3, #10
 8004be0:	2100      	movs	r1, #0
 8004be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be6:	6866      	ldr	r6, [r4, #4]
 8004be8:	60a6      	str	r6, [r4, #8]
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	bfa2      	ittt	ge
 8004bee:	6821      	ldrge	r1, [r4, #0]
 8004bf0:	f021 0104 	bicge.w	r1, r1, #4
 8004bf4:	6021      	strge	r1, [r4, #0]
 8004bf6:	b90d      	cbnz	r5, 8004bfc <_printf_i+0x118>
 8004bf8:	2e00      	cmp	r6, #0
 8004bfa:	d04d      	beq.n	8004c98 <_printf_i+0x1b4>
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c02:	fb03 5711 	mls	r7, r3, r1, r5
 8004c06:	5dc7      	ldrb	r7, [r0, r7]
 8004c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c0c:	462f      	mov	r7, r5
 8004c0e:	42bb      	cmp	r3, r7
 8004c10:	460d      	mov	r5, r1
 8004c12:	d9f4      	bls.n	8004bfe <_printf_i+0x11a>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d10b      	bne.n	8004c30 <_printf_i+0x14c>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07df      	lsls	r7, r3, #31
 8004c1c:	d508      	bpl.n	8004c30 <_printf_i+0x14c>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	6861      	ldr	r1, [r4, #4]
 8004c22:	4299      	cmp	r1, r3
 8004c24:	bfde      	ittt	le
 8004c26:	2330      	movle	r3, #48	; 0x30
 8004c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c2c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004c30:	1b92      	subs	r2, r2, r6
 8004c32:	6122      	str	r2, [r4, #16]
 8004c34:	f8cd a000 	str.w	sl, [sp]
 8004c38:	464b      	mov	r3, r9
 8004c3a:	aa03      	add	r2, sp, #12
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fee2 	bl	8004a08 <_printf_common>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d14c      	bne.n	8004ce2 <_printf_i+0x1fe>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c4c:	b004      	add	sp, #16
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	4835      	ldr	r0, [pc, #212]	; (8004d28 <_printf_i+0x244>)
 8004c54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	680e      	ldr	r6, [r1, #0]
 8004c5c:	061f      	lsls	r7, r3, #24
 8004c5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c62:	600e      	str	r6, [r1, #0]
 8004c64:	d514      	bpl.n	8004c90 <_printf_i+0x1ac>
 8004c66:	07d9      	lsls	r1, r3, #31
 8004c68:	bf44      	itt	mi
 8004c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c6e:	6023      	strmi	r3, [r4, #0]
 8004c70:	b91d      	cbnz	r5, 8004c7a <_printf_i+0x196>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f023 0320 	bic.w	r3, r3, #32
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	e7b0      	b.n	8004be0 <_printf_i+0xfc>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f043 0320 	orr.w	r3, r3, #32
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	2378      	movs	r3, #120	; 0x78
 8004c88:	4828      	ldr	r0, [pc, #160]	; (8004d2c <_printf_i+0x248>)
 8004c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c8e:	e7e3      	b.n	8004c58 <_printf_i+0x174>
 8004c90:	065e      	lsls	r6, r3, #25
 8004c92:	bf48      	it	mi
 8004c94:	b2ad      	uxthmi	r5, r5
 8004c96:	e7e6      	b.n	8004c66 <_printf_i+0x182>
 8004c98:	4616      	mov	r6, r2
 8004c9a:	e7bb      	b.n	8004c14 <_printf_i+0x130>
 8004c9c:	680b      	ldr	r3, [r1, #0]
 8004c9e:	6826      	ldr	r6, [r4, #0]
 8004ca0:	6960      	ldr	r0, [r4, #20]
 8004ca2:	1d1d      	adds	r5, r3, #4
 8004ca4:	600d      	str	r5, [r1, #0]
 8004ca6:	0635      	lsls	r5, r6, #24
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	d501      	bpl.n	8004cb0 <_printf_i+0x1cc>
 8004cac:	6018      	str	r0, [r3, #0]
 8004cae:	e002      	b.n	8004cb6 <_printf_i+0x1d2>
 8004cb0:	0671      	lsls	r1, r6, #25
 8004cb2:	d5fb      	bpl.n	8004cac <_printf_i+0x1c8>
 8004cb4:	8018      	strh	r0, [r3, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6123      	str	r3, [r4, #16]
 8004cba:	4616      	mov	r6, r2
 8004cbc:	e7ba      	b.n	8004c34 <_printf_i+0x150>
 8004cbe:	680b      	ldr	r3, [r1, #0]
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	600a      	str	r2, [r1, #0]
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f7fb fa88 	bl	80001e0 <memchr>
 8004cd0:	b108      	cbz	r0, 8004cd6 <_printf_i+0x1f2>
 8004cd2:	1b80      	subs	r0, r0, r6
 8004cd4:	6060      	str	r0, [r4, #4]
 8004cd6:	6863      	ldr	r3, [r4, #4]
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce0:	e7a8      	b.n	8004c34 <_printf_i+0x150>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	4640      	mov	r0, r8
 8004cea:	47d0      	blx	sl
 8004cec:	3001      	adds	r0, #1
 8004cee:	d0ab      	beq.n	8004c48 <_printf_i+0x164>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	079b      	lsls	r3, r3, #30
 8004cf4:	d413      	bmi.n	8004d1e <_printf_i+0x23a>
 8004cf6:	68e0      	ldr	r0, [r4, #12]
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	bfb8      	it	lt
 8004cfe:	4618      	movlt	r0, r3
 8004d00:	e7a4      	b.n	8004c4c <_printf_i+0x168>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4632      	mov	r2, r6
 8004d06:	4649      	mov	r1, r9
 8004d08:	4640      	mov	r0, r8
 8004d0a:	47d0      	blx	sl
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d09b      	beq.n	8004c48 <_printf_i+0x164>
 8004d10:	3501      	adds	r5, #1
 8004d12:	68e3      	ldr	r3, [r4, #12]
 8004d14:	9903      	ldr	r1, [sp, #12]
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	42ab      	cmp	r3, r5
 8004d1a:	dcf2      	bgt.n	8004d02 <_printf_i+0x21e>
 8004d1c:	e7eb      	b.n	8004cf6 <_printf_i+0x212>
 8004d1e:	2500      	movs	r5, #0
 8004d20:	f104 0619 	add.w	r6, r4, #25
 8004d24:	e7f5      	b.n	8004d12 <_printf_i+0x22e>
 8004d26:	bf00      	nop
 8004d28:	08004fd1 	.word	0x08004fd1
 8004d2c:	08004fe2 	.word	0x08004fe2

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d46:	4291      	cmp	r1, r2
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <memmove>:
 8004d4c:	4288      	cmp	r0, r1
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	eb01 0402 	add.w	r4, r1, r2
 8004d54:	d902      	bls.n	8004d5c <memmove+0x10>
 8004d56:	4284      	cmp	r4, r0
 8004d58:	4623      	mov	r3, r4
 8004d5a:	d807      	bhi.n	8004d6c <memmove+0x20>
 8004d5c:	1e43      	subs	r3, r0, #1
 8004d5e:	42a1      	cmp	r1, r4
 8004d60:	d008      	beq.n	8004d74 <memmove+0x28>
 8004d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d6a:	e7f8      	b.n	8004d5e <memmove+0x12>
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4601      	mov	r1, r0
 8004d70:	428a      	cmp	r2, r1
 8004d72:	d100      	bne.n	8004d76 <memmove+0x2a>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d7e:	e7f7      	b.n	8004d70 <memmove+0x24>

08004d80 <_free_r>:
 8004d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d82:	2900      	cmp	r1, #0
 8004d84:	d048      	beq.n	8004e18 <_free_r+0x98>
 8004d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d8a:	9001      	str	r0, [sp, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d92:	bfb8      	it	lt
 8004d94:	18e4      	addlt	r4, r4, r3
 8004d96:	f000 f8d3 	bl	8004f40 <__malloc_lock>
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <_free_r+0x9c>)
 8004d9c:	9801      	ldr	r0, [sp, #4]
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	4615      	mov	r5, r2
 8004da2:	b933      	cbnz	r3, 8004db2 <_free_r+0x32>
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	6014      	str	r4, [r2, #0]
 8004da8:	b003      	add	sp, #12
 8004daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dae:	f000 b8cd 	b.w	8004f4c <__malloc_unlock>
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	d90b      	bls.n	8004dce <_free_r+0x4e>
 8004db6:	6821      	ldr	r1, [r4, #0]
 8004db8:	1862      	adds	r2, r4, r1
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	bf04      	itt	eq
 8004dbe:	681a      	ldreq	r2, [r3, #0]
 8004dc0:	685b      	ldreq	r3, [r3, #4]
 8004dc2:	6063      	str	r3, [r4, #4]
 8004dc4:	bf04      	itt	eq
 8004dc6:	1852      	addeq	r2, r2, r1
 8004dc8:	6022      	streq	r2, [r4, #0]
 8004dca:	602c      	str	r4, [r5, #0]
 8004dcc:	e7ec      	b.n	8004da8 <_free_r+0x28>
 8004dce:	461a      	mov	r2, r3
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b10b      	cbz	r3, 8004dd8 <_free_r+0x58>
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	d9fa      	bls.n	8004dce <_free_r+0x4e>
 8004dd8:	6811      	ldr	r1, [r2, #0]
 8004dda:	1855      	adds	r5, r2, r1
 8004ddc:	42a5      	cmp	r5, r4
 8004dde:	d10b      	bne.n	8004df8 <_free_r+0x78>
 8004de0:	6824      	ldr	r4, [r4, #0]
 8004de2:	4421      	add	r1, r4
 8004de4:	1854      	adds	r4, r2, r1
 8004de6:	42a3      	cmp	r3, r4
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	d1dd      	bne.n	8004da8 <_free_r+0x28>
 8004dec:	681c      	ldr	r4, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	6053      	str	r3, [r2, #4]
 8004df2:	4421      	add	r1, r4
 8004df4:	6011      	str	r1, [r2, #0]
 8004df6:	e7d7      	b.n	8004da8 <_free_r+0x28>
 8004df8:	d902      	bls.n	8004e00 <_free_r+0x80>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	6003      	str	r3, [r0, #0]
 8004dfe:	e7d3      	b.n	8004da8 <_free_r+0x28>
 8004e00:	6825      	ldr	r5, [r4, #0]
 8004e02:	1961      	adds	r1, r4, r5
 8004e04:	428b      	cmp	r3, r1
 8004e06:	bf04      	itt	eq
 8004e08:	6819      	ldreq	r1, [r3, #0]
 8004e0a:	685b      	ldreq	r3, [r3, #4]
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	bf04      	itt	eq
 8004e10:	1949      	addeq	r1, r1, r5
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	6054      	str	r4, [r2, #4]
 8004e16:	e7c7      	b.n	8004da8 <_free_r+0x28>
 8004e18:	b003      	add	sp, #12
 8004e1a:	bd30      	pop	{r4, r5, pc}
 8004e1c:	2000009c 	.word	0x2000009c

08004e20 <_malloc_r>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	1ccd      	adds	r5, r1, #3
 8004e24:	f025 0503 	bic.w	r5, r5, #3
 8004e28:	3508      	adds	r5, #8
 8004e2a:	2d0c      	cmp	r5, #12
 8004e2c:	bf38      	it	cc
 8004e2e:	250c      	movcc	r5, #12
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	4606      	mov	r6, r0
 8004e34:	db01      	blt.n	8004e3a <_malloc_r+0x1a>
 8004e36:	42a9      	cmp	r1, r5
 8004e38:	d903      	bls.n	8004e42 <_malloc_r+0x22>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	2000      	movs	r0, #0
 8004e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e42:	f000 f87d 	bl	8004f40 <__malloc_lock>
 8004e46:	4921      	ldr	r1, [pc, #132]	; (8004ecc <_malloc_r+0xac>)
 8004e48:	680a      	ldr	r2, [r1, #0]
 8004e4a:	4614      	mov	r4, r2
 8004e4c:	b99c      	cbnz	r4, 8004e76 <_malloc_r+0x56>
 8004e4e:	4f20      	ldr	r7, [pc, #128]	; (8004ed0 <_malloc_r+0xb0>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b923      	cbnz	r3, 8004e5e <_malloc_r+0x3e>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4630      	mov	r0, r6
 8004e58:	f000 f862 	bl	8004f20 <_sbrk_r>
 8004e5c:	6038      	str	r0, [r7, #0]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f85d 	bl	8004f20 <_sbrk_r>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d123      	bne.n	8004eb2 <_malloc_r+0x92>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f86c 	bl	8004f4c <__malloc_unlock>
 8004e74:	e7e3      	b.n	8004e3e <_malloc_r+0x1e>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	1b5b      	subs	r3, r3, r5
 8004e7a:	d417      	bmi.n	8004eac <_malloc_r+0x8c>
 8004e7c:	2b0b      	cmp	r3, #11
 8004e7e:	d903      	bls.n	8004e88 <_malloc_r+0x68>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	441c      	add	r4, r3
 8004e84:	6025      	str	r5, [r4, #0]
 8004e86:	e004      	b.n	8004e92 <_malloc_r+0x72>
 8004e88:	6863      	ldr	r3, [r4, #4]
 8004e8a:	42a2      	cmp	r2, r4
 8004e8c:	bf0c      	ite	eq
 8004e8e:	600b      	streq	r3, [r1, #0]
 8004e90:	6053      	strne	r3, [r2, #4]
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 f85a 	bl	8004f4c <__malloc_unlock>
 8004e98:	f104 000b 	add.w	r0, r4, #11
 8004e9c:	1d23      	adds	r3, r4, #4
 8004e9e:	f020 0007 	bic.w	r0, r0, #7
 8004ea2:	1ac2      	subs	r2, r0, r3
 8004ea4:	d0cc      	beq.n	8004e40 <_malloc_r+0x20>
 8004ea6:	1a1b      	subs	r3, r3, r0
 8004ea8:	50a3      	str	r3, [r4, r2]
 8004eaa:	e7c9      	b.n	8004e40 <_malloc_r+0x20>
 8004eac:	4622      	mov	r2, r4
 8004eae:	6864      	ldr	r4, [r4, #4]
 8004eb0:	e7cc      	b.n	8004e4c <_malloc_r+0x2c>
 8004eb2:	1cc4      	adds	r4, r0, #3
 8004eb4:	f024 0403 	bic.w	r4, r4, #3
 8004eb8:	42a0      	cmp	r0, r4
 8004eba:	d0e3      	beq.n	8004e84 <_malloc_r+0x64>
 8004ebc:	1a21      	subs	r1, r4, r0
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f82e 	bl	8004f20 <_sbrk_r>
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d1dd      	bne.n	8004e84 <_malloc_r+0x64>
 8004ec8:	e7cf      	b.n	8004e6a <_malloc_r+0x4a>
 8004eca:	bf00      	nop
 8004ecc:	2000009c 	.word	0x2000009c
 8004ed0:	200000a0 	.word	0x200000a0

08004ed4 <_realloc_r>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	4607      	mov	r7, r0
 8004ed8:	4614      	mov	r4, r2
 8004eda:	460e      	mov	r6, r1
 8004edc:	b921      	cbnz	r1, 8004ee8 <_realloc_r+0x14>
 8004ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	f7ff bf9c 	b.w	8004e20 <_malloc_r>
 8004ee8:	b922      	cbnz	r2, 8004ef4 <_realloc_r+0x20>
 8004eea:	f7ff ff49 	bl	8004d80 <_free_r>
 8004eee:	4625      	mov	r5, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef4:	f000 f830 	bl	8004f58 <_malloc_usable_size_r>
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d20f      	bcs.n	8004f1c <_realloc_r+0x48>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4638      	mov	r0, r7
 8004f00:	f7ff ff8e 	bl	8004e20 <_malloc_r>
 8004f04:	4605      	mov	r5, r0
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d0f2      	beq.n	8004ef0 <_realloc_r+0x1c>
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	f7ff ff0f 	bl	8004d30 <memcpy>
 8004f12:	4631      	mov	r1, r6
 8004f14:	4638      	mov	r0, r7
 8004f16:	f7ff ff33 	bl	8004d80 <_free_r>
 8004f1a:	e7e9      	b.n	8004ef0 <_realloc_r+0x1c>
 8004f1c:	4635      	mov	r5, r6
 8004f1e:	e7e7      	b.n	8004ef0 <_realloc_r+0x1c>

08004f20 <_sbrk_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_sbrk_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fb fd46 	bl	80009bc <_sbrk>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_sbrk_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_sbrk_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000214 	.word	0x20000214

08004f40 <__malloc_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__malloc_lock+0x8>)
 8004f42:	f000 b811 	b.w	8004f68 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	2000021c 	.word	0x2000021c

08004f4c <__malloc_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__malloc_unlock+0x8>)
 8004f4e:	f000 b80c 	b.w	8004f6a <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	2000021c 	.word	0x2000021c

08004f58 <_malloc_usable_size_r>:
 8004f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5c:	1f18      	subs	r0, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfbc      	itt	lt
 8004f62:	580b      	ldrlt	r3, [r1, r0]
 8004f64:	18c0      	addlt	r0, r0, r3
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_acquire_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <__retarget_lock_release_recursive>:
 8004f6a:	4770      	bx	lr

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
