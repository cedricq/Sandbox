
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006134  08006134  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006134  08006134  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000074  080061b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080061b4  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011907  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b05  00000000  00000000  000319ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca98  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ca  00000000  00000000  00052b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6454  00000000  00000000  000643da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a82e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef4  00000000  00000000  0010a884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006058 	.word	0x08006058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006058 	.word	0x08006058

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <serial_add_char>:

static Buffer BufferSerialInstance;


void serial_add_char(unsigned char c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	BufferSerialInstance.AddChar(c);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4619      	mov	r1, r3
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <serial_add_char+0x1c>)
 8000290:	f000 f81e 	bl	80002d0 <_ZN6Buffer7AddCharEh>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000090 	.word	0x20000090

080002a0 <_ZN6BufferC1Ev>:


Buffer::Buffer()
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4618      	mov	r0, r3
 80002ac:	23ff      	movs	r3, #255	; 0xff
 80002ae:	461a      	mov	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f005 fa9b 	bl	80057ec <memset>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
{}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZN6Buffer7AddCharEh>:

void Buffer::AddChar(unsigned char c)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	buf[index_in] = c;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	78f9      	ldrb	r1, [r7, #3]
 80002e6:	54d1      	strb	r1, [r2, r3]
	index_in++;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	index_in = index_in % BUFF_SIZE;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <_ZN6Buffer7AddCharEh+0x50>)
 80002fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000302:	09da      	lsrs	r2, r3, #7
 8000304:	4613      	mov	r3, r2
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	1a9b      	subs	r3, r3, r2
 800030a:	1aca      	subs	r2, r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	80808081 	.word	0x80808081

08000324 <_Z41__static_initialization_and_destruction_0ii>:
	{
		c = ReadChar();
		str[i] = c;
		i++;
	}
}
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d107      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033a:	4293      	cmp	r3, r2
 800033c:	d102      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Buffer BufferSerialInstance;
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000340:	f7ff ffae 	bl	80002a0 <_ZN6BufferC1Ev>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090

08000350 <_GLOBAL__sub_I_serial_add_char>:
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
 8000354:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ffe3 	bl	8000324 <_Z41__static_initialization_and_destruction_0ii>
 800035e:	bd80      	pop	{r7, pc}

08000360 <SF04_CalcCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 800036c:	23ff      	movs	r3, #255	; 0xff
 800036e:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000370:	2300      	movs	r3, #0
 8000372:	73bb      	strb	r3, [r7, #14]
 8000374:	e021      	b.n	80003ba <SF04_CalcCrc+0x5a>
    {
        crc ^= (data[byteCtr]);
 8000376:	7bbb      	ldrb	r3, [r7, #14]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	4053      	eors	r3, r2
 8000382:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000384:	2308      	movs	r3, #8
 8000386:	737b      	strb	r3, [r7, #13]
 8000388:	e011      	b.n	80003ae <SF04_CalcCrc+0x4e>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 800038a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800038e:	2b00      	cmp	r3, #0
 8000390:	da07      	bge.n	80003a2 <SF04_CalcCrc+0x42>
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	b25b      	sxtb	r3, r3
 8000398:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800039c:	b25b      	sxtb	r3, r3
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e002      	b.n	80003a8 <SF04_CalcCrc+0x48>
            else crc = (crc << 1);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 80003a8:	7b7b      	ldrb	r3, [r7, #13]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	737b      	strb	r3, [r7, #13]
 80003ae:	7b7b      	ldrb	r3, [r7, #13]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1ea      	bne.n	800038a <SF04_CalcCrc+0x2a>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 80003b4:	7bbb      	ldrb	r3, [r7, #14]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73bb      	strb	r3, [r7, #14]
 80003ba:	7bba      	ldrb	r2, [r7, #14]
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3d9      	bcc.n	8000376 <SF04_CalcCrc+0x16>
        }
    }
    return crc;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(huart, UART3_rxBuffer, 1, 100);
 80003d8:	2364      	movs	r3, #100	; 0x64
 80003da:	2201      	movs	r2, #1
 80003dc:	4908      	ldr	r1, [pc, #32]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f004 fa86 	bl	80048f0 <HAL_UART_Transmit>
    serial_add_char(UART3_rxBuffer[0]);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff49 	bl	8000280 <serial_add_char>
    HAL_UART_Receive_IT(huart, UART3_rxBuffer, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	4903      	ldr	r1, [pc, #12]	; (8000400 <HAL_UART_RxCpltCallback+0x30>)
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f004 fb10 	bl	8004a18 <HAL_UART_Receive_IT>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000027c 	.word	0x2000027c

08000404 <printVal>:
{
  // RX Done .. Do Something!
}

void printVal(int out, int a, int b, int c, int d, int e)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b098      	sub	sp, #96	; 0x60
 8000408:	af04      	add	r7, sp, #16
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	603b      	str	r3, [r7, #0]
    char buffer [60];
    sprintf (buffer, "%d %d %d %d %d %d\n", out, a, b, c, d, e);
 8000412:	f107 0014 	add.w	r0, r7, #20
 8000416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000418:	9303      	str	r3, [sp, #12]
 800041a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800041c:	9302      	str	r3, [sp, #8]
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	490a      	ldr	r1, [pc, #40]	; (8000454 <printVal+0x50>)
 800042c:	f005 f9e6 	bl	80057fc <siprintf>
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fecb 	bl	80001d0 <strlen>
 800043a:	4603      	mov	r3, r0
 800043c:	b29a      	uxth	r2, r3
 800043e:	f107 0114 	add.w	r1, r7, #20
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <printVal+0x54>)
 8000446:	f004 fa53 	bl	80048f0 <HAL_UART_Transmit>
}
 800044a:	bf00      	nop
 800044c:	3750      	adds	r7, #80	; 0x50
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	08006070 	.word	0x08006070
 8000458:	200001ac 	.word	0x200001ac

0800045c <Tick_1ms>:
	buffer [size] = '\0';
	HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
}

void Tick_1ms()
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
    //I2C reading
    //HAL_I2C_Master_Transmit_IT (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t * pData, uint16_t Size);
    //HAL_I2C_Master_Receive_IT (&hi2c1, 0x2E, rcv_txt, 2);
    //HAL_I2C_IsDeviceReady (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);

}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b5b0      	push	{r4, r5, r7, lr}
 800046e:	b094      	sub	sp, #80	; 0x50
 8000470:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f000 fe1f 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 f92b 	bl	80006d0 <SystemClock_Config>
  // +++ Comment HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); --> No interrupt required

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 fafd 	bl	8000a78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800047e:	f000 fa81 	bl	8000984 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000482:	f000 fadf 	bl	8000a44 <MX_DMA_Init>
  MX_ADC1_Init();
 8000486:	f000 f983 	bl	8000790 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800048a:	f000 faab 	bl	80009e4 <MX_USART3_UART_Init>
  MX_DAC_Init();
 800048e:	f000 fa05 	bl	800089c <MX_DAC_Init>
  MX_I2C1_Init();
 8000492:	f000 fa37 	bl	8000904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // !!! Start UART before ADC  !!! ////////
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	497e      	ldr	r1, [pc, #504]	; (8000694 <main+0x228>)
 800049a:	487f      	ldr	r0, [pc, #508]	; (8000698 <main+0x22c>)
 800049c:	f004 fabc 	bl	8004a18 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80004a0:	2204      	movs	r2, #4
 80004a2:	497e      	ldr	r1, [pc, #504]	; (800069c <main+0x230>)
 80004a4:	487e      	ldr	r0, [pc, #504]	; (80006a0 <main+0x234>)
 80004a6:	f001 f833 	bl	8001510 <HAL_ADC_Start_DMA>

  uint8_t test[3] = {0xBE, 0xEF, 0x00};
 80004aa:	4a7e      	ldr	r2, [pc, #504]	; (80006a4 <main+0x238>)
 80004ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b0:	6812      	ldr	r2, [r2, #0]
 80004b2:	4611      	mov	r1, r2
 80004b4:	8019      	strh	r1, [r3, #0]
 80004b6:	3302      	adds	r3, #2
 80004b8:	0c12      	lsrs	r2, r2, #16
 80004ba:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SF04_CalcCrc (test, 2);
 80004bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004c0:	2102      	movs	r1, #2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff4c 	bl	8000360 <SF04_CalcCrc>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  test[2] = crc;
 80004ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  uint8_t cmd[3] = {0x36, 0x08, 0x00};
 80004d6:	4a74      	ldr	r2, [pc, #464]	; (80006a8 <main+0x23c>)
 80004d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	4611      	mov	r1, r2
 80004e0:	8019      	strh	r1, [r3, #0]
 80004e2:	3302      	adds	r3, #2
 80004e4:	0c12      	lsrs	r2, r2, #16
 80004e6:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd, 2);
 80004e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004ec:	2102      	movs	r1, #2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff36 	bl	8000360 <SF04_CalcCrc>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  cmd[2] = crc;
 80004fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80004fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  uint8_t cmd_status[3] = {0xE1, 0x02, 0x00};
 8000502:	4a6a      	ldr	r2, [pc, #424]	; (80006ac <main+0x240>)
 8000504:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	4611      	mov	r1, r2
 800050c:	8019      	strh	r1, [r3, #0]
 800050e:	3302      	adds	r3, #2
 8000510:	0c12      	lsrs	r2, r2, #16
 8000512:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd_status, 2);
 8000514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000518:	2102      	movs	r1, #2
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff20 	bl	8000360 <SF04_CalcCrc>
 8000520:	4603      	mov	r3, r0
 8000522:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  cmd_status[2] = crc;
 8000526:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800052a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

  HAL_Delay(200);
 800052e:	20c8      	movs	r0, #200	; 0xc8
 8000530:	f000 fe26 	bl	8001180 <HAL_Delay>

  uint8_t i2c_state = I2C_INIT;
 8000534:	2300      	movs	r3, #0
 8000536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer [50];
  while (1)
  {
	  HAL_Delay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f000 fe20 	bl	8001180 <HAL_Delay>

	  if (i2c_state == I2C_INIT)
 8000540:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000544:	2b00      	cmp	r3, #0
 8000546:	d134      	bne.n	80005b2 <main+0x146>
	  {
	      uint8_t status = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	      HAL_Delay(100);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 fe16 	bl	8001180 <HAL_Delay>
          status = HAL_I2C_Master_Transmit(&hi2c1, SFM3219_ADDRESS<<1, cmd, 3, 1000);
 8000554:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2303      	movs	r3, #3
 8000560:	215c      	movs	r1, #92	; 0x5c
 8000562:	4853      	ldr	r0, [pc, #332]	; (80006b0 <main+0x244>)
 8000564:	f002 fa2a 	bl	80029bc <HAL_I2C_Master_Transmit>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
          if (status == HAL_OK)
 800056e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000572:	2b00      	cmp	r3, #0
 8000574:	d106      	bne.n	8000584 <main+0x118>
          {
              i2c_cnt_errors = 0;
 8000576:	4b4f      	ldr	r3, [pc, #316]	; (80006b4 <main+0x248>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
              i2c_state = I2C_READ;
 800057c:	2301      	movs	r3, #1
 800057e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000582:	e060      	b.n	8000646 <main+0x1da>
          }
          else
          {
              i2c_cnt_errors += 1;
 8000584:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <main+0x248>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b49      	ldr	r3, [pc, #292]	; (80006b4 <main+0x248>)
 800058e:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Init Failure\n\0");
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4949      	ldr	r1, [pc, #292]	; (80006b8 <main+0x24c>)
 8000594:	4618      	mov	r0, r3
 8000596:	f005 f931 	bl	80057fc <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe17 	bl	80001d0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	483b      	ldr	r0, [pc, #236]	; (8000698 <main+0x22c>)
 80005ac:	f004 f9a0 	bl	80048f0 <HAL_UART_Transmit>
 80005b0:	e049      	b.n	8000646 <main+0x1da>
          }
	  }
	  else if (i2c_state == I2C_READ)
 80005b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d145      	bne.n	8000646 <main+0x1da>
	  {
	      uint8_t status = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	      uint8_t i2c_rcv_buff[3] = {0x00, 0x00, 0x00};
 80005c0:	4a3e      	ldr	r2, [pc, #248]	; (80006bc <main+0x250>)
 80005c2:	463b      	mov	r3, r7
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	4611      	mov	r1, r2
 80005c8:	8019      	strh	r1, [r3, #0]
 80005ca:	3302      	adds	r3, #2
 80005cc:	0c12      	lsrs	r2, r2, #16
 80005ce:	701a      	strb	r2, [r3, #0]
	      status = HAL_I2C_Master_Receive(&hi2c1, SFM3219_ADDRESS<<1, i2c_rcv_buff, 3, 1000);
 80005d0:	463a      	mov	r2, r7
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2303      	movs	r3, #3
 80005da:	215c      	movs	r1, #92	; 0x5c
 80005dc:	4834      	ldr	r0, [pc, #208]	; (80006b0 <main+0x244>)
 80005de:	f002 fae1 	bl	8002ba4 <HAL_I2C_Master_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	      if (status == HAL_OK)
 80005e8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <main+0x198>
          {
	          rawQout = ((uint32_t)i2c_rcv_buff[0])<<8 | i2c_rcv_buff[0];
 80005f0:	783b      	ldrb	r3, [r7, #0]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	783a      	ldrb	r2, [r7, #0]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	4a31      	ldr	r2, [pc, #196]	; (80006c0 <main+0x254>)
 80005fa:	6013      	str	r3, [r2, #0]
	          i2c_cnt_errors = 0;
 80005fc:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <main+0x248>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e019      	b.n	8000638 <main+0x1cc>
          }
          else
          {
              rawQout = 0xFFFFFF;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <main+0x254>)
 8000606:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800060a:	601a      	str	r2, [r3, #0]
              i2c_cnt_errors += 1;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <main+0x248>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <main+0x248>)
 8000616:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Reading Failure\n\0");
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	492a      	ldr	r1, [pc, #168]	; (80006c4 <main+0x258>)
 800061c:	4618      	mov	r0, r3
 800061e:	f005 f8ed 	bl	80057fc <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fdd3 	bl	80001d0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	1d39      	adds	r1, r7, #4
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0x22c>)
 8000634:	f004 f95c 	bl	80048f0 <HAL_UART_Transmit>
          }
	      if (i2c_cnt_errors > 20)
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <main+0x248>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b14      	cmp	r3, #20
 800063e:	d902      	bls.n	8000646 <main+0x1da>
	      {
	          i2c_state = I2C_INIT;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	      }
	  }

	  cmd_target += 10;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <main+0x25c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	330a      	adds	r3, #10
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <main+0x25c>)
 800064e:	6013      	str	r3, [r2, #0]
	  cmd_target = cmd_target % 4096;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <main+0x25c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <main+0x25c>)
 800065a:	6013      	str	r3, [r2, #0]
	  DAC1->DHR12R1 = cmd_target;
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <main+0x260>)
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <main+0x25c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6093      	str	r3, [r2, #8]

	  printVal(cmd_target, adc_buf[0], adc_buf[1], adc_buf[2], adc_buf[3], rawQout);
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <main+0x25c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <main+0x230>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <main+0x230>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	461c      	mov	r4, r3
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <main+0x230>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	461d      	mov	r5, r3
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <main+0x230>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	461a      	mov	r2, r3
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0x254>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	462b      	mov	r3, r5
 800068c:	4622      	mov	r2, r4
 800068e:	f7ff feb9 	bl	8000404 <printVal>
	  HAL_Delay(10);
 8000692:	e752      	b.n	800053a <main+0xce>
 8000694:	2000027c 	.word	0x2000027c
 8000698:	200001ac 	.word	0x200001ac
 800069c:	20000424 	.word	0x20000424
 80006a0:	2000037c 	.word	0x2000037c
 80006a4:	080060b8 	.word	0x080060b8
 80006a8:	080060bc 	.word	0x080060bc
 80006ac:	080060c0 	.word	0x080060c0
 80006b0:	20000230 	.word	0x20000230
 80006b4:	20000198 	.word	0x20000198
 80006b8:	08006084 	.word	0x08006084
 80006bc:	080060c4 	.word	0x080060c4
 80006c0:	2000019c 	.word	0x2000019c
 80006c4:	0800609c 	.word	0x0800609c
 80006c8:	20000000 	.word	0x20000000
 80006cc:	40007400 	.word	0x40007400

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	; 0x70
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006da:	2228      	movs	r2, #40	; 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 f884 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 f876 	bl	80057ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000700:	2303      	movs	r3, #3
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2310      	movs	r3, #16
 8000714:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000720:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000724:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fdc2 	bl	80032b4 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000736:	f000 fa1b 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fcb4 	bl	80040c4 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000762:	f000 fa05 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800076e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4618      	mov	r0, r3
 8000778:	f003 feda 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000782:	f000 f9f5 	bl	8000b70 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3770      	adds	r7, #112	; 0x70
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a6:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <MX_ADC1_Init+0x108>)
 80007a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <MX_ADC1_Init+0x108>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b4:	4b38      	ldr	r3, [pc, #224]	; (8000898 <MX_ADC1_Init+0x108>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ba:	4b37      	ldr	r3, [pc, #220]	; (8000898 <MX_ADC1_Init+0x108>)
 80007bc:	2201      	movs	r2, #1
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c0:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_ADC1_Init+0x108>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <MX_ADC1_Init+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_ADC1_Init+0x108>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_ADC1_Init+0x108>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_ADC1_Init+0x108>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_ADC1_Init+0x108>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_ADC1_Init+0x108>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_ADC1_Init+0x108>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_ADC1_Init+0x108>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_ADC1_Init+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000800:	4825      	ldr	r0, [pc, #148]	; (8000898 <MX_ADC1_Init+0x108>)
 8000802:	f000 fcff 	bl	8001204 <HAL_ADC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800080c:	f000 f9b0 	bl	8000b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000810:	2301      	movs	r3, #1
 8000812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2301      	movs	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800081c:	2303      	movs	r3, #3
 800081e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_ADC1_Init+0x108>)
 800082e:	f000 ff0b 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000838:	f000 f99a 	bl	8000b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800083c:	2302      	movs	r3, #2
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000840:	2302      	movs	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_ADC1_Init+0x108>)
 800084a:	f000 fefd 	bl	8001648 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000854:	f000 f98c 	bl	8000b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000858:	2306      	movs	r3, #6
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800085c:	2303      	movs	r3, #3
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ADC1_Init+0x108>)
 8000866:	f000 feef 	bl	8001648 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000870:	f000 f97e 	bl	8000b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000874:	2307      	movs	r3, #7
 8000876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000878:	2304      	movs	r3, #4
 800087a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_ADC1_Init+0x108>)
 8000882:	f000 fee1 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800088c:	f000 f970 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000037c 	.word	0x2000037c

0800089c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_DAC_Init+0x5c>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_DAC_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_DAC_Init+0x5c>)
 80008b4:	f001 fbb3 	bl	800201e <HAL_DAC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80008be:	f000 f957 	bl	8000b70 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	4619      	mov	r1, r3
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_DAC_Init+0x5c>)
 80008d2:	f001 fbfd 	bl	80020d0 <HAL_DAC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80008dc:	f000 f948 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = cmd_target;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <MX_DAC_Init+0x60>)
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_DAC_Init+0x64>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6093      	str	r3, [r2, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_DAC_Init+0x5c>)
 80008ec:	f001 fbb9 	bl	8002062 <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200003cc 	.word	0x200003cc
 80008fc:	40007400 	.word	0x40007400
 8000900:	20000000 	.word	0x20000000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f001 ffac 	bl	800289c <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 f911 	bl	8000b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f002 fc17 	bl	8003184 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 f908 	bl	8000b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f002 fc59 	bl	800321a <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f8ff 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000230 	.word	0x20000230
 800097c:	40005400 	.word	0x40005400
 8000980:	2000090e 	.word	0x2000090e

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f003 ff44 	bl	8004854 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f8cd 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000434 	.word	0x20000434
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART3_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART3_UART_Init+0x58>)
 8000a28:	f003 ff14 	bl	8004854 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f89d 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200001ac 	.word	0x200001ac
 8000a40:	40004800 	.word	0x40004800

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_DMA_Init+0x30>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <MX_DMA_Init+0x30>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_DMA_Init+0x30>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200b      	movs	r0, #11
 8000a68:	f001 faa3 	bl	8001fb2 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_GPIO_Init+0xe8>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	481b      	ldr	r0, [pc, #108]	; (8000b64 <MX_GPIO_Init+0xec>)
 8000af6:	f001 feb9 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_GPIO_Init+0xf0>)
 8000b00:	f001 feb4 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_GPIO_Init+0xf0>)
 8000b1a:	f001 fd35 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xec>)
 8000b38:	f001 fd26 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_GPIO_Init+0xf0>)
 8000b54:	f001 fd18 	bl	8002588 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	10210000 	.word	0x10210000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb2:	2007      	movs	r0, #7
 8000bb4:	f001 f9f2 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be4:	d165      	bne.n	8000cb2 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_ADC_MspInit+0xf8>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <HAL_ADC_MspInit+0xfc>)
 8000c42:	f001 fca1 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c46:	2303      	movs	r3, #3
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 fc94 	bl	8002588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0x104>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c94:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c96:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000c98:	f001 fa67 	bl	800216a <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000ca2:	f7ff ff65 	bl	8000b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <HAL_ADC_MspInit+0x100>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	200003e0 	.word	0x200003e0
 8000cc8:	40020008 	.word	0x40020008

08000ccc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <HAL_DAC_MspInit+0x74>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d124      	bne.n	8000d38 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_DAC_MspInit+0x78>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f001 fc28 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40007400 	.word	0x40007400
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2a      	ldr	r2, [pc, #168]	; (8000e10 <HAL_I2C_MspInit+0xc8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d14d      	bne.n	8000e06 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dac:	2304      	movs	r3, #4
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f001 fbe5 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <HAL_I2C_MspInit+0xd0>)
 8000dda:	f001 fbd5 	bl	8002588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_I2C_MspInit+0xcc>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201f      	movs	r0, #31
 8000dfc:	f001 f8d9 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e00:	201f      	movs	r0, #31
 8000e02:	f001 f8f2 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_UART_MspInit+0xfc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d131      	bne.n	8000ea2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a36      	ldr	r2, [pc, #216]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 fb7c 	bl	8002588 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2026      	movs	r0, #38	; 0x26
 8000e96:	f001 f88c 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e9a:	2026      	movs	r0, #38	; 0x26
 8000e9c:	f001 f8a5 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea0:	e035      	b.n	8000f0e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_UART_MspInit+0x104>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d130      	bne.n	8000f0e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb6:	61d3      	str	r3, [r2, #28]
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	6153      	str	r3, [r2, #20]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_UART_MspInit+0x100>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000edc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <HAL_UART_MspInit+0x108>)
 8000efa:	f001 fb45 	bl	8002588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2027      	movs	r0, #39	; 0x27
 8000f04:	f001 f855 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f08:	2027      	movs	r0, #39	; 0x27
 8000f0a:	f001 f86e 	bl	8001fea <HAL_NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40004800 	.word	0x40004800
 8000f24:	48000400 	.word	0x48000400

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f8e4 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Tick_1ms();
 8000f78:	f7ff fa70 	bl	800045c <Tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Channel1_IRQHandler+0x10>)
 8000f86:	f001 fa0d 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200003e0 	.word	0x200003e0

08000f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <I2C1_EV_IRQHandler+0x10>)
 8000f9a:	f001 fef9 	bl	8002d90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000230 	.word	0x20000230

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f003 fd71 	bl	8004a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000434 	.word	0x20000434

08000fbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART3_IRQHandler+0x10>)
 8000fc2:	f003 fd67 	bl	8004a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001ac 	.word	0x200001ac

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f004 fbca 	bl	8005798 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20004000 	.word	0x20004000
 8001030:	00000400 	.word	0x00000400
 8001034:	200001a0 	.word	0x200001a0
 8001038:	200004d0 	.word	0x200004d0

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f004 fb89 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001092:	f7ff f9eb 	bl	800046c <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010a4:	08006140 	.word	0x08006140
  ldr r2, =_sbss
 80010a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010ac:	200004cc 	.word	0x200004cc

080010b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 ff69 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fd54 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 ff81 	bl	8002006 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 ff49 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c
 8001164:	200004b8 	.word	0x200004b8

08001168 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;  
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200004b8 	.word	0x200004b8

08001180 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09a      	sub	sp, #104	; 0x68
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e169      	b.n	80014f8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	d176      	bne.n	8001324 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d152      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fcb3 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13b      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fd65 	bl	8001d3c <ADC_Disable>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d12f      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
 8001284:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001288:	2b00      	cmp	r3, #0
 800128a:	d12b      	bne.n	80012e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001294:	f023 0302 	bic.w	r3, r3, #2
 8001298:	f043 0202 	orr.w	r2, r3, #2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012c0:	4b8f      	ldr	r3, [pc, #572]	; (8001500 <HAL_ADC_Init+0x2fc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a8f      	ldr	r2, [pc, #572]	; (8001504 <HAL_ADC_Init+0x300>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9a      	lsrs	r2, r3, #18
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d6:	e002      	b.n	80012de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f9      	bne.n	80012d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001300:	d110      	bne.n	8001324 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f023 0312 	bic.w	r3, r3, #18
 800130a:	f043 0210 	orr.w	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 80d6 	bne.w	80014de <HAL_ADC_Init+0x2da>
 8001332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80d1 	bne.w	80014de <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80c9 	bne.w	80014de <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001354:	f043 0202 	orr.w	r2, r3, #2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_ADC_Init+0x304>)
 800135e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_ADC_Init+0x180>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_Init+0x180>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_ADC_Init+0x182>
 8001384:	2300      	movs	r3, #0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d11c      	bne.n	80013c4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800138a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800138c:	2b00      	cmp	r3, #0
 800138e:	d010      	beq.n	80013b2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_ADC_Init+0x1a8>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Init+0x1a8>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_ADC_Init+0x1aa>
 80013ac:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d108      	bne.n	80013c4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	431a      	orrs	r2, r3
 80013c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e5b      	ldrb	r3, [r3, #25]
 80013c8:	035b      	lsls	r3, r3, #13
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ce:	2a01      	cmp	r2, #1
 80013d0:	d002      	beq.n	80013d8 <HAL_ADC_Init+0x1d4>
 80013d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d6:	e000      	b.n	80013da <HAL_ADC_Init+0x1d6>
 80013d8:	2200      	movs	r2, #0
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ea:	4313      	orrs	r3, r2
 80013ec:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d11b      	bne.n	8001430 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e5b      	ldrb	r3, [r3, #25]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	3b01      	subs	r3, #1
 8001406:	045a      	lsls	r2, r3, #17
 8001408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800140a:	4313      	orrs	r3, r2
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	663b      	str	r3, [r7, #96]	; 0x60
 8001412:	e00d      	b.n	8001430 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800141c:	f043 0220 	orr.w	r2, r3, #32
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	2b01      	cmp	r3, #1
 8001436:	d007      	beq.n	8001448 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	4313      	orrs	r3, r2
 8001442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001444:	4313      	orrs	r3, r2
 8001446:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7e1b      	ldrb	r3, [r3, #24]
 800146e:	039a      	lsls	r2, r3, #14
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4313      	orrs	r3, r2
 800147a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800147c:	4313      	orrs	r3, r2
 800147e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_ADC_Init+0x308>)
 8001488:	4013      	ands	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001490:	430b      	orrs	r3, r1
 8001492:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10c      	bne.n	80014b6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f023 010f 	bic.w	r1, r3, #15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	1e5a      	subs	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
 80014b4:	e007      	b.n	80014c6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 020f 	bic.w	r2, r2, #15
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f023 0303 	bic.w	r3, r3, #3
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
 80014dc:	e00a      	b.n	80014f4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f023 0312 	bic.w	r3, r3, #18
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014ee:	2301      	movs	r3, #1
 80014f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3768      	adds	r7, #104	; 0x68
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000004 	.word	0x20000004
 8001504:	431bde83 	.word	0x431bde83
 8001508:	50000300 	.word	0x50000300
 800150c:	fff0c007 	.word	0xfff0c007

08001510 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d17e      	bne.n	800162c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_ADC_Start_DMA+0x2c>
 8001538:	2302      	movs	r3, #2
 800153a:	e07a      	b.n	8001632 <HAL_ADC_Start_DMA+0x122>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fb9b 	bl	8001c80 <ADC_Enable>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d166      	bne.n	8001622 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159e:	d106      	bne.n	80015ae <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f023 0206 	bic.w	r2, r3, #6
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_ADC_Start_DMA+0x12c>)
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_ADC_Start_DMA+0x130>)
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_ADC_Start_DMA+0x134>)
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	221c      	movs	r2, #28
 80015da:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0210 	orr.w	r2, r2, #16
 80015ea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3340      	adds	r3, #64	; 0x40
 8001606:	4619      	mov	r1, r3
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f000 fdf4 	bl	80021f8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0204 	orr.w	r2, r2, #4
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	e006      	b.n	8001630 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800162a:	e001      	b.n	8001630 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800162c:	2302      	movs	r3, #2
 800162e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001630:	7dfb      	ldrb	r3, [r7, #23]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08001bb5 	.word	0x08001bb5
 8001640:	08001c2f 	.word	0x08001c2f
 8001644:	08001c4b 	.word	0x08001c4b

08001648 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001648:	b480      	push	{r7}
 800164a:	b09b      	sub	sp, #108	; 0x6c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADC_ConfigChannel+0x22>
 8001666:	2302      	movs	r3, #2
 8001668:	e299      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x556>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 827d 	bne.w	8001b7c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b04      	cmp	r3, #4
 8001688:	d81c      	bhi.n	80016c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	461a      	mov	r2, r3
 800169e:	231f      	movs	r3, #31
 80016a0:	4093      	lsls	r3, r2
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4019      	ands	r1, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
 80016c2:	e063      	b.n	800178c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	d81e      	bhi.n	800170a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3b1e      	subs	r3, #30
 80016e0:	221f      	movs	r2, #31
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4019      	ands	r1, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	3b1e      	subs	r3, #30
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
 8001708:	e040      	b.n	800178c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b0e      	cmp	r3, #14
 8001710:	d81e      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3b3c      	subs	r3, #60	; 0x3c
 8001726:	221f      	movs	r2, #31
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	4019      	ands	r1, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	3b3c      	subs	r3, #60	; 0x3c
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
 800174e:	e01d      	b.n	800178c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	3b5a      	subs	r3, #90	; 0x5a
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	4019      	ands	r1, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	3b5a      	subs	r3, #90	; 0x5a
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80e5 	bne.w	8001966 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b09      	cmp	r3, #9
 80017a2:	d91c      	bls.n	80017de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6999      	ldr	r1, [r3, #24]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	3b1e      	subs	r3, #30
 80017b6:	2207      	movs	r2, #7
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	4019      	ands	r1, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6898      	ldr	r0, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	3b1e      	subs	r3, #30
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	619a      	str	r2, [r3, #24]
 80017dc:	e019      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6959      	ldr	r1, [r3, #20]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4019      	ands	r1, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6898      	ldr	r0, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	fa00 f203 	lsl.w	r2, r0, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	3b01      	subs	r3, #1
 8001830:	2b03      	cmp	r3, #3
 8001832:	d84f      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x28c>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_ADC_ConfigChannel+0x1f4>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800186f 	.word	0x0800186f
 8001844:	08001891 	.word	0x08001891
 8001848:	080018b3 	.word	0x080018b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001852:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <HAL_ADC_ConfigChannel+0x470>)
 8001854:	4013      	ands	r3, r2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	0691      	lsls	r1, r2, #26
 800185c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800185e:	430a      	orrs	r2, r1
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800186c:	e07e      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <HAL_ADC_ConfigChannel+0x470>)
 8001876:	4013      	ands	r3, r2
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	0691      	lsls	r1, r2, #26
 800187e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001880:	430a      	orrs	r2, r1
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800188c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800188e:	e06d      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_ADC_ConfigChannel+0x470>)
 8001898:	4013      	ands	r3, r2
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	0691      	lsls	r1, r2, #26
 80018a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a2:	430a      	orrs	r2, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018ae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b0:	e05c      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018b8:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_ADC_ConfigChannel+0x470>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	0691      	lsls	r1, r2, #26
 80018c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c4:	430a      	orrs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d2:	e04b      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	069b      	lsls	r3, r3, #26
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	429a      	cmp	r2, r3
 800190a:	d107      	bne.n	800191c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800191a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	069b      	lsls	r3, r3, #26
 800192c:	429a      	cmp	r2, r3
 800192e:	d107      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800193e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	429a      	cmp	r2, r3
 8001952:	d10a      	bne.n	800196a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001962:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001964:	e001      	b.n	800196a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001966:	bf00      	nop
 8001968:	e000      	b.n	800196c <HAL_ADC_ConfigChannel+0x324>
      break;
 800196a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_ADC_ConfigChannel+0x344>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x344>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_ADC_ConfigChannel+0x346>
 800198c:	2300      	movs	r3, #0
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 80ff 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d00f      	beq.n	80019bc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019ba:	e049      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b09      	cmp	r3, #9
 80019dc:	d91c      	bls.n	8001a18 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6999      	ldr	r1, [r3, #24]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	3b1b      	subs	r3, #27
 80019f0:	2207      	movs	r2, #7
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4019      	ands	r1, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6898      	ldr	r0, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	3b1b      	subs	r3, #27
 8001a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	619a      	str	r2, [r3, #24]
 8001a16:	e01b      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6959      	ldr	r1, [r3, #20]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4019      	ands	r1, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6898      	ldr	r0, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_ADC_ConfigChannel+0x474>)
 8001a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d014      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a6c:	2b11      	cmp	r3, #17
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	f040 8086 	bne.w	8001b92 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d17f      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x478>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x478>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e005      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x47a>
 8001ab6:	bf00      	nop
 8001ab8:	83fff000 	.word	0x83fff000
 8001abc:	50000300 	.word	0x50000300
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d150      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x4a0>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_ConfigChannel+0x4a2>
 8001ae8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d13c      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d11d      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x4ea>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afe:	d118      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_ADC_ConfigChannel+0x564>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_ADC_ConfigChannel+0x568>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9a      	lsrs	r2, r3, #18
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b30:	e02e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b11      	cmp	r3, #17
 8001b38:	d10b      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x50a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b50:	e01e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d11a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b66:	e013      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b7a:	e00a      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	376c      	adds	r7, #108	; 0x6c
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d126      	bne.n	8001c1c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d115      	bne.n	8001c14 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d111      	bne.n	8001c14 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff fad7 	bl	80011c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c1a:	e004      	b.n	8001c26 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff facd 	bl	80011dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fabd 	bl	80011f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d108      	bne.n	8001cac <ADC_Enable+0x2c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <ADC_Enable+0x2c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <ADC_Enable+0x2e>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13c      	bne.n	8001d2c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <ADC_Enable+0xb8>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e028      	b.n	8001d2e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cec:	f7ff fa3c 	bl	8001168 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cf2:	e014      	b.n	8001d1e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cf4:	f7ff fa38 	bl	8001168 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d90d      	bls.n	8001d1e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d1e3      	bne.n	8001cf4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	8000003f 	.word	0x8000003f

08001d3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <ADC_Disable+0x2c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <ADC_Disable+0x2c>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <ADC_Disable+0x2e>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030d 	and.w	r3, r3, #13
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10f      	bne.n	8001d9c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0202 	orr.w	r2, r2, #2
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2203      	movs	r2, #3
 8001d92:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f9e8 	bl	8001168 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d9a:	e022      	b.n	8001de2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01c      	b.n	8001df2 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001db8:	f7ff f9d6 	bl	8001168 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d90d      	bls.n	8001de2 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0210 	orr.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0201 	orr.w	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d0e3      	beq.n	8001db8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff8e 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff29 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff3e 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff8e 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5d 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff31 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e014      	b.n	800205a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	791b      	ldrb	r3, [r3, #4]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7fe fe43 	bl	8000ccc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	795b      	ldrb	r3, [r3, #5]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_DAC_Start+0x16>
 8002074:	2302      	movs	r3, #2
 8002076:	e025      	b.n	80020c4 <HAL_DAC_Start+0x62>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	409a      	lsls	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80020a2:	2b3c      	cmp	r3, #60	; 0x3c
 80020a4:	d107      	bne.n	80020b6 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	795b      	ldrb	r3, [r3, #5]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_DAC_ConfigChannel+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e036      	b.n	800215e <HAL_DAC_ConfigChannel+0x8e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2202      	movs	r2, #2
 80020fa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002104:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	22c0      	movs	r2, #192	; 0xc0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e037      	b.n	80021f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002196:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800219a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9b8 	bl	8002548 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}  
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_DMA_Start_IT+0x20>
 8002214:	2302      	movs	r3, #2
 8002216:	e04a      	b.n	80022ae <HAL_DMA_Start_IT+0xb6>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002226:	2b01      	cmp	r3, #1
 8002228:	d13a      	bne.n	80022a0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f94b 	bl	80024ea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 020e 	orr.w	r2, r2, #14
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e00f      	b.n	800228e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 020a 	orr.w	r2, r2, #10
 800227c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0204 	bic.w	r2, r2, #4
 800228c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e005      	b.n	80022ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
} 
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2204      	movs	r2, #4
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e020      	b.n	800231c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020e 	bic.w	r2, r2, #14
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2101      	movs	r1, #1
 8002304:	fa01 f202 	lsl.w	r2, r1, r2
 8002308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233a:	2b02      	cmp	r3, #2
 800233c:	d005      	beq.n	800234a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e027      	b.n	800239a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020e 	bic.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
    } 
  }
  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2204      	movs	r2, #4
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d024      	beq.n	8002416 <HAL_DMA_IRQHandler+0x72>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01f      	beq.n	8002416 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	2104      	movs	r1, #4
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d06a      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002414:	e065      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2202      	movs	r2, #2
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02c      	beq.n	8002480 <HAL_DMA_IRQHandler+0xdc>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d027      	beq.n	8002480 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 020a 	bic.w	r2, r2, #10
 800244c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2102      	movs	r1, #2
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d035      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800247e:	e030      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2208      	movs	r2, #8
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d028      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d023      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 020e 	bic.w	r2, r2, #14
 80024a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
    }
  }
}  
 80024e0:	e7ff      	b.n	80024e2 <HAL_DMA_IRQHandler+0x13e>
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b10      	cmp	r3, #16
 8002516:	d108      	bne.n	800252a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002528:	e007      	b.n	800253a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	60da      	str	r2, [r3, #12]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <DMA_CalcBaseAndBitshift+0x34>)
 8002558:	4413      	add	r3, r2
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <DMA_CalcBaseAndBitshift+0x38>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a06      	ldr	r2, [pc, #24]	; (8002584 <DMA_CalcBaseAndBitshift+0x3c>)
 800256c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	bffdfff8 	.word	0xbffdfff8
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e14e      	b.n	8002836 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8140 	beq.w	8002830 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d00b      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d007      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d130      	bne.n	8002632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002606:	2201      	movs	r2, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0201 	and.w	r2, r3, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0xea>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b12      	cmp	r3, #18
 8002670:	d123      	bne.n	80026ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	220f      	movs	r2, #15
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	6939      	ldr	r1, [r7, #16]
 80026b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 809a 	beq.w	8002830 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fc:	4b55      	ldr	r3, [pc, #340]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b52      	ldr	r3, [pc, #328]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1e0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a46      	ldr	r2, [pc, #280]	; (800285c <HAL_GPIO_Init+0x2d4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1dc>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a45      	ldr	r2, [pc, #276]	; (8002860 <HAL_GPIO_Init+0x2d8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1d8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_GPIO_Init+0x2dc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1d4>
 8002758:	2303      	movs	r3, #3
 800275a:	e006      	b.n	800276a <HAL_GPIO_Init+0x1e2>
 800275c:	2305      	movs	r3, #5
 800275e:	e004      	b.n	800276a <HAL_GPIO_Init+0x1e2>
 8002760:	2302      	movs	r3, #2
 8002762:	e002      	b.n	800276a <HAL_GPIO_Init+0x1e2>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_GPIO_Init+0x1e2>
 8002768:	2300      	movs	r3, #0
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	f002 0203 	and.w	r2, r2, #3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4093      	lsls	r3, r2
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800277a:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002788:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027ac:	4a2e      	ldr	r2, [pc, #184]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <HAL_GPIO_Init+0x2e0>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	f47f aea9 	bne.w	8002598 <HAL_GPIO_Init+0x10>
  }
}
 8002846:	bf00      	nop
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	48000c00 	.word	0x48000c00
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002888:	e002      	b.n	8002890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e081      	b.n	80029b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fa40 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e006      	b.n	8002924 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002922:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d104      	bne.n	8002936 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	ea42 0103 	orr.w	r1, r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69d9      	ldr	r1, [r3, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
 80029cc:	4613      	mov	r3, r2
 80029ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b20      	cmp	r3, #32
 80029da:	f040 80da 	bne.w	8002b92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_I2C_Master_Transmit+0x30>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0d3      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fbb8 	bl	8001168 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2319      	movs	r3, #25
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa00 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0be      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	; 0x21
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2210      	movs	r2, #16
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	893a      	ldrh	r2, [r7, #8]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2bff      	cmp	r3, #255	; 0xff
 8002a46:	d90e      	bls.n	8002a66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	8979      	ldrh	r1, [r7, #10]
 8002a56:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fb62 	bl	8003128 <I2C_TransferConfig>
 8002a64:	e06c      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	8979      	ldrh	r1, [r7, #10]
 8002a78:	4b48      	ldr	r3, [pc, #288]	; (8002b9c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fb51 	bl	8003128 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a86:	e05b      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f9fd 	bl	8002e8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e07b      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d034      	beq.n	8002b40 <HAL_I2C_Master_Transmit+0x184>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d130      	bne.n	8002b40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f98f 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e04d      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d90e      	bls.n	8002b20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	22ff      	movs	r2, #255	; 0xff
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	2300      	movs	r3, #0
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fb05 	bl	8003128 <I2C_TransferConfig>
 8002b1e:	e00f      	b.n	8002b40 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	8979      	ldrh	r1, [r7, #10]
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 faf4 	bl	8003128 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d19e      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f9dc 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e01a      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b72:	400b      	ands	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	80002000 	.word	0x80002000
 8002ba0:	fe00e800 	.word	0xfe00e800

08002ba4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	817b      	strh	r3, [r7, #10]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 80db 	bne.w	8002d7c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_Master_Receive+0x30>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0d4      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fac4 	bl	8001168 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f90c 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0bf      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2222      	movs	r2, #34	; 0x22
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2bff      	cmp	r3, #255	; 0xff
 8002c2e:	d90e      	bls.n	8002c4e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	22ff      	movs	r2, #255	; 0xff
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	4b52      	ldr	r3, [pc, #328]	; (8002d88 <HAL_I2C_Master_Receive+0x1e4>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa6e 	bl	8003128 <I2C_TransferConfig>
 8002c4c:	e06d      	b.n	8002d2a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_I2C_Master_Receive+0x1e4>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa5d 	bl	8003128 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c6e:	e05c      	b.n	8002d2a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f985 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e07c      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d034      	beq.n	8002d2a <HAL_I2C_Master_Receive+0x186>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d130      	bne.n	8002d2a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f89a 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e04d      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2bff      	cmp	r3, #255	; 0xff
 8002cea:	d90e      	bls.n	8002d0a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa10 	bl	8003128 <I2C_TransferConfig>
 8002d08:	e00f      	b.n	8002d2a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	8979      	ldrh	r1, [r7, #10]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f9ff 	bl	8003128 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d19d      	bne.n	8002c70 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f8e7 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e01a      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_I2C_Master_Receive+0x1e8>)
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	80002400 	.word	0x80002400
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d103      	bne.n	8002de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	619a      	str	r2, [r3, #24]
  }
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1c:	e022      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d01e      	beq.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe f99f 	bl	8001168 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e00f      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d0cd      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e98:	e02c      	b.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8dc 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e02a      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d01e      	beq.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fe f957 	bl	8001168 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d113      	bne.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d1cb      	bne.n	8002e9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f18:	e028      	b.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f89c 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e026      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe f91b 	bl	8001168 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d1cf      	bne.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e055      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f860 	bl	800305c <I2C_IsAcknowledgeFailed>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e053      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d129      	bne.n	8003008 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d105      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e03f      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e022      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fe f8ae 	bl	8001168 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d1a2      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	fe00e800 	.word	0xfe00e800

0800305c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b10      	cmp	r3, #16
 8003074:	d151      	bne.n	800311a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003076:	e022      	b.n	80030be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d01e      	beq.n	80030be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003080:	f7fe f872 	bl	8001168 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <I2C_IsAcknowledgeFailed+0x3a>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d113      	bne.n	80030be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e02e      	b.n	800311c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d1d5      	bne.n	8003078 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2210      	movs	r2, #16
 80030d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2220      	movs	r2, #32
 80030da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff fe71 	bl	8002dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <I2C_IsAcknowledgeFailed+0xc8>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fe00e800 	.word	0xfe00e800

08003128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	4613      	mov	r3, r2
 8003138:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	0d5b      	lsrs	r3, r3, #21
 8003144:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <I2C_TransferConfig+0x58>)
 800314a:	430b      	orrs	r3, r1
 800314c:	43db      	mvns	r3, r3
 800314e:	ea02 0103 	and.w	r1, r2, r3
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003158:	7a7b      	ldrb	r3, [r7, #9]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	431a      	orrs	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003172:	bf00      	nop
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	03ff63ff 	.word	0x03ff63ff

08003184 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	d138      	bne.n	800320c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e032      	b.n	800320e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	d139      	bne.n	80032a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800323a:	2302      	movs	r3, #2
 800323c:	e033      	b.n	80032a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2224      	movs	r2, #36	; 0x24
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800326c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f000 bef4 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 816a 	beq.w	80035b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032de:	4bb3      	ldr	r3, [pc, #716]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d00c      	beq.n	8003304 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ea:	4bb0      	ldr	r3, [pc, #704]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d159      	bne.n	80033aa <HAL_RCC_OscConfig+0xf6>
 80032f6:	4bad      	ldr	r3, [pc, #692]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d152      	bne.n	80033aa <HAL_RCC_OscConfig+0xf6>
 8003304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003308:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003318:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_RCC_OscConfig+0x82>
 8003330:	4b9e      	ldr	r3, [pc, #632]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0xae>
 8003336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800333a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800334a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800334e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003352:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800335e:	4b93      	ldr	r3, [pc, #588]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003366:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800336a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800336e:	fa92 f2a2 	rbit	r2, r2
 8003372:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003376:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800337a:	fab2 f282 	clz	r2, r2
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f042 0220 	orr.w	r2, r2, #32
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	f002 021f 	and.w	r2, r2, #31
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 810c 	beq.w	80035b0 <HAL_RCC_OscConfig+0x2fc>
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 8106 	bne.w	80035b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f000 be86 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x110>
 80033b6:	4b7d      	ldr	r3, [pc, #500]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7c      	ldr	r2, [pc, #496]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e030      	b.n	8003426 <HAL_RCC_OscConfig+0x172>
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x134>
 80033ce:	4b77      	ldr	r3, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a76      	ldr	r2, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01e      	b.n	8003426 <HAL_RCC_OscConfig+0x172>
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f2:	d10c      	bne.n	800340e <HAL_RCC_OscConfig+0x15a>
 80033f4:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6c      	ldr	r2, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80033fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a69      	ldr	r2, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e00b      	b.n	8003426 <HAL_RCC_OscConfig+0x172>
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003426:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	f023 020f 	bic.w	r2, r3, #15
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	495d      	ldr	r1, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d059      	beq.n	80034f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fd fe90 	bl	8001168 <HAL_GetTick>
 8003448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344e:	f7fd fe8b 	bl	8001168 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d902      	bls.n	8003464 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	f000 be29 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003468:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003478:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0x1e2>
 8003490:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x20e>
 8003496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034ce:	fa92 f2a2 	rbit	r2, r2
 80034d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034da:	fab2 f282 	clz	r2, r2
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f042 0220 	orr.w	r2, r2, #32
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ab      	beq.n	800344e <HAL_RCC_OscConfig+0x19a>
 80034f6:	e05c      	b.n	80035b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fd fe36 	bl	8001168 <HAL_GetTick>
 80034fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003502:	f7fd fe31 	bl	8001168 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	d902      	bls.n	8003518 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	f000 bdcf 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800352c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_RCC_OscConfig+0x296>
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x2c2>
 800354a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800355e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003562:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003566:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_RCC_OscConfig+0x2f8>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800357a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800357e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003582:	fa92 f2a2 	rbit	r2, r2
 8003586:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800358a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800358e:	fab2 f282 	clz	r2, r2
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f042 0220 	orr.w	r2, r2, #32
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f002 021f 	and.w	r2, r2, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ab      	bne.n	8003502 <HAL_RCC_OscConfig+0x24e>
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_OscConfig+0x2fe>
 80035ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 816f 	beq.w	80038a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c2:	4bd0      	ldr	r3, [pc, #832]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035ce:	4bcd      	ldr	r3, [pc, #820]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d16c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x400>
 80035da:	4bca      	ldr	r3, [pc, #808]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d166      	bne.n	80036b4 <HAL_RCC_OscConfig+0x400>
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_RCC_OscConfig+0x362>
 8003610:	4bbc      	ldr	r3, [pc, #752]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	e013      	b.n	800363e <HAL_RCC_OscConfig+0x38a>
 8003616:	2302      	movs	r3, #2
 8003618:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800362e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800363a:	4bb2      	ldr	r3, [pc, #712]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2202      	movs	r2, #2
 8003640:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003644:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003650:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003654:	fab2 f282 	clz	r2, r2
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f002 021f 	and.w	r2, r2, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <HAL_RCC_OscConfig+0x3cc>
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d002      	beq.n	8003680 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f000 bd1b 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4ba0      	ldr	r3, [pc, #640]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	21f8      	movs	r1, #248	; 0xf8
 8003690:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003698:	fa91 f1a1 	rbit	r1, r1
 800369c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80036a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036a4:	fab1 f181 	clz	r1, r1
 80036a8:	b2c9      	uxtb	r1, r1
 80036aa:	408b      	lsls	r3, r1
 80036ac:	4995      	ldr	r1, [pc, #596]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e0f5      	b.n	80038a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8085 	beq.w	80037ca <HAL_RCC_OscConfig+0x516>
 80036c0:	2301      	movs	r3, #1
 80036c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	2301      	movs	r3, #1
 80036ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd fd3c 	bl	8001168 <HAL_GetTick>
 80036f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fd fd37 	bl	8001168 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d902      	bls.n	800370c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	f000 bcd5 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
 800370c:	2302      	movs	r3, #2
 800370e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800371e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0x488>
 8003736:	4b73      	ldr	r3, [pc, #460]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e013      	b.n	8003764 <HAL_RCC_OscConfig+0x4b0>
 800373c:	2302      	movs	r3, #2
 800373e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800374e:	2302      	movs	r3, #2
 8003750:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003754:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2202      	movs	r2, #2
 8003766:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800376a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003776:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800377a:	fab2 f282 	clz	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f042 0220 	orr.w	r2, r2, #32
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f002 021f 	and.w	r2, r2, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f202 	lsl.w	r2, r1, r2
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0af      	beq.n	80036f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	21f8      	movs	r1, #248	; 0xf8
 80037a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037ae:	fa91 f1a1 	rbit	r1, r1
 80037b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037ba:	fab1 f181 	clz	r1, r1
 80037be:	b2c9      	uxtb	r1, r1
 80037c0:	408b      	lsls	r3, r1
 80037c2:	4950      	ldr	r1, [pc, #320]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
 80037c8:	e06a      	b.n	80038a0 <HAL_RCC_OscConfig+0x5ec>
 80037ca:	2301      	movs	r3, #1
 80037cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	461a      	mov	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fd fcb7 	bl	8001168 <HAL_GetTick>
 80037fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003800:	f7fd fcb2 	bl	8001168 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d902      	bls.n	8003816 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	f000 bc50 	b.w	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003816:	2302      	movs	r3, #2
 8003818:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <HAL_RCC_OscConfig+0x592>
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e013      	b.n	800386e <HAL_RCC_OscConfig+0x5ba>
 8003846:	2302      	movs	r3, #2
 8003848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003858:	2302      	movs	r3, #2
 800385a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800385e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x650>)
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2202      	movs	r2, #2
 8003870:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003874:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003878:	fa92 f2a2 	rbit	r2, r2
 800387c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003880:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1af      	bne.n	8003800 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80da 	beq.w	8003a64 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d069      	beq.n	800398e <HAL_RCC_OscConfig+0x6da>
 80038ba:	2301      	movs	r3, #1
 80038bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_OscConfig+0x654>)
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	2301      	movs	r3, #1
 80038e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fd fc40 	bl	8001168 <HAL_GetTick>
 80038e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ec:	e00e      	b.n	800390c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fd fc3b 	bl	8001168 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d906      	bls.n	800390c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e3d9      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
 8003908:	10908120 	.word	0x10908120
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800391e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800393a:	2202      	movs	r2, #2
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	fa93 f2a3 	rbit	r2, r3
 8003948:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800394c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4ba5      	ldr	r3, [pc, #660]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003952:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003956:	2102      	movs	r1, #2
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f1a3 	rbit	r1, r3
 8003964:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003968:	6019      	str	r1, [r3, #0]
  return result;
 800396a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0b0      	beq.n	80038ee <HAL_RCC_OscConfig+0x63a>
 800398c:	e06a      	b.n	8003a64 <HAL_RCC_OscConfig+0x7b0>
 800398e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039a4:	601a      	str	r2, [r3, #0]
  return result;
 80039a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCC_OscConfig+0x934>)
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fd fbd2 	bl	8001168 <HAL_GetTick>
 80039c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	e009      	b.n	80039de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd fbcd 	bl	8001168 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e36b      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 80039de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039e2:	2202      	movs	r2, #2
 80039e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a12:	2202      	movs	r2, #2
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a2e:	2102      	movs	r1, #2
 8003a30:	6019      	str	r1, [r3, #0]
 8003a32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f1a3 	rbit	r1, r3
 8003a3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a40:	6019      	str	r1, [r3, #0]
  return result;
 8003a42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1b2      	bne.n	80039ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8158 	beq.w	8003d24 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d112      	bne.n	8003aac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f107 0308 	add.w	r3, r7, #8
 8003aa4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_OscConfig+0x938>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d11a      	bne.n	8003aee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x938>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4b      	ldr	r2, [pc, #300]	; (8003bec <HAL_RCC_OscConfig+0x938>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fb50 	bl	8001168 <HAL_GetTick>
 8003ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	e009      	b.n	8003ae2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ace:	f7fd fb4b 	bl	8001168 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e2e9      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_RCC_OscConfig+0x938>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ef      	beq.n	8003ace <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x852>
 8003af8:	4b3a      	ldr	r3, [pc, #232]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	4a39      	ldr	r2, [pc, #228]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6213      	str	r3, [r2, #32]
 8003b04:	e02f      	b.n	8003b66 <HAL_RCC_OscConfig+0x8b2>
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <HAL_RCC_OscConfig+0x876>
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a30      	ldr	r2, [pc, #192]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	e01d      	b.n	8003b66 <HAL_RCC_OscConfig+0x8b2>
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCC_OscConfig+0x89a>
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	6213      	str	r3, [r2, #32]
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6213      	str	r3, [r2, #32]
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCC_OscConfig+0x8b2>
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d06b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b70:	f7fd fafa 	bl	8001168 <HAL_GetTick>
 8003b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	e00b      	b.n	8003b92 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd faf5 	bl	8001168 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e291      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003b92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b96:	2202      	movs	r2, #2
 8003b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003bae:	2202      	movs	r2, #2
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fa93 f2a3 	rbit	r2, r3
 8003bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bc0:	601a      	str	r2, [r3, #0]
  return result;
 8003bc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x93c>
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <HAL_RCC_OscConfig+0x930>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x958>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	10908120 	.word	0x10908120
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	4bbb      	ldr	r3, [pc, #748]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c10:	2102      	movs	r1, #2
 8003c12:	6011      	str	r1, [r2, #0]
 8003c14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	fa92 f1a2 	rbit	r1, r2
 8003c1e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c22:	6011      	str	r1, [r2, #0]
  return result;
 8003c24:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f002 021f 	and.w	r2, r2, #31
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d099      	beq.n	8003b7a <HAL_RCC_OscConfig+0x8c6>
 8003c46:	e063      	b.n	8003d10 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c48:	f7fd fa8e 	bl	8001168 <HAL_GetTick>
 8003c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	e00b      	b.n	8003c6a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fa89 	bl	8001168 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e225      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003c6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c6e:	2202      	movs	r2, #2
 8003c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c86:	2202      	movs	r2, #2
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c98:	601a      	str	r2, [r3, #0]
  return result;
 8003c9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca0:	fab3 f383 	clz	r3, r3
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_OscConfig+0xa06>
 8003cb4:	4b90      	ldr	r3, [pc, #576]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	e00d      	b.n	8003cd6 <HAL_RCC_OscConfig+0xa22>
 8003cba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003cda:	2102      	movs	r1, #2
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	fa92 f1a2 	rbit	r1, r2
 8003ce8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cec:	6011      	str	r1, [r2, #0]
  return result;
 8003cee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	fab2 f282 	clz	r2, r2
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f002 021f 	and.w	r2, r2, #31
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1a0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4a76      	ldr	r2, [pc, #472]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 81c2 	beq.w	80040b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	f000 819c 	beq.w	8004076 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f040 8114 	bne.w	8003f72 <HAL_RCC_OscConfig+0xcbe>
 8003d4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d62:	601a      	str	r2, [r3, #0]
  return result;
 8003d64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd f9f2 	bl	8001168 <HAL_GetTick>
 8003d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d88:	e009      	b.n	8003d9e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd f9ed 	bl	8001168 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e18b      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003d9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	fa93 f2a3 	rbit	r2, r3
 8003db2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003db6:	601a      	str	r2, [r3, #0]
  return result;
 8003db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xb24>
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCC_OscConfig+0xb5c>
 8003dd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	fa93 f2a3 	rbit	r2, r3
 8003dec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e18:	6011      	str	r1, [r2, #0]
 8003e1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	fa92 f1a2 	rbit	r1, r2
 8003e24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e28:	6011      	str	r1, [r2, #0]
  return result;
 8003e2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	fab2 f282 	clz	r2, r2
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f042 0220 	orr.w	r2, r2, #32
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f002 021f 	and.w	r2, r2, #31
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d19e      	bne.n	8003d8a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	4925      	ldr	r1, [pc, #148]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
 8003e68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e80:	601a      	str	r2, [r3, #0]
  return result;
 8003e82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e86:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fd f963 	bl	8001168 <HAL_GetTick>
 8003ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea6:	e009      	b.n	8003ebc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd f95e 	bl	8001168 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e0fc      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003ebc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ed4:	601a      	str	r2, [r3, #0]
  return result;
 8003ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_OscConfig+0xc48>
 8003ef0:	4b01      	ldr	r3, [pc, #4]	; (8003ef8 <HAL_RCC_OscConfig+0xc44>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	e01e      	b.n	8003f34 <HAL_RCC_OscConfig+0xc80>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	fa93 f2a3 	rbit	r2, r3
 8003f10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	fa93 f2a3 	rbit	r2, r3
 8003f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_RCC_OscConfig+0xe0c>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f3c:	6011      	str	r1, [r2, #0]
 8003f3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	fa92 f1a2 	rbit	r1, r2
 8003f48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f4c:	6011      	str	r1, [r2, #0]
  return result;
 8003f4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fab2 f282 	clz	r2, r2
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f002 021f 	and.w	r2, r2, #31
 8003f64:	2101      	movs	r1, #1
 8003f66:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d09b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xbf4>
 8003f70:	e0a0      	b.n	80040b4 <HAL_RCC_OscConfig+0xe00>
 8003f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f2a3 	rbit	r2, r3
 8003f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f8a:	601a      	str	r2, [r3, #0]
  return result;
 8003f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd f8de 	bl	8001168 <HAL_GetTick>
 8003fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb2:	f7fd f8d9 	bl	8001168 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e077      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
 8003fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	fa93 f2a3 	rbit	r2, r3
 8003fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fde:	601a      	str	r2, [r3, #0]
  return result;
 8003fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0xd4c>
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_OscConfig+0xe0c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0xd84>
 8004000:	f107 0320 	add.w	r3, r7, #32
 8004004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	f107 0320 	add.w	r3, r7, #32
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	fa93 f2a3 	rbit	r2, r3
 8004014:	f107 031c 	add.w	r3, r7, #28
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	f107 0318 	add.w	r3, r7, #24
 800401e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f107 0318 	add.w	r3, r7, #24
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_OscConfig+0xe0c>)
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f107 0210 	add.w	r2, r7, #16
 800403c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	f107 0210 	add.w	r2, r7, #16
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fa92 f1a2 	rbit	r1, r2
 800404c:	f107 020c 	add.w	r2, r7, #12
 8004050:	6011      	str	r1, [r2, #0]
  return result;
 8004052:	f107 020c 	add.w	r2, r7, #12
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	fab2 f282 	clz	r2, r2
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	f042 0220 	orr.w	r2, r2, #32
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	f002 021f 	and.w	r2, r2, #31
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f202 	lsl.w	r2, r1, r2
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d19e      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xcfe>
 8004074:	e01e      	b.n	80040b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e018      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <HAL_RCC_OscConfig+0xe0c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800408c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	429a      	cmp	r2, r3
 800409c:	d108      	bne.n	80040b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800409e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b09e      	sub	sp, #120	; 0x78
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e162      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b90      	ldr	r3, [pc, #576]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d910      	bls.n	800410c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	498b      	ldr	r1, [pc, #556]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e14a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b82      	ldr	r3, [pc, #520]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	497f      	ldr	r1, [pc, #508]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80dc 	beq.w	80042f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d13c      	bne.n	80041ba <HAL_RCC_ClockConfig+0xf6>
 8004140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004144:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800414e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d102      	bne.n	800416a <HAL_RCC_ClockConfig+0xa6>
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	e00f      	b.n	800418a <HAL_RCC_ClockConfig+0xc6>
 800416a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800416e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	667b      	str	r3, [r7, #100]	; 0x64
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
 800417e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800418e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004192:	fa92 f2a2 	rbit	r2, r2
 8004196:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800419a:	fab2 f282 	clz	r2, r2
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	f042 0220 	orr.w	r2, r2, #32
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	f002 021f 	and.w	r2, r2, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d17b      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0f3      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d13c      	bne.n	800423c <HAL_RCC_ClockConfig+0x178>
 80041c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_RCC_ClockConfig+0x128>
 80041e6:	4b4f      	ldr	r3, [pc, #316]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	e00f      	b.n	800420c <HAL_RCC_ClockConfig+0x148>
 80041ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	647b      	str	r3, [r7, #68]	; 0x44
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004210:	63ba      	str	r2, [r7, #56]	; 0x38
 8004212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004214:	fa92 f2a2 	rbit	r2, r2
 8004218:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800421a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800421c:	fab2 f282 	clz	r2, r2
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f042 0220 	orr.w	r2, r2, #32
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f002 021f 	and.w	r2, r2, #31
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f202 	lsl.w	r2, r1, r2
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13a      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b2      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
 800423c:	2302      	movs	r3, #2
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_ClockConfig+0x1a0>
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e00d      	b.n	8004280 <HAL_RCC_ClockConfig+0x1bc>
 8004264:	2302      	movs	r3, #2
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	2302      	movs	r3, #2
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2202      	movs	r2, #2
 8004282:	61ba      	str	r2, [r7, #24]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	fa92 f2a2 	rbit	r2, r2
 800428a:	617a      	str	r2, [r7, #20]
  return result;
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e079      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	491a      	ldr	r1, [pc, #104]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fc ff52 	bl	8001168 <HAL_GetTick>
 80042c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fc ff4e 	bl	8001168 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e061      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_ClockConfig+0x260>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d214      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	4906      	ldr	r1, [pc, #24]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_ClockConfig+0x25c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e040      	b.n	80043a2 <HAL_RCC_ClockConfig+0x2de>
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	491a      	ldr	r1, [pc, #104]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4912      	ldr	r1, [pc, #72]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004366:	f000 f829 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800436a:	4601      	mov	r1, r0
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCC_ClockConfig+0x2e8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004374:	22f0      	movs	r2, #240	; 0xf0
 8004376:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	fa92 f2a2 	rbit	r2, r2
 800437e:	60fa      	str	r2, [r7, #12]
  return result;
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	40d3      	lsrs	r3, r2
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x2ec>)
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	fa21 f303 	lsr.w	r3, r1, r3
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCC_ClockConfig+0x2f0>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <HAL_RCC_ClockConfig+0x2f4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc fea0 	bl	80010e0 <HAL_InitTick>
  
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3778      	adds	r7, #120	; 0x78
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	080060c8 	.word	0x080060c8
 80043b4:	20000004 	.word	0x20000004
 80043b8:	20000008 	.word	0x20000008

080043bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b08b      	sub	sp, #44	; 0x2c
 80043c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x30>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x36>
 80043ea:	e03c      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043ee:	623b      	str	r3, [r7, #32]
      break;
 80043f0:	e03c      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	fa92 f2a2 	rbit	r2, r2
 8004404:	607a      	str	r2, [r7, #4]
  return result;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	40d3      	lsrs	r3, r2
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	220f      	movs	r2, #15
 8004420:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	fa92 f2a2 	rbit	r2, r2
 8004428:	60fa      	str	r2, [r7, #12]
  return result;
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	40d3      	lsrs	r3, r2
 8004434:	4a14      	ldr	r2, [pc, #80]	; (8004488 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004444:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	fbb2 f2f3 	udiv	r2, r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	e004      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <HAL_RCC_GetSysClockFreq+0xd0>)
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	623b      	str	r3, [r7, #32]
      break;
 8004464:	e002      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004468:	623b      	str	r3, [r7, #32]
      break;
 800446a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446c:	6a3b      	ldr	r3, [r7, #32]
}
 800446e:	4618      	mov	r0, r3
 8004470:	372c      	adds	r7, #44	; 0x2c
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	007a1200 	.word	0x007a1200
 8004484:	080060e0 	.word	0x080060e0
 8004488:	080060f0 	.word	0x080060f0
 800448c:	003d0900 	.word	0x003d0900

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000004 	.word	0x20000004

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044ae:	f7ff ffef 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b2:	4601      	mov	r1, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80044c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	fa92 f2a2 	rbit	r2, r2
 80044c8:	603a      	str	r2, [r7, #0]
  return result;
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	fab2 f282 	clz	r2, r2
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	40d3      	lsrs	r3, r2
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	080060d8 	.word	0x080060d8

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80044f2:	f7ff ffcd 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044f6:	4601      	mov	r1, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004500:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004504:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	fa92 f2a2 	rbit	r2, r2
 800450c:	603a      	str	r2, [r7, #0]
  return result;
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	fab2 f282 	clz	r2, r2
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	40d3      	lsrs	r3, r2
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_RCC_GetPCLK2Freq+0x40>)
 800451a:	5cd3      	ldrb	r3, [r2, r3]
 800451c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	080060d8 	.word	0x080060d8

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b092      	sub	sp, #72	; 0x48
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80d4 	beq.w	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004554:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10e      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4a4a      	ldr	r2, [pc, #296]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456a:	61d3      	str	r3, [r2, #28]
 800456c:	4b48      	ldr	r3, [pc, #288]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b45      	ldr	r3, [pc, #276]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d118      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	4b42      	ldr	r3, [pc, #264]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a41      	ldr	r2, [pc, #260]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fc fde7 	bl	8001168 <HAL_GetTick>
 800459a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fc fde3 	bl	8001168 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b64      	cmp	r3, #100	; 0x64
 80045aa:	d901      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e14b      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8084 	beq.w	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d07c      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045dc:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f6:	fab3 f383 	clz	r3, r3
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	4b26      	ldr	r3, [pc, #152]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	461a      	mov	r2, r3
 8004606:	2301      	movs	r3, #1
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04b      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fc fd93 	bl	8001168 <HAL_GetTick>
 8004642:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fc fd8f 	bl	8001168 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0f5      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800465c:	2302      	movs	r3, #2
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	2302      	movs	r3, #2
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	61fb      	str	r3, [r7, #28]
  return result;
 8004674:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d108      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800468a:	4b01      	ldr	r3, [pc, #4]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	e00d      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
 8004698:	10908100 	.word	0x10908100
 800469c:	2302      	movs	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	4b69      	ldr	r3, [pc, #420]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2202      	movs	r2, #2
 80046ae:	613a      	str	r2, [r7, #16]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	fa92 f2a2 	rbit	r2, r2
 80046b6:	60fa      	str	r2, [r7, #12]
  return result;
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	fab2 f282 	clz	r2, r2
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	f002 021f 	and.w	r2, r2, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f202 	lsl.w	r2, r1, r2
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0b7      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046d6:	4b5e      	ldr	r3, [pc, #376]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	495b      	ldr	r1, [pc, #364]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d105      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f0:	4b57      	ldr	r3, [pc, #348]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a56      	ldr	r2, [pc, #344]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f023 0203 	bic.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494e      	ldr	r1, [pc, #312]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004716:	4313      	orrs	r3, r2
 8004718:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f023 0210 	bic.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4947      	ldr	r1, [pc, #284]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004734:	4313      	orrs	r3, r2
 8004736:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	493f      	ldr	r1, [pc, #252]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004762:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f023 0220 	bic.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	4938      	ldr	r1, [pc, #224]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004770:	4313      	orrs	r3, r2
 8004772:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4930      	ldr	r1, [pc, #192]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800478e:	4313      	orrs	r3, r2
 8004790:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800479e:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4929      	ldr	r1, [pc, #164]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	4921      	ldr	r1, [pc, #132]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	491a      	ldr	r1, [pc, #104]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	4912      	ldr	r1, [pc, #72]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004806:	4313      	orrs	r3, r2
 8004808:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	490b      	ldr	r1, [pc, #44]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004824:	4313      	orrs	r3, r2
 8004826:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004842:	4313      	orrs	r3, r2
 8004844:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3748      	adds	r7, #72	; 0x48
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000

08004854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e040      	b.n	80048e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fad0 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	; 0x24
 8004880:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb1e 	bl	8004ed4 <UART_SetConfig>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e022      	b.n	80048e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fc48 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fccf 	bl	8005284 <UART_CheckIdleState>
 80048e6:	4603      	mov	r3, r0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004904:	2b20      	cmp	r3, #32
 8004906:	f040 8082 	bne.w	8004a0e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_UART_Transmit+0x26>
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07a      	b.n	8004a10 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_UART_Transmit+0x38>
 8004924:	2302      	movs	r3, #2
 8004926:	e073      	b.n	8004a10 <HAL_UART_Transmit+0x120>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2221      	movs	r2, #33	; 0x21
 800493c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800493e:	f7fc fc13 	bl	8001168 <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	88fa      	ldrh	r2, [r7, #6]
 8004948:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d108      	bne.n	8004970 <HAL_UART_Transmit+0x80>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e003      	b.n	8004978 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004980:	e02d      	b.n	80049de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fcc2 	bl	8005316 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e039      	b.n	8004a10 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	881a      	ldrh	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ae:	b292      	uxth	r2, r2
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3302      	adds	r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e008      	b.n	80049cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b292      	uxth	r2, r2
 80049c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1cb      	bne.n	8004982 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fc8e 	bl	8005316 <UART_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e005      	b.n	8004a10 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d12c      	bne.n	8004a88 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_UART_Receive_IT+0x22>
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e025      	b.n	8004a8a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Receive_IT+0x34>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e01e      	b.n	8004a8a <HAL_UART_Receive_IT+0x72>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a76:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 fcc6 	bl	8005410 <UART_Start_Receive_IT>
 8004a84:	4603      	mov	r3, r0
 8004a86:	e000      	b.n	8004a8a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d113      	bne.n	8004aec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 81cc 	beq.w	8004e7a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
      }
      return;
 8004aea:	e1c6      	b.n	8004e7a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80e3 	beq.w	8004cba <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4ba5      	ldr	r3, [pc, #660]	; (8004d98 <HAL_UART_IRQHandler+0x304>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80d8 	beq.w	8004cba <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <HAL_UART_IRQHandler+0xa2>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d010      	beq.n	8004b62 <HAL_UART_IRQHandler+0xce>
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <HAL_UART_IRQHandler+0xfa>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b84:	f043 0202 	orr.w	r2, r3, #2
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bba:	f043 0208 	orr.w	r2, r3, #8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x15e>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8140 	beq.w	8004e7e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00c      	beq.n	8004c22 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c28:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d004      	beq.n	8004c42 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d031      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fc6c 	bl	8005520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d123      	bne.n	8004c9e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c64:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d013      	beq.n	8004c96 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_UART_IRQHandler+0x308>)
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fd fb54 	bl	8002328 <HAL_DMA_Abort_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d017      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	e00f      	b.n	8004cb6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f906 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9c:	e00b      	b.n	8004cb6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f902 	bl	8004ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	e007      	b.n	8004cb6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8fe 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004cb4:	e0e3      	b.n	8004e7e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb6:	bf00      	nop
    return;
 8004cb8:	e0e1      	b.n	8004e7e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 80a7 	bne.w	8004e12 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80a1 	beq.w	8004e12 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 809b 	beq.w	8004e12 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2210      	movs	r2, #16
 8004ce2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d156      	bne.n	8004da0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80bf 	beq.w	8004e82 <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d0a:	893a      	ldrh	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	f080 80b8 	bcs.w	8004e82 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	893a      	ldrh	r2, [r7, #8]
 8004d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d02a      	beq.n	8004d7a <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0210 	bic.w	r2, r2, #16
 8004d6e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fd fa9e 	bl	80022b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f894 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d94:	e075      	b.n	8004e82 <HAL_UART_IRQHandler+0x3ee>
 8004d96:	bf00      	nop
 8004d98:	04000120 	.word	0x04000120
 8004d9c:	0800557f 	.word	0x0800557f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d060      	beq.n	8004e86 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0210 	bic.w	r2, r2, #16
 8004e04:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f856 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e10:	e039      	b.n	8004e86 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <HAL_UART_IRQHandler+0x3a4>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fca7 	bl	8005784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e36:	e029      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00d      	beq.n	8004e5e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
    }
    return;
 8004e5c:	e015      	b.n	8004e8a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d011      	beq.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fb99 	bl	80055aa <UART_EndTransmit_IT>
    return;
 8004e78:	e008      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004e7a:	bf00      	nop
 8004e7c:	e006      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
    return;
 8004e7e:	bf00      	nop
 8004e80:	e004      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_UART_IRQHandler+0x3f8>
    return;
 8004e8a:	bf00      	nop
  }

}
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b8a      	ldr	r3, [pc, #552]	; (8005128 <UART_SetConfig+0x254>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6979      	ldr	r1, [r7, #20]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a78      	ldr	r2, [pc, #480]	; (800512c <UART_SetConfig+0x258>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d120      	bne.n	8004f92 <UART_SetConfig+0xbe>
 8004f50:	4b77      	ldr	r3, [pc, #476]	; (8005130 <UART_SetConfig+0x25c>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d817      	bhi.n	8004f8c <UART_SetConfig+0xb8>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <UART_SetConfig+0x90>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f81 	.word	0x08004f81
 8004f6c:	08004f87 	.word	0x08004f87
 8004f70:	08004f7b 	.word	0x08004f7b
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e01d      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e01a      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004f80:	2304      	movs	r3, #4
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e017      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004f86:	2308      	movs	r3, #8
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e014      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e011      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a67      	ldr	r2, [pc, #412]	; (8005134 <UART_SetConfig+0x260>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <UART_SetConfig+0xce>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a64      	ldr	r2, [pc, #400]	; (8005138 <UART_SetConfig+0x264>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d102      	bne.n	8004fb2 <UART_SetConfig+0xde>
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e001      	b.n	8004fb6 <UART_SetConfig+0xe2>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbe:	d15b      	bne.n	8005078 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004fc0:	7ffb      	ldrb	r3, [r7, #31]
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d827      	bhi.n	8005016 <UART_SetConfig+0x142>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0xf8>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005017 	.word	0x08005017
 8004fdc:	08005007 	.word	0x08005007
 8004fe0:	08005017 	.word	0x08005017
 8004fe4:	08005017 	.word	0x08005017
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	0800500f 	.word	0x0800500f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7ff fa5a 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61b8      	str	r0, [r7, #24]
        break;
 8004ff6:	e013      	b.n	8005020 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f7ff fa78 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 8004ffc:	61b8      	str	r0, [r7, #24]
        break;
 8004ffe:	e00f      	b.n	8005020 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005000:	4b4e      	ldr	r3, [pc, #312]	; (800513c <UART_SetConfig+0x268>)
 8005002:	61bb      	str	r3, [r7, #24]
        break;
 8005004:	e00c      	b.n	8005020 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005006:	f7ff f9d9 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800500a:	61b8      	str	r0, [r7, #24]
        break;
 800500c:	e008      	b.n	8005020 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005012:	61bb      	str	r3, [r7, #24]
        break;
 8005014:	e004      	b.n	8005020 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	77bb      	strb	r3, [r7, #30]
        break;
 800501e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d074      	beq.n	8005110 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	005a      	lsls	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	b29b      	uxth	r3, r3
 800503c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b0f      	cmp	r3, #15
 8005042:	d916      	bls.n	8005072 <UART_SetConfig+0x19e>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504a:	d212      	bcs.n	8005072 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f023 030f 	bic.w	r3, r3, #15
 8005054:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	b29a      	uxth	r2, r3
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	4313      	orrs	r3, r2
 8005066:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	89fa      	ldrh	r2, [r7, #14]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	e04e      	b.n	8005110 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	77bb      	strb	r3, [r7, #30]
 8005076:	e04b      	b.n	8005110 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005078:	7ffb      	ldrb	r3, [r7, #31]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d827      	bhi.n	80050ce <UART_SetConfig+0x1fa>
 800507e:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x1b0>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	080050a9 	.word	0x080050a9
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050cf 	.word	0x080050cf
 8005094:	080050bf 	.word	0x080050bf
 8005098:	080050cf 	.word	0x080050cf
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050cf 	.word	0x080050cf
 80050a4:	080050c7 	.word	0x080050c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a8:	f7ff f9fe 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80050ac:	61b8      	str	r0, [r7, #24]
        break;
 80050ae:	e013      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b0:	f7ff fa1c 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 80050b4:	61b8      	str	r0, [r7, #24]
        break;
 80050b6:	e00f      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <UART_SetConfig+0x268>)
 80050ba:	61bb      	str	r3, [r7, #24]
        break;
 80050bc:	e00c      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050be:	f7ff f97d 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 80050c2:	61b8      	str	r0, [r7, #24]
        break;
 80050c4:	e008      	b.n	80050d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ca:	61bb      	str	r3, [r7, #24]
        break;
 80050cc:	e004      	b.n	80050d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	77bb      	strb	r3, [r7, #30]
        break;
 80050d6:	bf00      	nop
    }

    if (pclk != 0U)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	085a      	lsrs	r2, r3, #1
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	441a      	add	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b0f      	cmp	r3, #15
 80050f8:	d908      	bls.n	800510c <UART_SetConfig+0x238>
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d204      	bcs.n	800510c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e001      	b.n	8005110 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800511c:	7fbb      	ldrb	r3, [r7, #30]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	efff69f3 	.word	0xefff69f3
 800512c:	40013800 	.word	0x40013800
 8005130:	40021000 	.word	0x40021000
 8005134:	40004400 	.word	0x40004400
 8005138:	40004800 	.word	0x40004800
 800513c:	007a1200 	.word	0x007a1200

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523e:	d10a      	bne.n	8005256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fb ff68 	bl	8001168 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d10e      	bne.n	80052c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f82d 	bl	8005316 <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e023      	b.n	800530e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d10e      	bne.n	80052f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f817 	bl	8005316 <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e00d      	b.n	800530e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005326:	e05e      	b.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d05a      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7fb ff1a 	bl	8001168 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <UART_WaitOnFlagUntilTimeout+0x30>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11b      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005354:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e043      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02c      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539a:	d124      	bne.n	80053e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d091      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d10e      	bne.n	8005462 <UART_Start_Receive_IT+0x52>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <UART_Start_Receive_IT+0x48>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005456:	e02d      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005460:	e028      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <UART_Start_Receive_IT+0x76>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <UART_Start_Receive_IT+0x6c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800547a:	e01b      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	227f      	movs	r2, #127	; 0x7f
 8005480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005484:	e016      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548e:	d10d      	bne.n	80054ac <UART_Start_Receive_IT+0x9c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <UART_Start_Receive_IT+0x92>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	227f      	movs	r2, #127	; 0x7f
 800549c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054a0:	e008      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054aa:	e003      	b.n	80054b4 <UART_Start_Receive_IT+0xa4>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2222      	movs	r2, #34	; 0x22
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d107      	bne.n	80054ec <UART_Start_Receive_IT+0xdc>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <UART_Start_Receive_IT+0x108>)
 80054e8:	665a      	str	r2, [r3, #100]	; 0x64
 80054ea:	e002      	b.n	80054f2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a0b      	ldr	r2, [pc, #44]	; (800551c <UART_Start_Receive_IT+0x10c>)
 80054f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005508:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	080056b1 	.word	0x080056b1
 800551c:	080055dd 	.word	0x080055dd

08005520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005536:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0210 	bic.w	r2, r2, #16
 800555e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff fc83 	bl	8004ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fc60 	bl	8004e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f0:	2b22      	cmp	r3, #34	; 0x22
 80055f2:	d151      	bne.n	8005698 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055fa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055fc:	89bb      	ldrh	r3, [r7, #12]
 80055fe:	b2d9      	uxtb	r1, r3
 8005600:	89fb      	ldrh	r3, [r7, #14]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	400a      	ands	r2, r1
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d138      	bne.n	80056a8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005644:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10f      	bne.n	800568a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0210 	bic.w	r2, r2, #16
 8005678:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fc1a 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
 8005688:	e002      	b.n	8005690 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fa fea0 	bl	80003d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005696:	e007      	b.n	80056a8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c4:	2b22      	cmp	r3, #34	; 0x22
 80056c6:	d151      	bne.n	800576c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056ce:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80056d6:	89ba      	ldrh	r2, [r7, #12]
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	4013      	ands	r3, r2
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d138      	bne.n	800577c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005718:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10f      	bne.n	800575e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0210 	bic.w	r2, r2, #16
 800574c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fbb0 	bl	8004ebc <HAL_UARTEx_RxEventCallback>
 800575c:	e002      	b.n	8005764 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fa fe36 	bl	80003d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800576a:	e007      	b.n	800577c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	619a      	str	r2, [r3, #24]
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 fc4e 	bl	8006058 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	08006134 	.word	0x08006134
 80057e0:	08006134 	.word	0x08006134
 80057e4:	08006134 	.word	0x08006134
 80057e8:	0800613c 	.word	0x0800613c

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <siprintf>:
 80057fc:	b40e      	push	{r1, r2, r3}
 80057fe:	b500      	push	{lr}
 8005800:	b09c      	sub	sp, #112	; 0x70
 8005802:	ab1d      	add	r3, sp, #116	; 0x74
 8005804:	9002      	str	r0, [sp, #8]
 8005806:	9006      	str	r0, [sp, #24]
 8005808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800580c:	4809      	ldr	r0, [pc, #36]	; (8005834 <siprintf+0x38>)
 800580e:	9107      	str	r1, [sp, #28]
 8005810:	9104      	str	r1, [sp, #16]
 8005812:	4909      	ldr	r1, [pc, #36]	; (8005838 <siprintf+0x3c>)
 8005814:	f853 2b04 	ldr.w	r2, [r3], #4
 8005818:	9105      	str	r1, [sp, #20]
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	a902      	add	r1, sp, #8
 8005820:	f000 f868 	bl	80058f4 <_svfiprintf_r>
 8005824:	9b02      	ldr	r3, [sp, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	b01c      	add	sp, #112	; 0x70
 800582c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005830:	b003      	add	sp, #12
 8005832:	4770      	bx	lr
 8005834:	20000010 	.word	0x20000010
 8005838:	ffff0208 	.word	0xffff0208

0800583c <__ssputs_r>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	688e      	ldr	r6, [r1, #8]
 8005842:	429e      	cmp	r6, r3
 8005844:	4682      	mov	sl, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4690      	mov	r8, r2
 800584a:	461f      	mov	r7, r3
 800584c:	d838      	bhi.n	80058c0 <__ssputs_r+0x84>
 800584e:	898a      	ldrh	r2, [r1, #12]
 8005850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005854:	d032      	beq.n	80058bc <__ssputs_r+0x80>
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	6909      	ldr	r1, [r1, #16]
 800585a:	eba5 0901 	sub.w	r9, r5, r1
 800585e:	6965      	ldr	r5, [r4, #20]
 8005860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005868:	3301      	adds	r3, #1
 800586a:	444b      	add	r3, r9
 800586c:	106d      	asrs	r5, r5, #1
 800586e:	429d      	cmp	r5, r3
 8005870:	bf38      	it	cc
 8005872:	461d      	movcc	r5, r3
 8005874:	0553      	lsls	r3, r2, #21
 8005876:	d531      	bpl.n	80058dc <__ssputs_r+0xa0>
 8005878:	4629      	mov	r1, r5
 800587a:	f000 fb47 	bl	8005f0c <_malloc_r>
 800587e:	4606      	mov	r6, r0
 8005880:	b950      	cbnz	r0, 8005898 <__ssputs_r+0x5c>
 8005882:	230c      	movs	r3, #12
 8005884:	f8ca 3000 	str.w	r3, [sl]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	6921      	ldr	r1, [r4, #16]
 800589a:	464a      	mov	r2, r9
 800589c:	f000 fabe 	bl	8005e1c <memcpy>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	6126      	str	r6, [r4, #16]
 80058ae:	6165      	str	r5, [r4, #20]
 80058b0:	444e      	add	r6, r9
 80058b2:	eba5 0509 	sub.w	r5, r5, r9
 80058b6:	6026      	str	r6, [r4, #0]
 80058b8:	60a5      	str	r5, [r4, #8]
 80058ba:	463e      	mov	r6, r7
 80058bc:	42be      	cmp	r6, r7
 80058be:	d900      	bls.n	80058c2 <__ssputs_r+0x86>
 80058c0:	463e      	mov	r6, r7
 80058c2:	4632      	mov	r2, r6
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	4641      	mov	r1, r8
 80058c8:	f000 fab6 	bl	8005e38 <memmove>
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	1b9b      	subs	r3, r3, r6
 80058d2:	4432      	add	r2, r6
 80058d4:	60a3      	str	r3, [r4, #8]
 80058d6:	6022      	str	r2, [r4, #0]
 80058d8:	2000      	movs	r0, #0
 80058da:	e7db      	b.n	8005894 <__ssputs_r+0x58>
 80058dc:	462a      	mov	r2, r5
 80058de:	f000 fb6f 	bl	8005fc0 <_realloc_r>
 80058e2:	4606      	mov	r6, r0
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d1e1      	bne.n	80058ac <__ssputs_r+0x70>
 80058e8:	6921      	ldr	r1, [r4, #16]
 80058ea:	4650      	mov	r0, sl
 80058ec:	f000 fabe 	bl	8005e6c <_free_r>
 80058f0:	e7c7      	b.n	8005882 <__ssputs_r+0x46>
	...

080058f4 <_svfiprintf_r>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	4698      	mov	r8, r3
 80058fa:	898b      	ldrh	r3, [r1, #12]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	b09d      	sub	sp, #116	; 0x74
 8005900:	4607      	mov	r7, r0
 8005902:	460d      	mov	r5, r1
 8005904:	4614      	mov	r4, r2
 8005906:	d50e      	bpl.n	8005926 <_svfiprintf_r+0x32>
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	b963      	cbnz	r3, 8005926 <_svfiprintf_r+0x32>
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	f000 fafd 	bl	8005f0c <_malloc_r>
 8005912:	6028      	str	r0, [r5, #0]
 8005914:	6128      	str	r0, [r5, #16]
 8005916:	b920      	cbnz	r0, 8005922 <_svfiprintf_r+0x2e>
 8005918:	230c      	movs	r3, #12
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e0d1      	b.n	8005ac6 <_svfiprintf_r+0x1d2>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	616b      	str	r3, [r5, #20]
 8005926:	2300      	movs	r3, #0
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	2320      	movs	r3, #32
 800592c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	2330      	movs	r3, #48	; 0x30
 8005936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ae0 <_svfiprintf_r+0x1ec>
 800593a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800593e:	f04f 0901 	mov.w	r9, #1
 8005942:	4623      	mov	r3, r4
 8005944:	469a      	mov	sl, r3
 8005946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800594a:	b10a      	cbz	r2, 8005950 <_svfiprintf_r+0x5c>
 800594c:	2a25      	cmp	r2, #37	; 0x25
 800594e:	d1f9      	bne.n	8005944 <_svfiprintf_r+0x50>
 8005950:	ebba 0b04 	subs.w	fp, sl, r4
 8005954:	d00b      	beq.n	800596e <_svfiprintf_r+0x7a>
 8005956:	465b      	mov	r3, fp
 8005958:	4622      	mov	r2, r4
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ff6d 	bl	800583c <__ssputs_r>
 8005962:	3001      	adds	r0, #1
 8005964:	f000 80aa 	beq.w	8005abc <_svfiprintf_r+0x1c8>
 8005968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596a:	445a      	add	r2, fp
 800596c:	9209      	str	r2, [sp, #36]	; 0x24
 800596e:	f89a 3000 	ldrb.w	r3, [sl]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80a2 	beq.w	8005abc <_svfiprintf_r+0x1c8>
 8005978:	2300      	movs	r3, #0
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005982:	f10a 0a01 	add.w	sl, sl, #1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	9307      	str	r3, [sp, #28]
 800598a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800598e:	931a      	str	r3, [sp, #104]	; 0x68
 8005990:	4654      	mov	r4, sl
 8005992:	2205      	movs	r2, #5
 8005994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005998:	4851      	ldr	r0, [pc, #324]	; (8005ae0 <_svfiprintf_r+0x1ec>)
 800599a:	f7fa fc21 	bl	80001e0 <memchr>
 800599e:	9a04      	ldr	r2, [sp, #16]
 80059a0:	b9d8      	cbnz	r0, 80059da <_svfiprintf_r+0xe6>
 80059a2:	06d0      	lsls	r0, r2, #27
 80059a4:	bf44      	itt	mi
 80059a6:	2320      	movmi	r3, #32
 80059a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ac:	0711      	lsls	r1, r2, #28
 80059ae:	bf44      	itt	mi
 80059b0:	232b      	movmi	r3, #43	; 0x2b
 80059b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d015      	beq.n	80059ea <_svfiprintf_r+0xf6>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	4654      	mov	r4, sl
 80059c2:	2000      	movs	r0, #0
 80059c4:	f04f 0c0a 	mov.w	ip, #10
 80059c8:	4621      	mov	r1, r4
 80059ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ce:	3b30      	subs	r3, #48	; 0x30
 80059d0:	2b09      	cmp	r3, #9
 80059d2:	d94e      	bls.n	8005a72 <_svfiprintf_r+0x17e>
 80059d4:	b1b0      	cbz	r0, 8005a04 <_svfiprintf_r+0x110>
 80059d6:	9207      	str	r2, [sp, #28]
 80059d8:	e014      	b.n	8005a04 <_svfiprintf_r+0x110>
 80059da:	eba0 0308 	sub.w	r3, r0, r8
 80059de:	fa09 f303 	lsl.w	r3, r9, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	46a2      	mov	sl, r4
 80059e8:	e7d2      	b.n	8005990 <_svfiprintf_r+0x9c>
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	9103      	str	r1, [sp, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfbb      	ittet	lt
 80059f6:	425b      	neglt	r3, r3
 80059f8:	f042 0202 	orrlt.w	r2, r2, #2
 80059fc:	9307      	strge	r3, [sp, #28]
 80059fe:	9307      	strlt	r3, [sp, #28]
 8005a00:	bfb8      	it	lt
 8005a02:	9204      	strlt	r2, [sp, #16]
 8005a04:	7823      	ldrb	r3, [r4, #0]
 8005a06:	2b2e      	cmp	r3, #46	; 0x2e
 8005a08:	d10c      	bne.n	8005a24 <_svfiprintf_r+0x130>
 8005a0a:	7863      	ldrb	r3, [r4, #1]
 8005a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0e:	d135      	bne.n	8005a7c <_svfiprintf_r+0x188>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9203      	str	r2, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfb8      	it	lt
 8005a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a20:	3402      	adds	r4, #2
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005af0 <_svfiprintf_r+0x1fc>
 8005a28:	7821      	ldrb	r1, [r4, #0]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	f7fa fbd7 	bl	80001e0 <memchr>
 8005a32:	b140      	cbz	r0, 8005a46 <_svfiprintf_r+0x152>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	eba0 000a 	sub.w	r0, r0, sl
 8005a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	4303      	orrs	r3, r0
 8005a42:	3401      	adds	r4, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4a:	4826      	ldr	r0, [pc, #152]	; (8005ae4 <_svfiprintf_r+0x1f0>)
 8005a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a50:	2206      	movs	r2, #6
 8005a52:	f7fa fbc5 	bl	80001e0 <memchr>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d038      	beq.n	8005acc <_svfiprintf_r+0x1d8>
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <_svfiprintf_r+0x1f4>)
 8005a5c:	bb1b      	cbnz	r3, 8005aa6 <_svfiprintf_r+0x1b2>
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	3308      	adds	r3, #8
 8005a68:	9303      	str	r3, [sp, #12]
 8005a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6c:	4433      	add	r3, r6
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	e767      	b.n	8005942 <_svfiprintf_r+0x4e>
 8005a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a76:	460c      	mov	r4, r1
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e7a5      	b.n	80059c8 <_svfiprintf_r+0xd4>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	3401      	adds	r4, #1
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	4619      	mov	r1, r3
 8005a84:	f04f 0c0a 	mov.w	ip, #10
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a8e:	3a30      	subs	r2, #48	; 0x30
 8005a90:	2a09      	cmp	r2, #9
 8005a92:	d903      	bls.n	8005a9c <_svfiprintf_r+0x1a8>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0c5      	beq.n	8005a24 <_svfiprintf_r+0x130>
 8005a98:	9105      	str	r1, [sp, #20]
 8005a9a:	e7c3      	b.n	8005a24 <_svfiprintf_r+0x130>
 8005a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7f0      	b.n	8005a88 <_svfiprintf_r+0x194>
 8005aa6:	ab03      	add	r3, sp, #12
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <_svfiprintf_r+0x1f8>)
 8005aae:	a904      	add	r1, sp, #16
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f3af 8000 	nop.w
 8005ab6:	1c42      	adds	r2, r0, #1
 8005ab8:	4606      	mov	r6, r0
 8005aba:	d1d6      	bne.n	8005a6a <_svfiprintf_r+0x176>
 8005abc:	89ab      	ldrh	r3, [r5, #12]
 8005abe:	065b      	lsls	r3, r3, #25
 8005ac0:	f53f af2c 	bmi.w	800591c <_svfiprintf_r+0x28>
 8005ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ac6:	b01d      	add	sp, #116	; 0x74
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	ab03      	add	r3, sp, #12
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <_svfiprintf_r+0x1f8>)
 8005ad4:	a904      	add	r1, sp, #16
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f000 f87a 	bl	8005bd0 <_printf_i>
 8005adc:	e7eb      	b.n	8005ab6 <_svfiprintf_r+0x1c2>
 8005ade:	bf00      	nop
 8005ae0:	08006100 	.word	0x08006100
 8005ae4:	0800610a 	.word	0x0800610a
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	0800583d 	.word	0x0800583d
 8005af0:	08006106 	.word	0x08006106

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	68e5      	ldr	r5, [r4, #12]
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	f003 0306 	and.w	r3, r3, #6
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	bf08      	it	eq
 8005b68:	1aad      	subeq	r5, r5, r2
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c0      	blx	r8
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	7e27      	ldrb	r7, [r4, #24]
 8005bda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bdc:	2f78      	cmp	r7, #120	; 0x78
 8005bde:	4680      	mov	r8, r0
 8005be0:	469a      	mov	sl, r3
 8005be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	; 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d8 	beq.w	8005da2 <_printf_i+0x1d2>
 8005bf2:	2f58      	cmp	r7, #88	; 0x58
 8005bf4:	f000 80a3 	beq.w	8005d3e <_printf_i+0x16e>
 8005bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a001      	add	r0, pc, #4	; (adr r0, 8005c10 <_printf_i+0x40>)
 8005c0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d89 	.word	0x08005d89
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005d6b 	.word	0x08005d6b
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005dab 	.word	0x08005dab
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d73 	.word	0x08005d73
 8005c68:	680b      	ldr	r3, [r1, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	600a      	str	r2, [r1, #0]
 8005c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0a3      	b.n	8005dc4 <_printf_i+0x1f4>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	6808      	ldr	r0, [r1, #0]
 8005c80:	062e      	lsls	r6, r5, #24
 8005c82:	f100 0304 	add.w	r3, r0, #4
 8005c86:	d50a      	bpl.n	8005c9e <_printf_i+0xce>
 8005c88:	6805      	ldr	r5, [r0, #0]
 8005c8a:	600b      	str	r3, [r1, #0]
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	da03      	bge.n	8005c98 <_printf_i+0xc8>
 8005c90:	232d      	movs	r3, #45	; 0x2d
 8005c92:	426d      	negs	r5, r5
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	485e      	ldr	r0, [pc, #376]	; (8005e14 <_printf_i+0x244>)
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e019      	b.n	8005cd2 <_printf_i+0x102>
 8005c9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ca2:	6805      	ldr	r5, [r0, #0]
 8005ca4:	600b      	str	r3, [r1, #0]
 8005ca6:	bf18      	it	ne
 8005ca8:	b22d      	sxthne	r5, r5
 8005caa:	e7ef      	b.n	8005c8c <_printf_i+0xbc>
 8005cac:	680b      	ldr	r3, [r1, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	1d18      	adds	r0, r3, #4
 8005cb2:	6008      	str	r0, [r1, #0]
 8005cb4:	0628      	lsls	r0, r5, #24
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0xec>
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0xf2>
 8005cbc:	0669      	lsls	r1, r5, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0xe8>
 8005cc0:	881d      	ldrh	r5, [r3, #0]
 8005cc2:	4854      	ldr	r0, [pc, #336]	; (8005e14 <_printf_i+0x244>)
 8005cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2308      	moveq	r3, #8
 8005cca:	230a      	movne	r3, #10
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cd2:	6866      	ldr	r6, [r4, #4]
 8005cd4:	60a6      	str	r6, [r4, #8]
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	bfa2      	ittt	ge
 8005cda:	6821      	ldrge	r1, [r4, #0]
 8005cdc:	f021 0104 	bicge.w	r1, r1, #4
 8005ce0:	6021      	strge	r1, [r4, #0]
 8005ce2:	b90d      	cbnz	r5, 8005ce8 <_printf_i+0x118>
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	d04d      	beq.n	8005d84 <_printf_i+0x1b4>
 8005ce8:	4616      	mov	r6, r2
 8005cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cee:	fb03 5711 	mls	r7, r3, r1, r5
 8005cf2:	5dc7      	ldrb	r7, [r0, r7]
 8005cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cf8:	462f      	mov	r7, r5
 8005cfa:	42bb      	cmp	r3, r7
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	d9f4      	bls.n	8005cea <_printf_i+0x11a>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10b      	bne.n	8005d1c <_printf_i+0x14c>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	07df      	lsls	r7, r3, #31
 8005d08:	d508      	bpl.n	8005d1c <_printf_i+0x14c>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	bfde      	ittt	le
 8005d12:	2330      	movle	r3, #48	; 0x30
 8005d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d1c:	1b92      	subs	r2, r2, r6
 8005d1e:	6122      	str	r2, [r4, #16]
 8005d20:	f8cd a000 	str.w	sl, [sp]
 8005d24:	464b      	mov	r3, r9
 8005d26:	aa03      	add	r2, sp, #12
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f7ff fee2 	bl	8005af4 <_printf_common>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d14c      	bne.n	8005dce <_printf_i+0x1fe>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	b004      	add	sp, #16
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <_printf_i+0x244>)
 8005d40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	680e      	ldr	r6, [r1, #0]
 8005d48:	061f      	lsls	r7, r3, #24
 8005d4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d4e:	600e      	str	r6, [r1, #0]
 8005d50:	d514      	bpl.n	8005d7c <_printf_i+0x1ac>
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	bf44      	itt	mi
 8005d56:	f043 0320 	orrmi.w	r3, r3, #32
 8005d5a:	6023      	strmi	r3, [r4, #0]
 8005d5c:	b91d      	cbnz	r5, 8005d66 <_printf_i+0x196>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f023 0320 	bic.w	r3, r3, #32
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	2310      	movs	r3, #16
 8005d68:	e7b0      	b.n	8005ccc <_printf_i+0xfc>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	2378      	movs	r3, #120	; 0x78
 8005d74:	4828      	ldr	r0, [pc, #160]	; (8005e18 <_printf_i+0x248>)
 8005d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d7a:	e7e3      	b.n	8005d44 <_printf_i+0x174>
 8005d7c:	065e      	lsls	r6, r3, #25
 8005d7e:	bf48      	it	mi
 8005d80:	b2ad      	uxthmi	r5, r5
 8005d82:	e7e6      	b.n	8005d52 <_printf_i+0x182>
 8005d84:	4616      	mov	r6, r2
 8005d86:	e7bb      	b.n	8005d00 <_printf_i+0x130>
 8005d88:	680b      	ldr	r3, [r1, #0]
 8005d8a:	6826      	ldr	r6, [r4, #0]
 8005d8c:	6960      	ldr	r0, [r4, #20]
 8005d8e:	1d1d      	adds	r5, r3, #4
 8005d90:	600d      	str	r5, [r1, #0]
 8005d92:	0635      	lsls	r5, r6, #24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0x1cc>
 8005d98:	6018      	str	r0, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0x1d2>
 8005d9c:	0671      	lsls	r1, r6, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0x1c8>
 8005da0:	8018      	strh	r0, [r3, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4616      	mov	r6, r2
 8005da8:	e7ba      	b.n	8005d20 <_printf_i+0x150>
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	600a      	str	r2, [r1, #0]
 8005db0:	681e      	ldr	r6, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7fa fa12 	bl	80001e0 <memchr>
 8005dbc:	b108      	cbz	r0, 8005dc2 <_printf_i+0x1f2>
 8005dbe:	1b80      	subs	r0, r0, r6
 8005dc0:	6060      	str	r0, [r4, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	e7a8      	b.n	8005d20 <_printf_i+0x150>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0ab      	beq.n	8005d34 <_printf_i+0x164>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	079b      	lsls	r3, r3, #30
 8005de0:	d413      	bmi.n	8005e0a <_printf_i+0x23a>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	bfb8      	it	lt
 8005dea:	4618      	movlt	r0, r3
 8005dec:	e7a4      	b.n	8005d38 <_printf_i+0x168>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d09b      	beq.n	8005d34 <_printf_i+0x164>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dcf2      	bgt.n	8005dee <_printf_i+0x21e>
 8005e08:	e7eb      	b.n	8005de2 <_printf_i+0x212>
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	f104 0619 	add.w	r6, r4, #25
 8005e10:	e7f5      	b.n	8005dfe <_printf_i+0x22e>
 8005e12:	bf00      	nop
 8005e14:	08006111 	.word	0x08006111
 8005e18:	08006122 	.word	0x08006122

08005e1c <memcpy>:
 8005e1c:	440a      	add	r2, r1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e24:	d100      	bne.n	8005e28 <memcpy+0xc>
 8005e26:	4770      	bx	lr
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e32:	4291      	cmp	r1, r2
 8005e34:	d1f9      	bne.n	8005e2a <memcpy+0xe>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <memmove>:
 8005e38:	4288      	cmp	r0, r1
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	eb01 0402 	add.w	r4, r1, r2
 8005e40:	d902      	bls.n	8005e48 <memmove+0x10>
 8005e42:	4284      	cmp	r4, r0
 8005e44:	4623      	mov	r3, r4
 8005e46:	d807      	bhi.n	8005e58 <memmove+0x20>
 8005e48:	1e43      	subs	r3, r0, #1
 8005e4a:	42a1      	cmp	r1, r4
 8005e4c:	d008      	beq.n	8005e60 <memmove+0x28>
 8005e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e56:	e7f8      	b.n	8005e4a <memmove+0x12>
 8005e58:	4402      	add	r2, r0
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	428a      	cmp	r2, r1
 8005e5e:	d100      	bne.n	8005e62 <memmove+0x2a>
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e6a:	e7f7      	b.n	8005e5c <memmove+0x24>

08005e6c <_free_r>:
 8005e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d048      	beq.n	8005f04 <_free_r+0x98>
 8005e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e76:	9001      	str	r0, [sp, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e7e:	bfb8      	it	lt
 8005e80:	18e4      	addlt	r4, r4, r3
 8005e82:	f000 f8d3 	bl	800602c <__malloc_lock>
 8005e86:	4a20      	ldr	r2, [pc, #128]	; (8005f08 <_free_r+0x9c>)
 8005e88:	9801      	ldr	r0, [sp, #4]
 8005e8a:	6813      	ldr	r3, [r2, #0]
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	b933      	cbnz	r3, 8005e9e <_free_r+0x32>
 8005e90:	6063      	str	r3, [r4, #4]
 8005e92:	6014      	str	r4, [r2, #0]
 8005e94:	b003      	add	sp, #12
 8005e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e9a:	f000 b8cd 	b.w	8006038 <__malloc_unlock>
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	d90b      	bls.n	8005eba <_free_r+0x4e>
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	1862      	adds	r2, r4, r1
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	bf04      	itt	eq
 8005eaa:	681a      	ldreq	r2, [r3, #0]
 8005eac:	685b      	ldreq	r3, [r3, #4]
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	bf04      	itt	eq
 8005eb2:	1852      	addeq	r2, r2, r1
 8005eb4:	6022      	streq	r2, [r4, #0]
 8005eb6:	602c      	str	r4, [r5, #0]
 8005eb8:	e7ec      	b.n	8005e94 <_free_r+0x28>
 8005eba:	461a      	mov	r2, r3
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b10b      	cbz	r3, 8005ec4 <_free_r+0x58>
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d9fa      	bls.n	8005eba <_free_r+0x4e>
 8005ec4:	6811      	ldr	r1, [r2, #0]
 8005ec6:	1855      	adds	r5, r2, r1
 8005ec8:	42a5      	cmp	r5, r4
 8005eca:	d10b      	bne.n	8005ee4 <_free_r+0x78>
 8005ecc:	6824      	ldr	r4, [r4, #0]
 8005ece:	4421      	add	r1, r4
 8005ed0:	1854      	adds	r4, r2, r1
 8005ed2:	42a3      	cmp	r3, r4
 8005ed4:	6011      	str	r1, [r2, #0]
 8005ed6:	d1dd      	bne.n	8005e94 <_free_r+0x28>
 8005ed8:	681c      	ldr	r4, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	6053      	str	r3, [r2, #4]
 8005ede:	4421      	add	r1, r4
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	e7d7      	b.n	8005e94 <_free_r+0x28>
 8005ee4:	d902      	bls.n	8005eec <_free_r+0x80>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	6003      	str	r3, [r0, #0]
 8005eea:	e7d3      	b.n	8005e94 <_free_r+0x28>
 8005eec:	6825      	ldr	r5, [r4, #0]
 8005eee:	1961      	adds	r1, r4, r5
 8005ef0:	428b      	cmp	r3, r1
 8005ef2:	bf04      	itt	eq
 8005ef4:	6819      	ldreq	r1, [r3, #0]
 8005ef6:	685b      	ldreq	r3, [r3, #4]
 8005ef8:	6063      	str	r3, [r4, #4]
 8005efa:	bf04      	itt	eq
 8005efc:	1949      	addeq	r1, r1, r5
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	6054      	str	r4, [r2, #4]
 8005f02:	e7c7      	b.n	8005e94 <_free_r+0x28>
 8005f04:	b003      	add	sp, #12
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	200001a4 	.word	0x200001a4

08005f0c <_malloc_r>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	1ccd      	adds	r5, r1, #3
 8005f10:	f025 0503 	bic.w	r5, r5, #3
 8005f14:	3508      	adds	r5, #8
 8005f16:	2d0c      	cmp	r5, #12
 8005f18:	bf38      	it	cc
 8005f1a:	250c      	movcc	r5, #12
 8005f1c:	2d00      	cmp	r5, #0
 8005f1e:	4606      	mov	r6, r0
 8005f20:	db01      	blt.n	8005f26 <_malloc_r+0x1a>
 8005f22:	42a9      	cmp	r1, r5
 8005f24:	d903      	bls.n	8005f2e <_malloc_r+0x22>
 8005f26:	230c      	movs	r3, #12
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2e:	f000 f87d 	bl	800602c <__malloc_lock>
 8005f32:	4921      	ldr	r1, [pc, #132]	; (8005fb8 <_malloc_r+0xac>)
 8005f34:	680a      	ldr	r2, [r1, #0]
 8005f36:	4614      	mov	r4, r2
 8005f38:	b99c      	cbnz	r4, 8005f62 <_malloc_r+0x56>
 8005f3a:	4f20      	ldr	r7, [pc, #128]	; (8005fbc <_malloc_r+0xb0>)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	b923      	cbnz	r3, 8005f4a <_malloc_r+0x3e>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 f862 	bl	800600c <_sbrk_r>
 8005f48:	6038      	str	r0, [r7, #0]
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f85d 	bl	800600c <_sbrk_r>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d123      	bne.n	8005f9e <_malloc_r+0x92>
 8005f56:	230c      	movs	r3, #12
 8005f58:	6033      	str	r3, [r6, #0]
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f000 f86c 	bl	8006038 <__malloc_unlock>
 8005f60:	e7e3      	b.n	8005f2a <_malloc_r+0x1e>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	1b5b      	subs	r3, r3, r5
 8005f66:	d417      	bmi.n	8005f98 <_malloc_r+0x8c>
 8005f68:	2b0b      	cmp	r3, #11
 8005f6a:	d903      	bls.n	8005f74 <_malloc_r+0x68>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	441c      	add	r4, r3
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	e004      	b.n	8005f7e <_malloc_r+0x72>
 8005f74:	6863      	ldr	r3, [r4, #4]
 8005f76:	42a2      	cmp	r2, r4
 8005f78:	bf0c      	ite	eq
 8005f7a:	600b      	streq	r3, [r1, #0]
 8005f7c:	6053      	strne	r3, [r2, #4]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f85a 	bl	8006038 <__malloc_unlock>
 8005f84:	f104 000b 	add.w	r0, r4, #11
 8005f88:	1d23      	adds	r3, r4, #4
 8005f8a:	f020 0007 	bic.w	r0, r0, #7
 8005f8e:	1ac2      	subs	r2, r0, r3
 8005f90:	d0cc      	beq.n	8005f2c <_malloc_r+0x20>
 8005f92:	1a1b      	subs	r3, r3, r0
 8005f94:	50a3      	str	r3, [r4, r2]
 8005f96:	e7c9      	b.n	8005f2c <_malloc_r+0x20>
 8005f98:	4622      	mov	r2, r4
 8005f9a:	6864      	ldr	r4, [r4, #4]
 8005f9c:	e7cc      	b.n	8005f38 <_malloc_r+0x2c>
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d0e3      	beq.n	8005f70 <_malloc_r+0x64>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f82e 	bl	800600c <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1dd      	bne.n	8005f70 <_malloc_r+0x64>
 8005fb4:	e7cf      	b.n	8005f56 <_malloc_r+0x4a>
 8005fb6:	bf00      	nop
 8005fb8:	200001a4 	.word	0x200001a4
 8005fbc:	200001a8 	.word	0x200001a8

08005fc0 <_realloc_r>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	460e      	mov	r6, r1
 8005fc8:	b921      	cbnz	r1, 8005fd4 <_realloc_r+0x14>
 8005fca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fce:	4611      	mov	r1, r2
 8005fd0:	f7ff bf9c 	b.w	8005f0c <_malloc_r>
 8005fd4:	b922      	cbnz	r2, 8005fe0 <_realloc_r+0x20>
 8005fd6:	f7ff ff49 	bl	8005e6c <_free_r>
 8005fda:	4625      	mov	r5, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe0:	f000 f830 	bl	8006044 <_malloc_usable_size_r>
 8005fe4:	42a0      	cmp	r0, r4
 8005fe6:	d20f      	bcs.n	8006008 <_realloc_r+0x48>
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4638      	mov	r0, r7
 8005fec:	f7ff ff8e 	bl	8005f0c <_malloc_r>
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d0f2      	beq.n	8005fdc <_realloc_r+0x1c>
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	f7ff ff0f 	bl	8005e1c <memcpy>
 8005ffe:	4631      	mov	r1, r6
 8006000:	4638      	mov	r0, r7
 8006002:	f7ff ff33 	bl	8005e6c <_free_r>
 8006006:	e7e9      	b.n	8005fdc <_realloc_r+0x1c>
 8006008:	4635      	mov	r5, r6
 800600a:	e7e7      	b.n	8005fdc <_realloc_r+0x1c>

0800600c <_sbrk_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d06      	ldr	r5, [pc, #24]	; (8006028 <_sbrk_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fa ffda 	bl	8000fd0 <_sbrk>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_sbrk_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_sbrk_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	200004bc 	.word	0x200004bc

0800602c <__malloc_lock>:
 800602c:	4801      	ldr	r0, [pc, #4]	; (8006034 <__malloc_lock+0x8>)
 800602e:	f000 b811 	b.w	8006054 <__retarget_lock_acquire_recursive>
 8006032:	bf00      	nop
 8006034:	200004c4 	.word	0x200004c4

08006038 <__malloc_unlock>:
 8006038:	4801      	ldr	r0, [pc, #4]	; (8006040 <__malloc_unlock+0x8>)
 800603a:	f000 b80c 	b.w	8006056 <__retarget_lock_release_recursive>
 800603e:	bf00      	nop
 8006040:	200004c4 	.word	0x200004c4

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <__retarget_lock_acquire_recursive>:
 8006054:	4770      	bx	lr

08006056 <__retarget_lock_release_recursive>:
 8006056:	4770      	bx	lr

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
