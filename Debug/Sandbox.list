
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800a038  0800a038  0001a038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d4  0800a4d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4d4  0800a4d4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4d4  0800a4d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  200001e0  0800a6c0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800a6c0  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017648  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ab  00000000  00000000  00037858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e825  00000000  00000000  0003d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e08  00000000  00000000  0005bb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b13ba  00000000  00000000  0007396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  00124d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a01c 	.word	0x0800a01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a01c 	.word	0x0800a01c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <serial_add_char>:

static Buffer BufferSerialInstance;


void serial_add_char(unsigned char c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	BufferSerialInstance.AddChar(c);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <serial_add_char+0x1c>)
 8000bb8:	f000 f81e 	bl	8000bf8 <_ZN6Buffer7AddCharEh>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200001fc 	.word	0x200001fc

08000bc8 <_ZN6BufferC1Ev>:


Buffer::Buffer()
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	23ff      	movs	r3, #255	; 0xff
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f006 fb73 	bl	80072c4 <memset>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
{}
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN6Buffer7AddCharEh>:

void Buffer::AddChar(unsigned char c)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	buf[index_in] = c;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	78f9      	ldrb	r1, [r7, #3]
 8000c0e:	54d1      	strb	r1, [r2, r3]
	index_in++;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	index_in = index_in % BUFF_SIZE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_ZN6Buffer7AddCharEh+0x50>)
 8000c26:	fba3 2301 	umull	r2, r3, r3, r1
 8000c2a:	09da      	lsrs	r2, r3, #7
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	1aca      	subs	r2, r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	80808081 	.word	0x80808081

08000c4c <_Z41__static_initialization_and_destruction_0ii>:
	{
		c = ReadChar();
		str[i] = c;
		i++;
	}
}
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d107      	bne.n	8000c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d102      	bne.n	8000c6c <_Z41__static_initialization_and_destruction_0ii+0x20>
static Buffer BufferSerialInstance;
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000c68:	f7ff ffae 	bl	8000bc8 <_ZN6BufferC1Ev>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200001fc 	.word	0x200001fc

08000c78 <_GLOBAL__sub_I_serial_add_char>:
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff ffe3 	bl	8000c4c <_Z41__static_initialization_and_destruction_0ii>
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SF04_CheckCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
 8000c94:	4613      	mov	r3, r2
 8000c96:	70bb      	strb	r3, [r7, #2]
    uint8_t crc = 0xFF;
 8000c98:	23ff      	movs	r3, #255	; 0xff
 8000c9a:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73bb      	strb	r3, [r7, #14]
 8000ca0:	e021      	b.n	8000ce6 <SF04_CheckCrc+0x5e>
    {
        crc ^= (data[byteCtr]);
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	4053      	eors	r3, r2
 8000cae:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	737b      	strb	r3, [r7, #13]
 8000cb4:	e011      	b.n	8000cda <SF04_CheckCrc+0x52>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da07      	bge.n	8000cce <SF04_CheckCrc+0x46>
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e002      	b.n	8000cd4 <SF04_CheckCrc+0x4c>
            else crc = (crc << 1);
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	737b      	strb	r3, [r7, #13]
 8000cda:	7b7b      	ldrb	r3, [r7, #13]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1ea      	bne.n	8000cb6 <SF04_CheckCrc+0x2e>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	73bb      	strb	r3, [r7, #14]
 8000ce6:	7bba      	ldrb	r2, [r7, #14]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3d9      	bcc.n	8000ca2 <SF04_CheckCrc+0x1a>
        }
    }
    if (crc != checksum) return CHECKSUM_ERROR;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	78bb      	ldrb	r3, [r7, #2]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <SF04_CheckCrc+0x72>
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	e000      	b.n	8000cfc <SF04_CheckCrc+0x74>
    else return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SF04_CalcCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000d14:	23ff      	movs	r3, #255	; 0xff
 8000d16:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73bb      	strb	r3, [r7, #14]
 8000d1c:	e021      	b.n	8000d62 <SF04_CalcCrc+0x5a>
    {
        crc ^= (data[byteCtr]);
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4053      	eors	r3, r2
 8000d2a:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	737b      	strb	r3, [r7, #13]
 8000d30:	e011      	b.n	8000d56 <SF04_CalcCrc+0x4e>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da07      	bge.n	8000d4a <SF04_CalcCrc+0x42>
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e002      	b.n	8000d50 <SF04_CalcCrc+0x48>
            else crc = (crc << 1);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000d50:	7b7b      	ldrb	r3, [r7, #13]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	737b      	strb	r3, [r7, #13]
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1ea      	bne.n	8000d32 <SF04_CalcCrc+0x2a>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	73bb      	strb	r3, [r7, #14]
 8000d62:	7bba      	ldrb	r2, [r7, #14]
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3d9      	bcc.n	8000d1e <SF04_CalcCrc+0x16>
        }
    }
    return crc;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(huart, UART3_rxBuffer, 1, 100);
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	4908      	ldr	r1, [pc, #32]	; (8000da8 <HAL_UART_RxCpltCallback+0x30>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f005 fb1f 	bl	80063ca <HAL_UART_Transmit>
    serial_add_char(UART3_rxBuffer[0]);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_UART_RxCpltCallback+0x30>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff09 	bl	8000ba8 <serial_add_char>
    HAL_UART_Receive_IT(huart, UART3_rxBuffer, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	4903      	ldr	r1, [pc, #12]	; (8000da8 <HAL_UART_RxCpltCallback+0x30>)
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f005 fba9 	bl	80064f2 <HAL_UART_Receive_IT>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000434 	.word	0x20000434

08000dac <printFloats>:
  // RX Done .. Do Something!
}


void printFloats(float in[], int size)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b09a      	sub	sp, #104	; 0x68
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
    char buffer[80]="";
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	224c      	movs	r2, #76	; 0x4c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fa7e 	bl	80072c4 <memset>

    for (int i = 0; i < size; i++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	667b      	str	r3, [r7, #100]	; 0x64
 8000dcc:	e019      	b.n	8000e02 <printFloats+0x56>
    {
        char txt[10];
        sprintf(txt, "%.2f ", in[i]);
 8000dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fbb5 	bl	8000548 <__aeabi_f2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	f107 0008 	add.w	r0, r7, #8
 8000de6:	4919      	ldr	r1, [pc, #100]	; (8000e4c <printFloats+0xa0>)
 8000de8:	f006 fede 	bl	8007ba8 <siprintf>
        strcat(buffer, txt);
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fef6 	bl	8007be8 <strcat>
    for (int i = 0; i < size; i++)
 8000dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dfe:	3301      	adds	r3, #1
 8000e00:	667b      	str	r3, [r7, #100]	; 0x64
 8000e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbe1      	blt.n	8000dce <printFloats+0x22>
    }
    strcat(buffer, "\n");
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9de 	bl	80001d0 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4413      	add	r3, r2
 8000e1e:	490c      	ldr	r1, [pc, #48]	; (8000e50 <printFloats+0xa4>)
 8000e20:	461a      	mov	r2, r3
 8000e22:	460b      	mov	r3, r1
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f9cf 	bl	80001d0 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0114 	add.w	r1, r7, #20
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <printFloats+0xa8>)
 8000e3e:	f005 fac4 	bl	80063ca <HAL_UART_Transmit>
}
 8000e42:	bf00      	nop
 8000e44:	3768      	adds	r7, #104	; 0x68
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800a038 	.word	0x0800a038
 8000e50:	0800a040 	.word	0x0800a040
 8000e54:	20000318 	.word	0x20000318

08000e58 <Tick_1ms>:
	buffer [size] = '\0';
	HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
}

void Tick_1ms()
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    //I2C reading
    //HAL_I2C_Master_Transmit_IT (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t * pData, uint16_t Size);
    //HAL_I2C_Master_Receive_IT (&hi2c1, 0x2E, rcv_txt, 2);
    //HAL_I2C_IsDeviceReady (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);

}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <RawToCalOffset>:

const int32_t PRESSURE_OFFSET   = 300;
const int32_t PRESSURE_GAIN     = 60000;

int32_t RawToCalOffset(int32_t raw, int32_t offset, int32_t gain_1000)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
    return (((raw - offset) * gain_1000) / 1000);
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <RawToCalOffset+0x30>)
 8000e82:	fb82 1203 	smull	r1, r2, r2, r3
 8000e86:	1192      	asrs	r2, r2, #6
 8000e88:	17db      	asrs	r3, r3, #31
 8000e8a:	1ad3      	subs	r3, r2, r3
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	10624dd3 	.word	0x10624dd3

08000e9c <RawToCal>:

int32_t RawToCal(int32_t raw, int32_t max_cal, int32_t max_raw)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
    return (raw * max_cal) / max_raw;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	fb02 f203 	mul.w	r2, r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <UpdatePWM>:

void UpdatePWM(uint32_t per1000)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    TIM15->CCR1 = per1000;
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <UpdatePWM+0x1c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40014000 	.word	0x40014000

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09a      	sub	sp, #104	; 0x68
 8000ee8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 f833 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f9c5 	bl	800127c <SystemClock_Config>
  //MX_USART3_UART_Init();
  //MX_DAC_Init();
  //MX_I2C1_Init();
  //MX_TIM15_Init();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f001 ffa2 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>
  // ??? TODO: !!! Comment in MX_DMA_Init() : HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); --> No interrupt required

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fc26 	bl	8001748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 fbaa 	bl	8001654 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f00:	f000 fc08 	bl	8001714 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f04:	f000 fa1e 	bl	8001344 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f08:	f000 fbd4 	bl	80016b4 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8000f0c:	f000 faa0 	bl	8001450 <MX_DAC_Init>
  MX_I2C1_Init();
 8000f10:	f000 fad2 	bl	80014b8 <MX_I2C1_Init>
  MX_TIM15_Init();
 8000f14:	f000 fb10 	bl	8001538 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  UpdatePWM(300);
 8000f18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f1c:	f7ff ffd2 	bl	8000ec4 <UpdatePWM>
  TIM15->CCER |= TIM_CCER_CC1E;
 8000f20:	4bc0      	ldr	r3, [pc, #768]	; (8001224 <main+0x340>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4abf      	ldr	r2, [pc, #764]	; (8001224 <main+0x340>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6213      	str	r3, [r2, #32]
  HAL_TIMEx_PWMN_Start(&htim15, HAL_TIM_ACTIVE_CHANNEL_1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	48be      	ldr	r0, [pc, #760]	; (8001228 <main+0x344>)
 8000f30:	f005 f85c 	bl	8005fec <HAL_TIMEx_PWMN_Start>

  // !!! Start UART before ADC  !!! ////////
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	49bd      	ldr	r1, [pc, #756]	; (800122c <main+0x348>)
 8000f38:	48bd      	ldr	r0, [pc, #756]	; (8001230 <main+0x34c>)
 8000f3a:	f005 fada 	bl	80064f2 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f3e:	2204      	movs	r2, #4
 8000f40:	49bc      	ldr	r1, [pc, #752]	; (8001234 <main+0x350>)
 8000f42:	48bd      	ldr	r0, [pc, #756]	; (8001238 <main+0x354>)
 8000f44:	f001 fa34 	bl	80023b0 <HAL_ADC_Start_DMA>

  uint8_t test[3] = {0xBE, 0xEF, 0x00};
 8000f48:	4abc      	ldr	r2, [pc, #752]	; (800123c <main+0x358>)
 8000f4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	4611      	mov	r1, r2
 8000f52:	8019      	strh	r1, [r3, #0]
 8000f54:	3302      	adds	r3, #2
 8000f56:	0c12      	lsrs	r2, r2, #16
 8000f58:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SF04_CalcCrc (test, 2);
 8000f5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f5e:	2102      	movs	r1, #2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fed1 	bl	8000d08 <SF04_CalcCrc>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  test[2] = crc;
 8000f6c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000f70:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  uint8_t cmd[3] = {0x36, 0x08, 0x00};
 8000f74:	4ab2      	ldr	r2, [pc, #712]	; (8001240 <main+0x35c>)
 8000f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	8019      	strh	r1, [r3, #0]
 8000f80:	3302      	adds	r3, #2
 8000f82:	0c12      	lsrs	r2, r2, #16
 8000f84:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd, 2);
 8000f86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff febb 	bl	8000d08 <SF04_CalcCrc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  cmd[2] = crc;
 8000f98:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000f9c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

  uint8_t cmd_status[3] = {0xE1, 0x02, 0x00};
 8000fa0:	4aa8      	ldr	r2, [pc, #672]	; (8001244 <main+0x360>)
 8000fa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	8019      	strh	r1, [r3, #0]
 8000fac:	3302      	adds	r3, #2
 8000fae:	0c12      	lsrs	r2, r2, #16
 8000fb0:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd_status, 2);
 8000fb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fea5 	bl	8000d08 <SF04_CalcCrc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  cmd_status[2] = crc;
 8000fc4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000fc8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

  HAL_Delay(200);
 8000fcc:	20c8      	movs	r0, #200	; 0xc8
 8000fce:	f001 f827 	bl	8002020 <HAL_Delay>

  uint8_t i2c_state = I2C_INIT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer [50];
  while (1)
  {
	  HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f001 f821 	bl	8002020 <HAL_Delay>

	  if (i2c_state == I2C_INIT)
 8000fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d137      	bne.n	8001056 <main+0x172>
	  {
	      uint8_t status = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	      HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f001 f817 	bl	8002020 <HAL_Delay>
          status = HAL_I2C_Master_Transmit(&hi2c1, SFM3219_ADDRESS<<1, cmd, 3, 1000);
 8000ff2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	215c      	movs	r1, #92	; 0x5c
 8001000:	4891      	ldr	r0, [pc, #580]	; (8001248 <main+0x364>)
 8001002:	f002 fc2b 	bl	800385c <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
          if (status == HAL_OK)
 800100c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <main+0x13e>
          {
              i2c_cnt_errors = 0;
 8001014:	4b8d      	ldr	r3, [pc, #564]	; (800124c <main+0x368>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
              i2c_state = I2C_READ;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001020:	e073      	b.n	800110a <main+0x226>
          }
          else
          {
              i2c_cnt_errors += 1;
 8001022:	4b8a      	ldr	r3, [pc, #552]	; (800124c <main+0x368>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b88      	ldr	r3, [pc, #544]	; (800124c <main+0x368>)
 800102c:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Init Failure\n\0");
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	4987      	ldr	r1, [pc, #540]	; (8001250 <main+0x36c>)
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fdb7 	bl	8007ba8 <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8c6 	bl	80001d0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 0118 	add.w	r1, r7, #24
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	4878      	ldr	r0, [pc, #480]	; (8001230 <main+0x34c>)
 8001050:	f005 f9bb 	bl	80063ca <HAL_UART_Transmit>
 8001054:	e059      	b.n	800110a <main+0x226>
          }
	  }
	  else if (i2c_state == I2C_READ)
 8001056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800105a:	2b01      	cmp	r3, #1
 800105c:	d155      	bne.n	800110a <main+0x226>
	  {
	      uint8_t status = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	      uint8_t i2c_rcv_buff[3] = {0x00, 0x00, 0x00};
 8001064:	4a7b      	ldr	r2, [pc, #492]	; (8001254 <main+0x370>)
 8001066:	463b      	mov	r3, r7
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	4611      	mov	r1, r2
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c12      	lsrs	r2, r2, #16
 8001072:	701a      	strb	r2, [r3, #0]
	      status = HAL_I2C_Master_Receive(&hi2c1, SFM3219_ADDRESS<<1, i2c_rcv_buff, 3, 1000);
 8001074:	463a      	mov	r2, r7
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2303      	movs	r3, #3
 800107e:	215c      	movs	r1, #92	; 0x5c
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <main+0x364>)
 8001082:	f002 fcdf 	bl	8003a44 <HAL_I2C_Master_Receive>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	      if (status == HAL_OK)
 800108c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001090:	2b00      	cmp	r3, #0
 8001092:	d116      	bne.n	80010c2 <main+0x1de>
          {
	          if (SF04_CheckCrc (i2c_rcv_buff, 2, i2c_rcv_buff[2]) != CHECKSUM_ERROR)
 8001094:	78ba      	ldrb	r2, [r7, #2]
 8001096:	463b      	mov	r3, r7
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fdf4 	bl	8000c88 <SF04_CheckCrc>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d02a      	beq.n	80010fc <main+0x218>
	          {
	              rawQout = (int16_t)(((uint16_t)i2c_rcv_buff[0])<<8 | i2c_rcv_buff[0]);
 80010a6:	783b      	ldrb	r3, [r7, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	783b      	ldrb	r3, [r7, #0]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b68      	ldr	r3, [pc, #416]	; (8001258 <main+0x374>)
 80010b8:	601a      	str	r2, [r3, #0]
	              i2c_cnt_errors = 0;
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <main+0x368>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e01c      	b.n	80010fc <main+0x218>
	          }
          }
          else
          {
              rawQout = 0xFFFFFF;
 80010c2:	4b65      	ldr	r3, [pc, #404]	; (8001258 <main+0x374>)
 80010c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80010c8:	601a      	str	r2, [r3, #0]
              i2c_cnt_errors += 1;
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <main+0x368>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b5e      	ldr	r3, [pc, #376]	; (800124c <main+0x368>)
 80010d4:	701a      	strb	r2, [r3, #0]
              sprintf (buffer, "!!! I2C Reading Failure\n\0");
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4960      	ldr	r1, [pc, #384]	; (800125c <main+0x378>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fd63 	bl	8007ba8 <siprintf>
              HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f872 	bl	80001d0 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	f107 0118 	add.w	r1, r7, #24
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	484e      	ldr	r0, [pc, #312]	; (8001230 <main+0x34c>)
 80010f8:	f005 f967 	bl	80063ca <HAL_UART_Transmit>
          }
	      if (i2c_cnt_errors > 20)
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <main+0x368>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b14      	cmp	r3, #20
 8001102:	d902      	bls.n	800110a <main+0x226>
	      {
	          i2c_state = I2C_INIT;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	      }
	  }

	  cmd_target += 2;
 800110a:	4b55      	ldr	r3, [pc, #340]	; (8001260 <main+0x37c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3302      	adds	r3, #2
 8001110:	4a53      	ldr	r2, [pc, #332]	; (8001260 <main+0x37c>)
 8001112:	6013      	str	r3, [r2, #0]
	  cmd_target = cmd_target % 4096;
 8001114:	4b52      	ldr	r3, [pc, #328]	; (8001260 <main+0x37c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	4a50      	ldr	r2, [pc, #320]	; (8001260 <main+0x37c>)
 800111e:	6013      	str	r3, [r2, #0]
	  DAC1->DHR12R1 = cmd_target;
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <main+0x380>)
 8001122:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <main+0x37c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6093      	str	r3, [r2, #8]

	  UpdatePWM(cmd_target%200);
 8001128:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <main+0x37c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <main+0x384>)
 800112e:	fba3 1302 	umull	r1, r3, r3, r2
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	21c8      	movs	r1, #200	; 0xc8
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fec1 	bl	8000ec4 <UpdatePWM>

	  //printVal(cmd_target, adc_buf[0], adc_buf[1], adc_buf[2], adc_buf[3], rawQout);

	  Measures[MEAS_POUT]   = RawToCalOffset(adc_buf[ADC_A1_PA0_POUT], 2047, 42);
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <main+0x350>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	222a      	movs	r2, #42	; 0x2a
 8001148:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe8b 	bl	8000e68 <RawToCalOffset>
 8001152:	4603      	mov	r3, r0
 8001154:	4a45      	ldr	r2, [pc, #276]	; (800126c <main+0x388>)
 8001156:	6013      	str	r3, [r2, #0]
	  Measures[MEAS_QOUT]   = RawToCalOffset(rawQout, -24576, 588);
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <main+0x374>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8001160:	4943      	ldr	r1, [pc, #268]	; (8001270 <main+0x38c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe80 	bl	8000e68 <RawToCalOffset>
 8001168:	4603      	mov	r3, r0
 800116a:	4a40      	ldr	r2, [pc, #256]	; (800126c <main+0x388>)
 800116c:	6053      	str	r3, [r2, #4]
	  Measures[MEAS_S_MOT]  = RawToCal(adc_buf[ADC_A7_PC1_S_MOT], MAX_SPEED, MAX_RAW_ADC);
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <main+0x350>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4618      	mov	r0, r3
 8001174:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001178:	f640 72ff 	movw	r2, #4095	; 0xfff
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fe8d 	bl	8000e9c <RawToCal>
 8001182:	4603      	mov	r3, r0
 8001184:	4a39      	ldr	r2, [pc, #228]	; (800126c <main+0x388>)
 8001186:	6113      	str	r3, [r2, #16]
	  Measures[MEAS_I_MOT]  = RawToCal(adc_buf[ADC_A6_PC0_I_MOT], MAX_CURRENT, MAX_RAW_ADC);
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <main+0x350>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001192:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fe80 	bl	8000e9c <RawToCal>
 800119c:	4603      	mov	r3, r0
 800119e:	4a33      	ldr	r2, [pc, #204]	; (800126c <main+0x388>)
 80011a0:	60d3      	str	r3, [r2, #12]

	  float tick = HAL_GetTick();
 80011a2:	f000 ff31 	bl	8002008 <HAL_GetTick>
 80011a6:	ee07 0a90 	vmov	s15, r0
 80011aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ae:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  tick /= 1000;
 80011b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011b6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001274 <main+0x390>
 80011ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011be:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	  float measures[5];
	  measures[0] = tick;
 80011c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011c4:	607b      	str	r3, [r7, #4]
	  measures[1] = ((float)Measures[MEAS_QOUT])/100;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <main+0x388>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001278 <main+0x394>
 80011d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011da:	edc7 7a02 	vstr	s15, [r7, #8]
	  measures[2] = ((float)Measures[MEAS_POUT]);
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <main+0x388>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ea:	edc7 7a03 	vstr	s15, [r7, #12]
	  measures[3] = ((float)Measures[MEAS_S_MOT]);
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <main+0x388>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fa:	edc7 7a04 	vstr	s15, [r7, #16]
	  measures[4] = ((float)Measures[MEAS_I_MOT])/100;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <main+0x388>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001278 <main+0x394>
 800120e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001212:	edc7 7a05 	vstr	s15, [r7, #20]
	  printFloats(measures, 5);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2105      	movs	r1, #5
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fdc6 	bl	8000dac <printFloats>
  {
 8001220:	e6da      	b.n	8000fd8 <main+0xf4>
 8001222:	bf00      	nop
 8001224:	40014000 	.word	0x40014000
 8001228:	200003e8 	.word	0x200003e8
 800122c:	20000434 	.word	0x20000434
 8001230:	20000318 	.word	0x20000318
 8001234:	200005f0 	.word	0x200005f0
 8001238:	20000534 	.word	0x20000534
 800123c:	0800a0ac 	.word	0x0800a0ac
 8001240:	0800a0b0 	.word	0x0800a0b0
 8001244:	0800a0b4 	.word	0x0800a0b4
 8001248:	2000039c 	.word	0x2000039c
 800124c:	20000304 	.word	0x20000304
 8001250:	0800a078 	.word	0x0800a078
 8001254:	0800a0b8 	.word	0x0800a0b8
 8001258:	20000308 	.word	0x20000308
 800125c:	0800a090 	.word	0x0800a090
 8001260:	20000000 	.word	0x20000000
 8001264:	40007400 	.word	0x40007400
 8001268:	51eb851f 	.word	0x51eb851f
 800126c:	20000598 	.word	0x20000598
 8001270:	ffffa000 	.word	0xffffa000
 8001274:	447a0000 	.word	0x447a0000
 8001278:	42c80000 	.word	0x42c80000

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09c      	sub	sp, #112	; 0x70
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f81a 	bl	80072c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2234      	movs	r2, #52	; 0x34
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 f80c 	bl	80072c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012ac:	2303      	movs	r3, #3
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ba:	2301      	movs	r3, #1
 80012bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	2310      	movs	r3, #16
 80012c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 ff3c 	bl	8004154 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012e2:	f000 faad 	bl	8001840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001300:	2102      	movs	r1, #2
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fe2e 	bl	8004f64 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800130e:	f000 fa97 	bl	8001840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM15
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <SystemClock_Config+0xc4>)
 8001314:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f004 f852 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001332:	f000 fa85 	bl	8001840 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3770      	adds	r7, #112	; 0x70
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	000400a0 	.word	0x000400a0

08001344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134a:	463b      	mov	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <MX_ADC1_Init+0x108>)
 800135c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_ADC1_Init+0x108>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_ADC1_Init+0x108>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <MX_ADC1_Init+0x108>)
 8001370:	2201      	movs	r2, #1
 8001372:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001374:	4b35      	ldr	r3, [pc, #212]	; (800144c <MX_ADC1_Init+0x108>)
 8001376:	2201      	movs	r2, #1
 8001378:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_ADC1_Init+0x108>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <MX_ADC1_Init+0x108>)
 8001384:	2200      	movs	r2, #0
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <MX_ADC1_Init+0x108>)
 800138a:	2201      	movs	r2, #1
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_ADC1_Init+0x108>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_ADC1_Init+0x108>)
 8001396:	2204      	movs	r2, #4
 8001398:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_ADC1_Init+0x108>)
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_ADC1_Init+0x108>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_ADC1_Init+0x108>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_ADC1_Init+0x108>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b4:	4825      	ldr	r0, [pc, #148]	; (800144c <MX_ADC1_Init+0x108>)
 80013b6:	f000 fe75 	bl	80020a4 <HAL_ADC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80013c0:	f000 fa3e 	bl	8001840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80013d0:	2303      	movs	r3, #3
 80013d2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	481a      	ldr	r0, [pc, #104]	; (800144c <MX_ADC1_Init+0x108>)
 80013e2:	f001 f881 	bl	80024e8 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013ec:	f000 fa28 	bl	8001840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <MX_ADC1_Init+0x108>)
 80013fe:	f001 f873 	bl	80024e8 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001408:	f000 fa1a 	bl	8001840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800140c:	2306      	movs	r3, #6
 800140e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001410:	2303      	movs	r3, #3
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_ADC1_Init+0x108>)
 800141a:	f001 f865 	bl	80024e8 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001424:	f000 fa0c 	bl	8001840 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001428:	2307      	movs	r3, #7
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800142c:	2304      	movs	r3, #4
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_ADC1_Init+0x108>)
 8001436:	f001 f857 	bl	80024e8 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001440:	f000 f9fe 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000534 	.word	0x20000534

08001450 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_DAC_Init+0x5c>)
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <MX_DAC_Init+0x60>)
 8001464:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_DAC_Init+0x5c>)
 8001468:	f001 fd29 	bl	8002ebe <HAL_DAC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001472:	f000 f9e5 	bl	8001840 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_DAC_Init+0x5c>)
 8001486:	f001 fd73 	bl	8002f70 <HAL_DAC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001490:	f000 f9d6 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = cmd_target;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <MX_DAC_Init+0x60>)
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_DAC_Init+0x64>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6093      	str	r3, [r2, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <MX_DAC_Init+0x5c>)
 80014a0:	f001 fd2f 	bl	8002f02 <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000584 	.word	0x20000584
 80014b0:	40007400 	.word	0x40007400
 80014b4:	20000000 	.word	0x20000000

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_I2C1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_I2C1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_I2C1_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_I2C1_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_I2C1_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MX_I2C1_Init+0x74>)
 80014f4:	f002 f922 	bl	800373c <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 f99f 	bl	8001840 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4809      	ldr	r0, [pc, #36]	; (800152c <MX_I2C1_Init+0x74>)
 8001506:	f002 fd8d 	bl	8004024 <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 f996 	bl	8001840 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_I2C1_Init+0x74>)
 8001518:	f002 fdcf 	bl	80040ba <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f98d 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000039c 	.word	0x2000039c
 8001530:	40005400 	.word	0x40005400
 8001534:	2000090e 	.word	0x2000090e

08001538 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	222c      	movs	r2, #44	; 0x2c
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f005 fead 	bl	80072c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <MX_TIM15_Init+0x114>)
 800156c:	4a38      	ldr	r2, [pc, #224]	; (8001650 <MX_TIM15_Init+0x118>)
 800156e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <MX_TIM15_Init+0x114>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <MX_TIM15_Init+0x114>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <MX_TIM15_Init+0x114>)
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <MX_TIM15_Init+0x114>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <MX_TIM15_Init+0x114>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <MX_TIM15_Init+0x114>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001596:	482d      	ldr	r0, [pc, #180]	; (800164c <MX_TIM15_Init+0x114>)
 8001598:	f004 f8ac 	bl	80056f4 <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80015a2:	f000 f94d 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015b2:	4619      	mov	r1, r3
 80015b4:	4825      	ldr	r0, [pc, #148]	; (800164c <MX_TIM15_Init+0x114>)
 80015b6:	f004 fdb7 	bl	8006128 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f000 f93e 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4818      	ldr	r0, [pc, #96]	; (800164c <MX_TIM15_Init+0x114>)
 80015ea:	f004 f8db 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80015f4:	f000 f924 	bl	8001840 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_1);
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_TIM15_Init+0x114>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_TIM15_Init+0x114>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0208 	bic.w	r2, r2, #8
 8001606:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM15_Init+0x114>)
 8001630:	f004 fde0 	bl	80061f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM15_Init+0x106>
  {
    Error_Handler();
 800163a:	f000 f901 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM15_Init+0x114>)
 8001640:	f000 fa74 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8001644:	bf00      	nop
 8001646:	3758      	adds	r7, #88	; 0x58
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200003e8 	.word	0x200003e8
 8001650:	40014000 	.word	0x40014000

08001654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_USART2_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001660:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART2_UART_Init+0x58>)
 8001698:	f004 fe49 	bl	800632e <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 f8cd 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000600 	.word	0x20000600
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <MX_USART3_UART_Init+0x5c>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART3_UART_Init+0x58>)
 80016f8:	f004 fe19 	bl	800632e <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001702:	f000 f89d 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000318 	.word	0x20000318
 8001710:	40004800 	.word	0x40004800

08001714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <MX_DMA_Init+0x30>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <MX_DMA_Init+0x30>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <MX_DMA_Init+0x30>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200b      	movs	r0, #11
 8001738:	f001 fb8b 	bl	8002e52 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	4a33      	ldr	r2, [pc, #204]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001768:	6153      	str	r3, [r2, #20]
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <MX_GPIO_Init+0xe8>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <MX_GPIO_Init+0xe8>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001780:	6153      	str	r3, [r2, #20]
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a27      	ldr	r2, [pc, #156]	; (8001830 <MX_GPIO_Init+0xe8>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_GPIO_Init+0xe8>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a21      	ldr	r2, [pc, #132]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MX_GPIO_Init+0xe8>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c4:	481b      	ldr	r0, [pc, #108]	; (8001834 <MX_GPIO_Init+0xec>)
 80017c6:	f001 ffa1 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	481a      	ldr	r0, [pc, #104]	; (8001838 <MX_GPIO_Init+0xf0>)
 80017d0:	f001 ff9c 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_GPIO_Init+0xf4>)
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <MX_GPIO_Init+0xf0>)
 80017ea:	f001 fe1d 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_GPIO_Init+0xec>)
 8001808:	f001 fe0e 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001814:	2302      	movs	r3, #2
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_GPIO_Init+0xf0>)
 8001824:	f001 fe00 	bl	8003428 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400
 8001838:	48000800 	.word	0x48000800
 800183c:	10210000 	.word	0x10210000

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x44>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x44>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x44>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x44>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x44>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001882:	2007      	movs	r0, #7
 8001884:	f001 fada 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d165      	bne.n	8001982 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6153      	str	r3, [r2, #20]
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a2e      	ldr	r2, [pc, #184]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a28      	ldr	r2, [pc, #160]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_ADC_MspInit+0xf8>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018fe:	2303      	movs	r3, #3
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001902:	2303      	movs	r3, #3
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	481f      	ldr	r0, [pc, #124]	; (8001990 <HAL_ADC_MspInit+0xfc>)
 8001912:	f001 fd89 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001916:	2303      	movs	r3, #3
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800191a:	2303      	movs	r3, #3
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 fd7c 	bl	8003428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001932:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_ADC_MspInit+0x104>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_ADC_MspInit+0x100>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_ADC_MspInit+0x100>)
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001956:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_ADC_MspInit+0x100>)
 800195a:	2220      	movs	r2, #32
 800195c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001964:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <HAL_ADC_MspInit+0x100>)
 8001968:	f001 fb4f 	bl	800300a <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001972:	f7ff ff65 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_ADC_MspInit+0x100>)
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <HAL_ADC_MspInit+0x100>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	48000800 	.word	0x48000800
 8001994:	200005ac 	.word	0x200005ac
 8001998:	40020008 	.word	0x40020008

0800199c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <HAL_DAC_MspInit+0x74>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d124      	bne.n	8001a08 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_DAC_MspInit+0x78>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ee:	2310      	movs	r3, #16
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 fd10 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40007400 	.word	0x40007400
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <HAL_I2C_MspInit+0xc8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d14d      	bne.n	8001ad6 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f001 fccd 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a92:	2312      	movs	r3, #18
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480f      	ldr	r0, [pc, #60]	; (8001ae8 <HAL_I2C_MspInit+0xd0>)
 8001aaa:	f001 fcbd 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_I2C_MspInit+0xcc>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201f      	movs	r0, #31
 8001acc:	f001 f9c1 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ad0:	201f      	movs	r0, #31
 8001ad2:	f001 f9da 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_TIM_PWM_MspInit+0x38>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10b      	bne.n	8001b16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40014000 	.word	0x40014000
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_TIM_MspPostInit+0x64>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11c      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	6153      	str	r3, [r2, #20]
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b84:	f001 fc50 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40014000 	.word	0x40014000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000400 	.word	0x48000400

08001b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a37      	ldr	r2, [pc, #220]	; (8001c98 <HAL_UART_MspInit+0xfc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d131      	bne.n	8001c22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0c:	f001 fc0c 	bl	8003428 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2026      	movs	r0, #38	; 0x26
 8001c16:	f001 f91c 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c1a:	2026      	movs	r0, #38	; 0x26
 8001c1c:	f001 f935 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c20:	e035      	b.n	8001c8e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0x104>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d130      	bne.n	8001c8e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c4e:	6153      	str	r3, [r2, #20]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_UART_MspInit+0x100>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <HAL_UART_MspInit+0x108>)
 8001c7a:	f001 fbd5 	bl	8003428 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2027      	movs	r0, #39	; 0x27
 8001c84:	f001 f8e5 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c88:	2027      	movs	r0, #39	; 0x27
 8001c8a:	f001 f8fe 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	; 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf4:	f000 f974 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Tick_1ms();
 8001cf8:	f7ff f8ae 	bl	8000e58 <Tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Channel1_IRQHandler+0x10>)
 8001d06:	f001 fa9d 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200005ac 	.word	0x200005ac

08001d14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <I2C1_EV_IRQHandler+0x10>)
 8001d1a:	f001 ff89 	bl	8003c30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000039c 	.word	0x2000039c

08001d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART2_IRQHandler+0x10>)
 8001d2e:	f004 fc1d 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000600 	.word	0x20000600

08001d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USART3_IRQHandler+0x10>)
 8001d42:	f004 fc13 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000318 	.word	0x20000318

08001d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_kill>:

int _kill(int pid, int sig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d6a:	f005 fa81 	bl	8007270 <__errno>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2216      	movs	r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
	return -1;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_exit>:

void _exit (int status)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffe7 	bl	8001d60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d92:	e7fe      	b.n	8001d92 <_exit+0x12>

08001d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e00a      	b.n	8001dbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001da6:	f3af 8000 	nop.w
 8001daa:	4601      	mov	r1, r0
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf0      	blt.n	8001da6 <_read+0x12>
	}

return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e009      	b.n	8001df4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbf1      	blt.n	8001de0 <_write+0x12>
	}
	return len;
 8001dfc:	687b      	ldr	r3, [r7, #4]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_close>:

int _close(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_isatty>:

int _isatty(int file)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	return 1;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f005 f9e6 	bl	8007270 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20004000 	.word	0x20004000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	2000030c 	.word	0x2000030c
 8001ed8:	20000698 	.word	0x20000698

08001edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0b      	ldr	r4, [pc, #44]	; (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f2a:	f7ff ffd7 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f005 f9a5 	bl	800727c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f32:	f7fe ffd7 	bl	8000ee4 <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f38:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f44:	0800a4e0 	.word	0x0800a4e0
  ldr r2, =_sbss
 8001f48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f4c:	20000698 	.word	0x20000698

08001f50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x28>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x28>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 ff69 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fc6c 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000

08001f80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 ff81 	bl	8002ea6 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 ff49 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c
 8002004:	20000684 	.word	0x20000684

08002008 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;  
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000684 	.word	0x20000684

08002020 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000000c 	.word	0x2000000c

08002068 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b09a      	sub	sp, #104	; 0x68
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e169      	b.n	8002398 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d176      	bne.n	80021c4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d152      	bne.n	8002184 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fbcb 	bl	8001894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d13b      	bne.n	8002184 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fd65 	bl	8002bdc <ADC_Disable>
 8002112:	4603      	mov	r3, r0
 8002114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	d12f      	bne.n	8002184 <HAL_ADC_Init+0xe0>
 8002124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12b      	bne.n	8002184 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	f043 0202 	orr.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800214e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800215e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_ADC_Init+0x2fc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a8f      	ldr	r2, [pc, #572]	; (80023a4 <HAL_ADC_Init+0x300>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9a      	lsrs	r2, r3, #18
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002176:	e002      	b.n	800217e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a0:	d110      	bne.n	80021c4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f023 0312 	bic.w	r3, r3, #18
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 80d6 	bne.w	800237e <HAL_ADC_Init+0x2da>
 80021d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80d1 	bne.w	800237e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 80c9 	bne.w	800237e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_ADC_Init+0x304>)
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_ADC_Init+0x180>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_ADC_Init+0x180>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_ADC_Init+0x182>
 8002224:	2300      	movs	r3, #0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d11c      	bne.n	8002264 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800222a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_ADC_Init+0x1a8>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_Init+0x1a8>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_ADC_Init+0x1aa>
 800224c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	431a      	orrs	r2, r3
 8002260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002262:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e5b      	ldrb	r3, [r3, #25]
 8002268:	035b      	lsls	r3, r3, #13
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800226e:	2a01      	cmp	r2, #1
 8002270:	d002      	beq.n	8002278 <HAL_ADC_Init+0x1d4>
 8002272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002276:	e000      	b.n	800227a <HAL_ADC_Init+0x1d6>
 8002278:	2200      	movs	r2, #0
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800228a:	4313      	orrs	r3, r2
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d11b      	bne.n	80022d0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7e5b      	ldrb	r3, [r3, #25]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	3b01      	subs	r3, #1
 80022a6:	045a      	lsls	r2, r3, #17
 80022a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
 80022b2:	e00d      	b.n	80022d0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d007      	beq.n	80022e8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e4:	4313      	orrs	r3, r2
 80022e6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d114      	bne.n	8002320 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002304:	f023 0302 	bic.w	r3, r3, #2
 8002308:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7e1b      	ldrb	r3, [r3, #24]
 800230e:	039a      	lsls	r2, r3, #14
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4313      	orrs	r3, r2
 800231a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800231c:	4313      	orrs	r3, r2
 800231e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_ADC_Init+0x308>)
 8002328:	4013      	ands	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10c      	bne.n	8002356 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f023 010f 	bic.w	r1, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
 8002354:	e007      	b.n	8002366 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 020f 	bic.w	r2, r2, #15
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f023 0303 	bic.w	r3, r3, #3
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
 800237c:	e00a      	b.n	8002394 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f023 0312 	bic.w	r3, r3, #18
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002398:	4618      	mov	r0, r3
 800239a:	3768      	adds	r7, #104	; 0x68
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000004 	.word	0x20000004
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	50000300 	.word	0x50000300
 80023ac:	fff0c007 	.word	0xfff0c007

080023b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d17e      	bne.n	80024cc <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_Start_DMA+0x2c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e07a      	b.n	80024d2 <HAL_ADC_Start_DMA+0x122>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fb9b 	bl	8002b20 <ADC_Enable>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d166      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d106      	bne.n	800244e <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f023 0206 	bic.w	r2, r3, #6
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
 800244c:	e002      	b.n	8002454 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_ADC_Start_DMA+0x12c>)
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_ADC_Start_DMA+0x130>)
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_ADC_Start_DMA+0x134>)
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	221c      	movs	r2, #28
 800247a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0210 	orr.w	r2, r2, #16
 800248a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	4619      	mov	r1, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f000 fdf4 	bl	8003098 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0204 	orr.w	r2, r2, #4
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	e006      	b.n	80024d0 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024ca:	e001      	b.n	80024d0 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
 80024ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	08002a55 	.word	0x08002a55
 80024e0:	08002acf 	.word	0x08002acf
 80024e4:	08002aeb 	.word	0x08002aeb

080024e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b09b      	sub	sp, #108	; 0x6c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x22>
 8002506:	2302      	movs	r3, #2
 8002508:	e299      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x556>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 827d 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b04      	cmp	r3, #4
 8002528:	d81c      	bhi.n	8002564 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	461a      	mov	r2, r3
 800253e:	231f      	movs	r3, #31
 8002540:	4093      	lsls	r3, r2
 8002542:	43db      	mvns	r3, r3
 8002544:	4019      	ands	r1, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
 8002562:	e063      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d81e      	bhi.n	80025aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	3b1e      	subs	r3, #30
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	3b1e      	subs	r3, #30
 800259c:	fa00 f203 	lsl.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
 80025a8:	e040      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b0e      	cmp	r3, #14
 80025b0:	d81e      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	3b3c      	subs	r3, #60	; 0x3c
 80025c6:	221f      	movs	r2, #31
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4019      	ands	r1, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	3b3c      	subs	r3, #60	; 0x3c
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
 80025ee:	e01d      	b.n	800262c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	3b5a      	subs	r3, #90	; 0x5a
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	4019      	ands	r1, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3b5a      	subs	r3, #90	; 0x5a
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 80e5 	bne.w	8002806 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d91c      	bls.n	800267e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6999      	ldr	r1, [r3, #24]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	3b1e      	subs	r3, #30
 8002656:	2207      	movs	r2, #7
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6898      	ldr	r0, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	3b1e      	subs	r3, #30
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	e019      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6959      	ldr	r1, [r3, #20]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	2207      	movs	r2, #7
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4019      	ands	r1, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6898      	ldr	r0, [r3, #8]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d84f      	bhi.n	8002774 <HAL_ADC_ConfigChannel+0x28c>
 80026d4:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_ADC_ConfigChannel+0x1f4>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	0800270f 	.word	0x0800270f
 80026e4:	08002731 	.word	0x08002731
 80026e8:	08002753 	.word	0x08002753
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f2:	4b99      	ldr	r3, [pc, #612]	; (8002958 <HAL_ADC_ConfigChannel+0x470>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	0691      	lsls	r1, r2, #26
 80026fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026fe:	430a      	orrs	r2, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800270a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800270c:	e07e      	b.n	800280c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002714:	4b90      	ldr	r3, [pc, #576]	; (8002958 <HAL_ADC_ConfigChannel+0x470>)
 8002716:	4013      	ands	r3, r2
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	0691      	lsls	r1, r2, #26
 800271e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002720:	430a      	orrs	r2, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800272c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800272e:	e06d      	b.n	800280c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_ADC_ConfigChannel+0x470>)
 8002738:	4013      	ands	r3, r2
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	0691      	lsls	r1, r2, #26
 8002740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002742:	430a      	orrs	r2, r1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800274e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002750:	e05c      	b.n	800280c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002758:	4b7f      	ldr	r3, [pc, #508]	; (8002958 <HAL_ADC_ConfigChannel+0x470>)
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	0691      	lsls	r1, r2, #26
 8002762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002764:	430a      	orrs	r2, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002770:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002772:	e04b      	b.n	800280c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	069b      	lsls	r3, r3, #26
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002796:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d10a      	bne.n	800280a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002804:	e001      	b.n	800280a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <HAL_ADC_ConfigChannel+0x324>
      break;
 800280a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_ADC_ConfigChannel+0x344>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x344>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_ADC_ConfigChannel+0x346>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 80ff 	bne.w	8002a32 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d00f      	beq.n	800285c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	400a      	ands	r2, r1
 8002856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800285a:	e049      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b09      	cmp	r3, #9
 800287c:	d91c      	bls.n	80028b8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6999      	ldr	r1, [r3, #24]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	3b1b      	subs	r3, #27
 8002890:	2207      	movs	r2, #7
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	4019      	ands	r1, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6898      	ldr	r0, [r3, #8]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	3b1b      	subs	r3, #27
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	619a      	str	r2, [r3, #24]
 80028b6:	e01b      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6959      	ldr	r1, [r3, #20]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	2207      	movs	r2, #7
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4019      	ands	r1, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6898      	ldr	r0, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_ADC_ConfigChannel+0x474>)
 80028f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800290c:	2b11      	cmp	r3, #17
 800290e:	d105      	bne.n	800291c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002920:	2b12      	cmp	r3, #18
 8002922:	f040 8086 	bne.w	8002a32 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d17f      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10d      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x478>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d106      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x478>
 8002952:	2301      	movs	r3, #1
 8002954:	e005      	b.n	8002962 <HAL_ADC_ConfigChannel+0x47a>
 8002956:	bf00      	nop
 8002958:	83fff000 	.word	0x83fff000
 800295c:	50000300 	.word	0x50000300
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d150      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002966:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x4a0>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x4a0>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_ADC_ConfigChannel+0x4a2>
 8002988:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13c      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d11d      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x4ea>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299e:	d118      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <HAL_ADC_ConfigChannel+0x564>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_ADC_ConfigChannel+0x568>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0c9a      	lsrs	r2, r3, #18
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029d0:	e02e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b11      	cmp	r3, #17
 80029d8:	d10b      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x50a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80029ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029f0:	e01e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d11a      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a06:	e013      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a1a:	e00a      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a2e:	e000      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a30:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	376c      	adds	r7, #108	; 0x6c
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	431bde83 	.word	0x431bde83

08002a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d126      	bne.n	8002abc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d115      	bne.n	8002ab4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff fad7 	bl	8002068 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002aba:	e004      	b.n	8002ac6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff facd 	bl	800207c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff fabd 	bl	8002090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <ADC_Enable+0x2c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <ADC_Enable+0x2c>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <ADC_Enable+0x2e>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d13c      	bne.n	8002bcc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <ADC_Enable+0xb8>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0210 	orr.w	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e028      	b.n	8002bce <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b8c:	f7ff fa3c 	bl	8002008 <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b92:	e014      	b.n	8002bbe <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b94:	f7ff fa38 	bl	8002008 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d90d      	bls.n	8002bbe <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d1e3      	bne.n	8002b94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	8000003f 	.word	0x8000003f

08002bdc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d108      	bne.n	8002c08 <ADC_Disable+0x2c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <ADC_Disable+0x2c>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <ADC_Disable+0x2e>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d040      	beq.n	8002c90 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030d 	and.w	r3, r3, #13
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10f      	bne.n	8002c3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0202 	orr.w	r2, r2, #2
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2203      	movs	r2, #3
 8002c32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c34:	f7ff f9e8 	bl	8002008 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c3a:	e022      	b.n	8002c82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0210 	orr.w	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e01c      	b.n	8002c92 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c58:	f7ff f9d6 	bl	8002008 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d90d      	bls.n	8002c82 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e007      	b.n	8002c92 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d0e3      	beq.n	8002c58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e014      	b.n	8002efa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	791b      	ldrb	r3, [r3, #4]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe fd5b 	bl	800199c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	795b      	ldrb	r3, [r3, #5]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DAC_Start+0x16>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e025      	b.n	8002f64 <HAL_DAC_Start+0x62>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2202      	movs	r2, #2
 8002f22:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f42:	2b3c      	cmp	r3, #60	; 0x3c
 8002f44:	d107      	bne.n	8002f56 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	795b      	ldrb	r3, [r3, #5]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_DAC_ConfigChannel+0x20>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e036      	b.n	8002ffe <HAL_DAC_ConfigChannel+0x8e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002fa4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	22c0      	movs	r2, #192	; 0xc0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e037      	b.n	8003090 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9b8 	bl	80033e8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}  
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_DMA_Start_IT+0x20>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e04a      	b.n	800314e <HAL_DMA_Start_IT+0xb6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d13a      	bne.n	8003140 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f94b 	bl	800338a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 020e 	orr.w	r2, r2, #14
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e00f      	b.n	800312e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 020a 	orr.w	r2, r2, #10
 800311c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e005      	b.n	800314c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003148:	2302      	movs	r3, #2
 800314a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800314c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003164:	2b02      	cmp	r3, #2
 8003166:	d008      	beq.n	800317a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e020      	b.n	80031bc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 020e 	bic.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2101      	movs	r1, #1
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d005      	beq.n	80031ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2204      	movs	r2, #4
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	e027      	b.n	800323a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020e 	bic.w	r2, r2, #14
 80031f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f202 	lsl.w	r2, r1, r2
 8003218:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
    } 
  }
  return status;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2204      	movs	r2, #4
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d024      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x72>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01f      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	2104      	movs	r1, #4
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d06a      	beq.n	8003382 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	e065      	b.n	8003382 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2202      	movs	r2, #2
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_IRQHandler+0xdc>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 020a 	bic.w	r2, r2, #10
 80032ec:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2102      	movs	r1, #2
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d035      	beq.n	8003382 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800331e:	e030      	b.n	8003382 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d028      	beq.n	8003382 <HAL_DMA_IRQHandler+0x13e>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d023      	beq.n	8003382 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 020e 	bic.w	r2, r2, #14
 8003348:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
    }
  }
}  
 8003380:	e7ff      	b.n	8003382 <HAL_DMA_IRQHandler+0x13e>
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d108      	bne.n	80033ca <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033c8:	e007      	b.n	80033da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	60da      	str	r2, [r3, #12]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <DMA_CalcBaseAndBitshift+0x34>)
 80033f8:	4413      	add	r3, r2
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <DMA_CalcBaseAndBitshift+0x38>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a06      	ldr	r2, [pc, #24]	; (8003424 <DMA_CalcBaseAndBitshift+0x3c>)
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	bffdfff8 	.word	0xbffdfff8
 8003420:	cccccccd 	.word	0xcccccccd
 8003424:	40020000 	.word	0x40020000

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003436:	e14e      	b.n	80036d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	4013      	ands	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 8140 	beq.w	80036d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d00b      	beq.n	8003470 <HAL_GPIO_Init+0x48>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d007      	beq.n	8003470 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003464:	2b11      	cmp	r3, #17
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b12      	cmp	r3, #18
 800346e:	d130      	bne.n	80034d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a6:	2201      	movs	r2, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 0201 	and.w	r2, r3, #1
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0xea>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b12      	cmp	r3, #18
 8003510:	d123      	bne.n	800355a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	08da      	lsrs	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	220f      	movs	r2, #15
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	6939      	ldr	r1, [r7, #16]
 8003556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 809a 	beq.w	80036d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359c:	4b55      	ldr	r3, [pc, #340]	; (80036f4 <HAL_GPIO_Init+0x2cc>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4a54      	ldr	r2, [pc, #336]	; (80036f4 <HAL_GPIO_Init+0x2cc>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6193      	str	r3, [r2, #24]
 80035a8:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <HAL_GPIO_Init+0x2cc>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035b4:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_GPIO_Init+0x2d0>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035de:	d013      	beq.n	8003608 <HAL_GPIO_Init+0x1e0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a46      	ldr	r2, [pc, #280]	; (80036fc <HAL_GPIO_Init+0x2d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00d      	beq.n	8003604 <HAL_GPIO_Init+0x1dc>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_GPIO_Init+0x2d8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <HAL_GPIO_Init+0x1d8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a44      	ldr	r2, [pc, #272]	; (8003704 <HAL_GPIO_Init+0x2dc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_GPIO_Init+0x1d4>
 80035f8:	2303      	movs	r3, #3
 80035fa:	e006      	b.n	800360a <HAL_GPIO_Init+0x1e2>
 80035fc:	2305      	movs	r3, #5
 80035fe:	e004      	b.n	800360a <HAL_GPIO_Init+0x1e2>
 8003600:	2302      	movs	r3, #2
 8003602:	e002      	b.n	800360a <HAL_GPIO_Init+0x1e2>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_GPIO_Init+0x1e2>
 8003608:	2300      	movs	r3, #0
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	f002 0203 	and.w	r2, r2, #3
 8003610:	0092      	lsls	r2, r2, #2
 8003612:	4093      	lsls	r3, r2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800361a:	4937      	ldr	r1, [pc, #220]	; (80036f8 <HAL_GPIO_Init+0x2d0>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800364c:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003676:	4a24      	ldr	r2, [pc, #144]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	43db      	mvns	r3, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036ca:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f aea9 	bne.w	8003438 <HAL_GPIO_Init+0x10>
  }
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010000 	.word	0x40010000
 80036fc:	48000400 	.word	0x48000400
 8003700:	48000800 	.word	0x48000800
 8003704:	48000c00 	.word	0x48000c00
 8003708:	40010400 	.word	0x40010400

0800370c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800371c:	787b      	ldrb	r3, [r7, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003728:	e002      	b.n	8003730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e081      	b.n	8003852 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe f958 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e006      	b.n	80037c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d104      	bne.n	80037d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	ea42 0103 	orr.w	r1, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	817b      	strh	r3, [r7, #10]
 800386c:	4613      	mov	r3, r2
 800386e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b20      	cmp	r3, #32
 800387a:	f040 80da 	bne.w	8003a32 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2C_Master_Transmit+0x30>
 8003888:	2302      	movs	r3, #2
 800388a:	e0d3      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003894:	f7fe fbb8 	bl	8002008 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2319      	movs	r3, #25
 80038a0:	2201      	movs	r2, #1
 80038a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa00 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0be      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2221      	movs	r2, #33	; 0x21
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2210      	movs	r2, #16
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	893a      	ldrh	r2, [r7, #8]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2bff      	cmp	r3, #255	; 0xff
 80038e6:	d90e      	bls.n	8003906 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	22ff      	movs	r2, #255	; 0xff
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_I2C_Master_Transmit+0x1e0>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb62 	bl	8003fc8 <I2C_TransferConfig>
 8003904:	e06c      	b.n	80039e0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_I2C_Master_Transmit+0x1e0>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fb51 	bl	8003fc8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003926:	e05b      	b.n	80039e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f9fd 	bl	8003d2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e07b      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d034      	beq.n	80039e0 <HAL_I2C_Master_Transmit+0x184>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	d130      	bne.n	80039e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f98f 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04d      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2bff      	cmp	r3, #255	; 0xff
 80039a0:	d90e      	bls.n	80039c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	22ff      	movs	r2, #255	; 0xff
 80039a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	8979      	ldrh	r1, [r7, #10]
 80039b0:	2300      	movs	r3, #0
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fb05 	bl	8003fc8 <I2C_TransferConfig>
 80039be:	e00f      	b.n	80039e0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	8979      	ldrh	r1, [r7, #10]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 faf4 	bl	8003fc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d19e      	bne.n	8003928 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9dc 	bl	8003dac <I2C_WaitOnSTOPFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e01a      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2220      	movs	r2, #32
 8003a04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a12:	400b      	ands	r3, r1
 8003a14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	80002000 	.word	0x80002000
 8003a40:	fe00e800 	.word	0xfe00e800

08003a44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	460b      	mov	r3, r1
 8003a52:	817b      	strh	r3, [r7, #10]
 8003a54:	4613      	mov	r3, r2
 8003a56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	f040 80db 	bne.w	8003c1c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2C_Master_Receive+0x30>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0d4      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fe fac4 	bl	8002008 <HAL_GetTick>
 8003a80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2319      	movs	r3, #25
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f90c 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0bf      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2222      	movs	r2, #34	; 0x22
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2bff      	cmp	r3, #255	; 0xff
 8003ace:	d90e      	bls.n	8003aee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	22ff      	movs	r2, #255	; 0xff
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	8979      	ldrh	r1, [r7, #10]
 8003ade:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <HAL_I2C_Master_Receive+0x1e4>)
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fa6e 	bl	8003fc8 <I2C_TransferConfig>
 8003aec:	e06d      	b.n	8003bca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	8979      	ldrh	r1, [r7, #10]
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_I2C_Master_Receive+0x1e4>)
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fa5d 	bl	8003fc8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b0e:	e05c      	b.n	8003bca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f985 	bl	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e07c      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d034      	beq.n	8003bca <HAL_I2C_Master_Receive+0x186>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d130      	bne.n	8003bca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f89a 	bl	8003cac <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e04d      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d90e      	bls.n	8003baa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	8979      	ldrh	r1, [r7, #10]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fa10 	bl	8003fc8 <I2C_TransferConfig>
 8003ba8:	e00f      	b.n	8003bca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	8979      	ldrh	r1, [r7, #10]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f9ff 	bl	8003fc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d19d      	bne.n	8003b10 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6a39      	ldr	r1, [r7, #32]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f8e7 	bl	8003dac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01a      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_I2C_Master_Receive+0x1e8>)
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	80002400 	.word	0x80002400
 8003c2c:	fe00e800 	.word	0xfe00e800

08003c30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d103      	bne.n	8003c82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d007      	beq.n	8003ca0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	e022      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d01e      	beq.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe f99f 	bl	8002008 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d113      	bne.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e00f      	b.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d0cd      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d38:	e02c      	b.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f8dc 	bl	8003efc <I2C_IsAcknowledgeFailed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e02a      	b.n	8003da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d01e      	beq.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe f957 	bl	8002008 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d113      	bne.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d1cb      	bne.n	8003d3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	e028      	b.n	8003e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f89c 	bl	8003efc <I2C_IsAcknowledgeFailed>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e026      	b.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe f91b 	bl	8002008 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	f043 0220 	orr.w	r2, r3, #32
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e007      	b.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d1cf      	bne.n	8003dba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e30:	e055      	b.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f860 	bl	8003efc <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e053      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d129      	bne.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d105      	bne.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e03f      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2220      	movs	r2, #32
 8003e74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e022      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe f8ae 	bl	8002008 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d1a2      	bne.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	fe00e800 	.word	0xfe00e800

08003efc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d151      	bne.n	8003fba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f16:	e022      	b.n	8003f5e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d01e      	beq.n	8003f5e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7fe f872 	bl	8002008 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <I2C_IsAcknowledgeFailed+0x3a>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e02e      	b.n	8003fbc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d1d5      	bne.n	8003f18 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2210      	movs	r2, #16
 8003f72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fe71 	bl	8003c64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0204 	orr.w	r2, r3, #4
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	fe00e800 	.word	0xfe00e800

08003fc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	817b      	strh	r3, [r7, #10]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	0d5b      	lsrs	r3, r3, #21
 8003fe4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <I2C_TransferConfig+0x58>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	43db      	mvns	r3, r3
 8003fee:	ea02 0103 	and.w	r1, r2, r3
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ff8:	7a7b      	ldrb	r3, [r7, #9]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	431a      	orrs	r2, r3
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	03ff63ff 	.word	0x03ff63ff

08004024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b20      	cmp	r3, #32
 8004038:	d138      	bne.n	80040ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004044:	2302      	movs	r3, #2
 8004046:	e032      	b.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6819      	ldr	r1, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d139      	bne.n	8004144 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040da:	2302      	movs	r3, #2
 80040dc:	e033      	b.n	8004146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800410c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800415a:	af00      	add	r7, sp, #0
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f000 bef4 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 816a 	beq.w	8004452 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800417e:	4bb3      	ldr	r3, [pc, #716]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b04      	cmp	r3, #4
 8004188:	d00c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800418a:	4bb0      	ldr	r3, [pc, #704]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d159      	bne.n	800424a <HAL_RCC_OscConfig+0xf6>
 8004196:	4bad      	ldr	r3, [pc, #692]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d152      	bne.n	800424a <HAL_RCC_OscConfig+0xf6>
 80041a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_OscConfig+0x82>
 80041d0:	4b9e      	ldr	r3, [pc, #632]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	e015      	b.n	8004202 <HAL_RCC_OscConfig+0xae>
 80041d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80041ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80041f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80041fe:	4b93      	ldr	r3, [pc, #588]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004206:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800420a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800420e:	fa92 f2a2 	rbit	r2, r2
 8004212:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004216:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	f042 0220 	orr.w	r2, r2, #32
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f002 021f 	and.w	r2, r2, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 810c 	beq.w	8004450 <HAL_RCC_OscConfig+0x2fc>
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8106 	bne.w	8004450 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f000 be86 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x110>
 8004256:	4b7d      	ldr	r3, [pc, #500]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7c      	ldr	r2, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e030      	b.n	80042c6 <HAL_RCC_OscConfig+0x172>
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x134>
 800426e:	4b77      	ldr	r3, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a76      	ldr	r2, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b74      	ldr	r3, [pc, #464]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e01e      	b.n	80042c6 <HAL_RCC_OscConfig+0x172>
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004292:	d10c      	bne.n	80042ae <HAL_RCC_OscConfig+0x15a>
 8004294:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6c      	ldr	r2, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 800429a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a69      	ldr	r2, [pc, #420]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e00b      	b.n	80042c6 <HAL_RCC_OscConfig+0x172>
 80042ae:	4b67      	ldr	r3, [pc, #412]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a66      	ldr	r2, [pc, #408]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b64      	ldr	r3, [pc, #400]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a63      	ldr	r2, [pc, #396]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042c6:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	f023 020f 	bic.w	r2, r3, #15
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	495d      	ldr	r1, [pc, #372]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d059      	beq.n	8004398 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fd fe90 	bl	8002008 <HAL_GetTick>
 80042e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ee:	f7fd fe8b 	bl	8002008 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d902      	bls.n	8004304 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	f000 be29 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004308:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004318:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0x1e2>
 8004330:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x20e>
 8004336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800433a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800434a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800434e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004352:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004366:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800436a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800436e:	fa92 f2a2 	rbit	r2, r2
 8004372:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004376:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800437a:	fab2 f282 	clz	r2, r2
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	f042 0220 	orr.w	r2, r2, #32
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	f002 021f 	and.w	r2, r2, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ab      	beq.n	80042ee <HAL_RCC_OscConfig+0x19a>
 8004396:	e05c      	b.n	8004452 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd fe36 	bl	8002008 <HAL_GetTick>
 800439c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a2:	f7fd fe31 	bl	8002008 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d902      	bls.n	80043b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f000 bdcf 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
 80043b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80043c4:	fa93 f3a3 	rbit	r3, r3
 80043c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80043cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d102      	bne.n	80043ea <HAL_RCC_OscConfig+0x296>
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x2c2>
 80043ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004402:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004406:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_RCC_OscConfig+0x2f8>)
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800441a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800441e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004422:	fa92 f2a2 	rbit	r2, r2
 8004426:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800442a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800442e:	fab2 f282 	clz	r2, r2
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	f042 0220 	orr.w	r2, r2, #32
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f002 021f 	and.w	r2, r2, #31
 800443e:	2101      	movs	r1, #1
 8004440:	fa01 f202 	lsl.w	r2, r1, r2
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ab      	bne.n	80043a2 <HAL_RCC_OscConfig+0x24e>
 800444a:	e002      	b.n	8004452 <HAL_RCC_OscConfig+0x2fe>
 800444c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 816f 	beq.w	8004740 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004462:	4bd0      	ldr	r3, [pc, #832]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800446e:	4bcd      	ldr	r3, [pc, #820]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d16c      	bne.n	8004554 <HAL_RCC_OscConfig+0x400>
 800447a:	4bca      	ldr	r3, [pc, #808]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d166      	bne.n	8004554 <HAL_RCC_OscConfig+0x400>
 8004486:	2302      	movs	r3, #2
 8004488:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004498:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d102      	bne.n	80044b6 <HAL_RCC_OscConfig+0x362>
 80044b0:	4bbc      	ldr	r3, [pc, #752]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e013      	b.n	80044de <HAL_RCC_OscConfig+0x38a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80044c8:	2302      	movs	r3, #2
 80044ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80044ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80044da:	4bb2      	ldr	r3, [pc, #712]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2202      	movs	r2, #2
 80044e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80044e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044e8:	fa92 f2a2 	rbit	r2, r2
 80044ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80044f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	f042 0220 	orr.w	r2, r2, #32
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f002 021f 	and.w	r2, r2, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_RCC_OscConfig+0x3cc>
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d002      	beq.n	8004520 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f000 bd1b 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	21f8      	movs	r1, #248	; 0xf8
 8004530:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004538:	fa91 f1a1 	rbit	r1, r1
 800453c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004540:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004544:	fab1 f181 	clz	r1, r1
 8004548:	b2c9      	uxtb	r1, r1
 800454a:	408b      	lsls	r3, r1
 800454c:	4995      	ldr	r1, [pc, #596]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	e0f5      	b.n	8004740 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8085 	beq.w	800466a <HAL_RCC_OscConfig+0x516>
 8004560:	2301      	movs	r3, #1
 8004562:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004572:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	2301      	movs	r3, #1
 800458a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd fd3c 	bl	8002008 <HAL_GetTick>
 8004590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004596:	f7fd fd37 	bl	8002008 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d902      	bls.n	80045ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	f000 bcd5 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80045be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_OscConfig+0x488>
 80045d6:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e013      	b.n	8004604 <HAL_RCC_OscConfig+0x4b0>
 80045dc:	2302      	movs	r3, #2
 80045de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80045ee:	2302      	movs	r3, #2
 80045f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004600:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2202      	movs	r2, #2
 8004606:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800460a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800460e:	fa92 f2a2 	rbit	r2, r2
 8004612:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004616:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800461a:	fab2 f282 	clz	r2, r2
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	f042 0220 	orr.w	r2, r2, #32
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	f002 021f 	and.w	r2, r2, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f202 	lsl.w	r2, r1, r2
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0af      	beq.n	8004596 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	4b5b      	ldr	r3, [pc, #364]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	21f8      	movs	r1, #248	; 0xf8
 8004646:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800464e:	fa91 f1a1 	rbit	r1, r1
 8004652:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004656:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800465a:	fab1 f181 	clz	r1, r1
 800465e:	b2c9      	uxtb	r1, r1
 8004660:	408b      	lsls	r3, r1
 8004662:	4950      	ldr	r1, [pc, #320]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	e06a      	b.n	8004740 <HAL_RCC_OscConfig+0x5ec>
 800466a:	2301      	movs	r3, #1
 800466c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004674:	fa93 f3a3 	rbit	r3, r3
 8004678:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800467c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800468a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fd fcb7 	bl	8002008 <HAL_GetTick>
 800469a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a0:	f7fd fcb2 	bl	8002008 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d902      	bls.n	80046b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	f000 bc50 	b.w	8004f56 <HAL_RCC_OscConfig+0xe02>
 80046b6:	2302      	movs	r3, #2
 80046b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80046c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_OscConfig+0x592>
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	e013      	b.n	800470e <HAL_RCC_OscConfig+0x5ba>
 80046e6:	2302      	movs	r3, #2
 80046e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046f8:	2302      	movs	r3, #2
 80046fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <HAL_RCC_OscConfig+0x650>)
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2202      	movs	r2, #2
 8004710:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004714:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004718:	fa92 f2a2 	rbit	r2, r2
 800471c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004720:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004724:	fab2 f282 	clz	r2, r2
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f042 0220 	orr.w	r2, r2, #32
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	f002 021f 	and.w	r2, r2, #31
 8004734:	2101      	movs	r1, #1
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1af      	bne.n	80046a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80da 	beq.w	8004904 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d069      	beq.n	800482e <HAL_RCC_OscConfig+0x6da>
 800475a:	2301      	movs	r3, #1
 800475c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800476c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x654>)
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	461a      	mov	r2, r3
 8004780:	2301      	movs	r3, #1
 8004782:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fd fc40 	bl	8002008 <HAL_GetTick>
 8004788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fd fc3b 	bl	8002008 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d906      	bls.n	80047ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e3d9      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	10908120 	.word	0x10908120
 80047ac:	2302      	movs	r3, #2
 80047ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80047c2:	2202      	movs	r2, #2
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80047da:	2202      	movs	r2, #2
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	fa93 f2a3 	rbit	r2, r3
 80047e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80047ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	4ba5      	ldr	r3, [pc, #660]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80047f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047f6:	2102      	movs	r1, #2
 80047f8:	6019      	str	r1, [r3, #0]
 80047fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	fa93 f1a3 	rbit	r1, r3
 8004804:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004808:	6019      	str	r1, [r3, #0]
  return result;
 800480a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2101      	movs	r1, #1
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0b0      	beq.n	800478e <HAL_RCC_OscConfig+0x63a>
 800482c:	e06a      	b.n	8004904 <HAL_RCC_OscConfig+0x7b0>
 800482e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	fa93 f2a3 	rbit	r2, r3
 8004840:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004844:	601a      	str	r2, [r3, #0]
  return result;
 8004846:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800484a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	4b8c      	ldr	r3, [pc, #560]	; (8004a88 <HAL_RCC_OscConfig+0x934>)
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7fd fbd2 	bl	8002008 <HAL_GetTick>
 8004864:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	e009      	b.n	800487e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486a:	f7fd fbcd 	bl	8002008 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e36b      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 800487e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004882:	2202      	movs	r2, #2
 8004884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	fa93 f2a3 	rbit	r2, r3
 8004890:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800489a:	2202      	movs	r2, #2
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	fa93 f2a3 	rbit	r2, r3
 80048a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80048b2:	2202      	movs	r2, #2
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80048c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c6:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80048c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80048ce:	2102      	movs	r1, #2
 80048d0:	6019      	str	r1, [r3, #0]
 80048d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	fa93 f1a3 	rbit	r1, r3
 80048dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048e0:	6019      	str	r1, [r3, #0]
  return result;
 80048e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1b2      	bne.n	800486a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004904:	1d3b      	adds	r3, r7, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8158 	beq.w	8004bc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491a:	4b5a      	ldr	r3, [pc, #360]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d112      	bne.n	800494c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	4b57      	ldr	r3, [pc, #348]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	4a56      	ldr	r2, [pc, #344]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	61d3      	str	r3, [r2, #28]
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	4b4f      	ldr	r3, [pc, #316]	; (8004a8c <HAL_RCC_OscConfig+0x938>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d11a      	bne.n	800498e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004958:	4b4c      	ldr	r3, [pc, #304]	; (8004a8c <HAL_RCC_OscConfig+0x938>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <HAL_RCC_OscConfig+0x938>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004964:	f7fd fb50 	bl	8002008 <HAL_GetTick>
 8004968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fd fb4b 	bl	8002008 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e2e9      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <HAL_RCC_OscConfig+0x938>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x852>
 8004998:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	6213      	str	r3, [r2, #32]
 80049a4:	e02f      	b.n	8004a06 <HAL_RCC_OscConfig+0x8b2>
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x876>
 80049b0:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	4a33      	ldr	r2, [pc, #204]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6213      	str	r3, [r2, #32]
 80049bc:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a30      	ldr	r2, [pc, #192]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	6213      	str	r3, [r2, #32]
 80049c8:	e01d      	b.n	8004a06 <HAL_RCC_OscConfig+0x8b2>
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0x89a>
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	6213      	str	r3, [r2, #32]
 80049e0:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4a27      	ldr	r2, [pc, #156]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6213      	str	r3, [r2, #32]
 80049ec:	e00b      	b.n	8004a06 <HAL_RCC_OscConfig+0x8b2>
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4a24      	ldr	r2, [pc, #144]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6213      	str	r3, [r2, #32]
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a06:	1d3b      	adds	r3, r7, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d06b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fd fafa 	bl	8002008 <HAL_GetTick>
 8004a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a18:	e00b      	b.n	8004a32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fd faf5 	bl	8002008 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e291      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004a32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004a36:	2202      	movs	r2, #2
 8004a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	fa93 f2a3 	rbit	r2, r3
 8004a44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a4e:	2202      	movs	r2, #2
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	fa93 f2a3 	rbit	r2, r3
 8004a5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a60:	601a      	str	r2, [r3, #0]
  return result;
 8004a62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d109      	bne.n	8004a90 <HAL_RCC_OscConfig+0x93c>
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <HAL_RCC_OscConfig+0x930>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	e014      	b.n	8004aac <HAL_RCC_OscConfig+0x958>
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	10908120 	.word	0x10908120
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a94:	2202      	movs	r2, #2
 8004a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	fa93 f2a3 	rbit	r2, r3
 8004aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	4bbb      	ldr	r3, [pc, #748]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	6011      	str	r1, [r2, #0]
 8004ab4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	fa92 f1a2 	rbit	r1, r2
 8004abe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ac2:	6011      	str	r1, [r2, #0]
  return result;
 8004ac4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f002 021f 	and.w	r2, r2, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d099      	beq.n	8004a1a <HAL_RCC_OscConfig+0x8c6>
 8004ae6:	e063      	b.n	8004bb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae8:	f7fd fa8e 	bl	8002008 <HAL_GetTick>
 8004aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af0:	e00b      	b.n	8004b0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fd fa89 	bl	8002008 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e225      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b0e:	2202      	movs	r2, #2
 8004b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	fa93 f2a3 	rbit	r2, r3
 8004b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b26:	2202      	movs	r2, #2
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	fa93 f2a3 	rbit	r2, r3
 8004b34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b38:	601a      	str	r2, [r3, #0]
  return result;
 8004b3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_OscConfig+0xa06>
 8004b54:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	e00d      	b.n	8004b76 <HAL_RCC_OscConfig+0xa22>
 8004b5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004b5e:	2202      	movs	r2, #2
 8004b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	fa93 f2a3 	rbit	r2, r3
 8004b6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4b89      	ldr	r3, [pc, #548]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	6011      	str	r1, [r2, #0]
 8004b7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	fa92 f1a2 	rbit	r1, r2
 8004b88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004b8c:	6011      	str	r1, [r2, #0]
  return result;
 8004b8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	fab2 f282 	clz	r2, r2
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f002 021f 	and.w	r2, r2, #31
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1a0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb8:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4a76      	ldr	r2, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 81c2 	beq.w	8004f54 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	4b71      	ldr	r3, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	f000 819c 	beq.w	8004f16 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f040 8114 	bne.w	8004e12 <HAL_RCC_OscConfig+0xcbe>
 8004bea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	fa93 f2a3 	rbit	r2, r3
 8004bfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004c02:	601a      	str	r2, [r3, #0]
  return result;
 8004c04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004c08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd f9f2 	bl	8002008 <HAL_GetTick>
 8004c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c28:	e009      	b.n	8004c3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd f9ed 	bl	8002008 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e18b      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004c3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	fa93 f2a3 	rbit	r2, r3
 8004c52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c56:	601a      	str	r2, [r3, #0]
  return result;
 8004c58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <HAL_RCC_OscConfig+0xb24>
 8004c72:	4b49      	ldr	r3, [pc, #292]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	e01b      	b.n	8004cb0 <HAL_RCC_OscConfig+0xb5c>
 8004c78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	fa93 f2a3 	rbit	r2, r3
 8004c8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	fa93 f2a3 	rbit	r2, r3
 8004ca6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004cb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	fa92 f1a2 	rbit	r1, r2
 8004cc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004cc8:	6011      	str	r1, [r2, #0]
  return result;
 8004cca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	fab2 f282 	clz	r2, r2
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f042 0220 	orr.w	r2, r2, #32
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	f002 021f 	and.w	r2, r2, #31
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d19e      	bne.n	8004c2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cf4:	1d3b      	adds	r3, r7, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	430b      	orrs	r3, r1
 8004d02:	4925      	ldr	r1, [pc, #148]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
 8004d08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa93 f2a3 	rbit	r2, r3
 8004d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d20:	601a      	str	r2, [r3, #0]
  return result;
 8004d22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fd f963 	bl	8002008 <HAL_GetTick>
 8004d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d46:	e009      	b.n	8004d5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd f95e 	bl	8002008 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0fc      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004d5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	fa93 f2a3 	rbit	r2, r3
 8004d70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d74:	601a      	str	r2, [r3, #0]
  return result;
 8004d76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCC_OscConfig+0xc48>
 8004d90:	4b01      	ldr	r3, [pc, #4]	; (8004d98 <HAL_RCC_OscConfig+0xc44>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	e01e      	b.n	8004dd4 <HAL_RCC_OscConfig+0xc80>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	fa93 f2a3 	rbit	r2, r3
 8004db0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	fa93 f2a3 	rbit	r2, r3
 8004dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	4b63      	ldr	r3, [pc, #396]	; (8004f60 <HAL_RCC_OscConfig+0xe0c>)
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	fa92 f1a2 	rbit	r1, r2
 8004de8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004dec:	6011      	str	r1, [r2, #0]
  return result;
 8004dee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	fab2 f282 	clz	r2, r2
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	f042 0220 	orr.w	r2, r2, #32
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	f002 021f 	and.w	r2, r2, #31
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d09b      	beq.n	8004d48 <HAL_RCC_OscConfig+0xbf4>
 8004e10:	e0a0      	b.n	8004f54 <HAL_RCC_OscConfig+0xe00>
 8004e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	fa93 f2a3 	rbit	r2, r3
 8004e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e2a:	601a      	str	r2, [r3, #0]
  return result;
 8004e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	461a      	mov	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd f8de 	bl	8002008 <HAL_GetTick>
 8004e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e50:	e009      	b.n	8004e66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fd f8d9 	bl	8002008 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e077      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
 8004e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fa93 f2a3 	rbit	r2, r3
 8004e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7e:	601a      	str	r2, [r3, #0]
  return result;
 8004e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xd4c>
 8004e9a:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCC_OscConfig+0xe0c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	e01b      	b.n	8004ed8 <HAL_RCC_OscConfig+0xd84>
 8004ea0:	f107 0320 	add.w	r3, r7, #32
 8004ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f107 0320 	add.w	r3, r7, #32
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	fa93 f2a3 	rbit	r2, r3
 8004eb4:	f107 031c 	add.w	r3, r7, #28
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f107 0318 	add.w	r3, r7, #24
 8004ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f107 0318 	add.w	r3, r7, #24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	fa93 f2a3 	rbit	r2, r3
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_RCC_OscConfig+0xe0c>)
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f107 0210 	add.w	r2, r7, #16
 8004edc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ee0:	6011      	str	r1, [r2, #0]
 8004ee2:	f107 0210 	add.w	r2, r7, #16
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	fa92 f1a2 	rbit	r1, r2
 8004eec:	f107 020c 	add.w	r2, r7, #12
 8004ef0:	6011      	str	r1, [r2, #0]
  return result;
 8004ef2:	f107 020c 	add.w	r2, r7, #12
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	fab2 f282 	clz	r2, r2
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	f042 0220 	orr.w	r2, r2, #32
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	f002 021f 	and.w	r2, r2, #31
 8004f08:	2101      	movs	r1, #1
 8004f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d19e      	bne.n	8004e52 <HAL_RCC_OscConfig+0xcfe>
 8004f14:	e01e      	b.n	8004f54 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e018      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <HAL_RCC_OscConfig+0xe0c>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d108      	bne.n	8004f50 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004f3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b09e      	sub	sp, #120	; 0x78
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e162      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b90      	ldr	r3, [pc, #576]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 0207 	bic.w	r2, r3, #7
 8004f92:	498b      	ldr	r1, [pc, #556]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b89      	ldr	r3, [pc, #548]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e14a      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b82      	ldr	r3, [pc, #520]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	497f      	ldr	r1, [pc, #508]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80dc 	beq.w	8005190 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d13c      	bne.n	800505a <HAL_RCC_ClockConfig+0xf6>
 8004fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d102      	bne.n	800500a <HAL_RCC_ClockConfig+0xa6>
 8005004:	4b6f      	ldr	r3, [pc, #444]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	e00f      	b.n	800502a <HAL_RCC_ClockConfig+0xc6>
 800500a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800500e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005012:	fa93 f3a3 	rbit	r3, r3
 8005016:	667b      	str	r3, [r7, #100]	; 0x64
 8005018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800501c:	663b      	str	r3, [r7, #96]	; 0x60
 800501e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800502e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005030:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005032:	fa92 f2a2 	rbit	r2, r2
 8005036:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005038:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800503a:	fab2 f282 	clz	r2, r2
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	f042 0220 	orr.w	r2, r2, #32
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	f002 021f 	and.w	r2, r2, #31
 800504a:	2101      	movs	r1, #1
 800504c:	fa01 f202 	lsl.w	r2, r1, r2
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d17b      	bne.n	800514e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0f3      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d13c      	bne.n	80050dc <HAL_RCC_ClockConfig+0x178>
 8005062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005066:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_ClockConfig+0x128>
 8005086:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e00f      	b.n	80050ac <HAL_RCC_ClockConfig+0x148>
 800508c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
 800509a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800509e:	643b      	str	r3, [r7, #64]	; 0x40
 80050a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a8:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80050b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b4:	fa92 f2a2 	rbit	r2, r2
 80050b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80050ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050bc:	fab2 f282 	clz	r2, r2
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	f042 0220 	orr.w	r2, r2, #32
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	f002 021f 	and.w	r2, r2, #31
 80050cc:	2101      	movs	r1, #1
 80050ce:	fa01 f202 	lsl.w	r2, r1, r2
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13a      	bne.n	800514e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b2      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
 80050dc:	2302      	movs	r3, #2
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	fa93 f3a3 	rbit	r3, r3
 80050e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80050e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_ClockConfig+0x1a0>
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e00d      	b.n	8005120 <HAL_RCC_ClockConfig+0x1bc>
 8005104:	2302      	movs	r3, #2
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	fa93 f3a3 	rbit	r3, r3
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	2302      	movs	r3, #2
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2202      	movs	r2, #2
 8005122:	61ba      	str	r2, [r7, #24]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	fa92 f2a2 	rbit	r2, r2
 800512a:	617a      	str	r2, [r7, #20]
  return result;
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	fab2 f282 	clz	r2, r2
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	f042 0220 	orr.w	r2, r2, #32
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	f002 021f 	and.w	r2, r2, #31
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f202 	lsl.w	r2, r1, r2
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e079      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	491a      	ldr	r1, [pc, #104]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 800515c:	4313      	orrs	r3, r2
 800515e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005160:	f7fc ff52 	bl	8002008 <HAL_GetTick>
 8005164:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	e00a      	b.n	800517e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005168:	f7fc ff4e 	bl	8002008 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e061      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_RCC_ClockConfig+0x260>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 020c 	and.w	r2, r3, #12
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	429a      	cmp	r2, r3
 800518e:	d1eb      	bne.n	8005168 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d214      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	4906      	ldr	r1, [pc, #24]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <HAL_RCC_ClockConfig+0x25c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e040      	b.n	8005242 <HAL_RCC_ClockConfig+0x2de>
 80051c0:	40022000 	.word	0x40022000
 80051c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <HAL_RCC_ClockConfig+0x2e8>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	491a      	ldr	r1, [pc, #104]	; (800524c <HAL_RCC_ClockConfig+0x2e8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <HAL_RCC_ClockConfig+0x2e8>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4912      	ldr	r1, [pc, #72]	; (800524c <HAL_RCC_ClockConfig+0x2e8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005206:	f000 f829 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800520a:	4601      	mov	r1, r0
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <HAL_RCC_ClockConfig+0x2e8>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005214:	22f0      	movs	r2, #240	; 0xf0
 8005216:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	fa92 f2a2 	rbit	r2, r2
 800521e:	60fa      	str	r2, [r7, #12]
  return result;
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	fab2 f282 	clz	r2, r2
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	40d3      	lsrs	r3, r2
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_RCC_ClockConfig+0x2ec>)
 800522c:	5cd3      	ldrb	r3, [r2, r3]
 800522e:	fa21 f303 	lsr.w	r3, r1, r3
 8005232:	4a08      	ldr	r2, [pc, #32]	; (8005254 <HAL_RCC_ClockConfig+0x2f0>)
 8005234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <HAL_RCC_ClockConfig+0x2f4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fc fea0 	bl	8001f80 <HAL_InitTick>
  
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3778      	adds	r7, #120	; 0x78
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40021000 	.word	0x40021000
 8005250:	0800a0bc 	.word	0x0800a0bc
 8005254:	20000004 	.word	0x20000004
 8005258:	20000008 	.word	0x20000008

0800525c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	b08b      	sub	sp, #44	; 0x2c
 8005260:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	2300      	movs	r3, #0
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d002      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x30>
 8005286:	2b08      	cmp	r3, #8
 8005288:	d003      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x36>
 800528a:	e03c      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800528c:	4b24      	ldr	r3, [pc, #144]	; (8005320 <HAL_RCC_GetSysClockFreq+0xc4>)
 800528e:	623b      	str	r3, [r7, #32]
      break;
 8005290:	e03c      	b.n	800530c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005298:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800529c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	fa92 f2a2 	rbit	r2, r2
 80052a4:	607a      	str	r2, [r7, #4]
  return result;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	fab2 f282 	clz	r2, r2
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	40d3      	lsrs	r3, r2
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052b2:	5cd3      	ldrb	r3, [r2, r3]
 80052b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	220f      	movs	r2, #15
 80052c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	fa92 f2a2 	rbit	r2, r2
 80052c8:	60fa      	str	r2, [r7, #12]
  return result;
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	fab2 f282 	clz	r2, r2
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	40d3      	lsrs	r3, r2
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80052e4:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <HAL_RCC_GetSysClockFreq+0xc4>)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fb02 f303 	mul.w	r3, r2, r3
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	e004      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4a0c      	ldr	r2, [pc, #48]	; (800532c <HAL_RCC_GetSysClockFreq+0xd0>)
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	623b      	str	r3, [r7, #32]
      break;
 8005304:	e002      	b.n	800530c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005308:	623b      	str	r3, [r7, #32]
      break;
 800530a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800530c:	6a3b      	ldr	r3, [r7, #32]
}
 800530e:	4618      	mov	r0, r3
 8005310:	372c      	adds	r7, #44	; 0x2c
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000
 8005320:	007a1200 	.word	0x007a1200
 8005324:	0800a0d4 	.word	0x0800a0d4
 8005328:	0800a0e4 	.word	0x0800a0e4
 800532c:	003d0900 	.word	0x003d0900

08005330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800534e:	f7ff ffef 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005352:	4601      	mov	r1, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800535c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005360:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	fa92 f2a2 	rbit	r2, r2
 8005368:	603a      	str	r2, [r7, #0]
  return result;
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	fab2 f282 	clz	r2, r2
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	40d3      	lsrs	r3, r2
 8005374:	4a04      	ldr	r2, [pc, #16]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	0800a0cc 	.word	0x0800a0cc

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005392:	f7ff ffcd 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005396:	4601      	mov	r1, r0
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80053a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	fa92 f2a2 	rbit	r2, r2
 80053ac:	603a      	str	r2, [r7, #0]
  return result;
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	fab2 f282 	clz	r2, r2
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	40d3      	lsrs	r3, r2
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40021000 	.word	0x40021000
 80053cc:	0800a0cc 	.word	0x0800a0cc

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b092      	sub	sp, #72	; 0x48
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80d4 	beq.w	800559c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f4:	4b4e      	ldr	r3, [pc, #312]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10e      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005400:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540a:	61d3      	str	r3, [r2, #28]
 800540c:	4b48      	ldr	r3, [pc, #288]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541e:	4b45      	ldr	r3, [pc, #276]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d118      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a41      	ldr	r2, [pc, #260]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005436:	f7fc fde7 	bl	8002008 <HAL_GetTick>
 800543a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fc fde3 	bl	8002008 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b64      	cmp	r3, #100	; 0x64
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e14b      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800545c:	4b34      	ldr	r3, [pc, #208]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8084 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005478:	429a      	cmp	r2, r3
 800547a:	d07c      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800547c:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005496:	fab3 f383 	clz	r3, r3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	4b26      	ldr	r3, [pc, #152]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	461a      	mov	r2, r3
 80054a6:	2301      	movs	r3, #1
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d04b      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fc fd93 	bl	8002008 <HAL_GetTick>
 80054e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc fd8f 	bl	8002008 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0f5      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80054fc:	2302      	movs	r3, #2
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
 8005508:	2302      	movs	r3, #2
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	61fb      	str	r3, [r7, #28]
  return result;
 8005514:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d108      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800552a:	4b01      	ldr	r3, [pc, #4]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	e00d      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
 8005538:	10908100 	.word	0x10908100
 800553c:	2302      	movs	r3, #2
 800553e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	fa93 f3a3 	rbit	r3, r3
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2202      	movs	r2, #2
 800554e:	613a      	str	r2, [r7, #16]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	fa92 f2a2 	rbit	r2, r2
 8005556:	60fa      	str	r2, [r7, #12]
  return result;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fab2 f282 	clz	r2, r2
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f002 021f 	and.w	r2, r2, #31
 800556a:	2101      	movs	r1, #1
 800556c:	fa01 f202 	lsl.w	r2, r1, r2
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0b7      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005576:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	495b      	ldr	r1, [pc, #364]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005584:	4313      	orrs	r3, r2
 8005586:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005588:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800558c:	2b01      	cmp	r3, #1
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005590:	4b57      	ldr	r3, [pc, #348]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4a56      	ldr	r2, [pc, #344]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a8:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	f023 0203 	bic.w	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	494e      	ldr	r1, [pc, #312]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055c6:	4b4a      	ldr	r3, [pc, #296]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4947      	ldr	r1, [pc, #284]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055e4:	4b42      	ldr	r3, [pc, #264]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	493f      	ldr	r1, [pc, #252]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f023 0220 	bic.w	r2, r3, #32
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4938      	ldr	r1, [pc, #224]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005610:	4313      	orrs	r3, r2
 8005612:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005620:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	4930      	ldr	r1, [pc, #192]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800562e:	4313      	orrs	r3, r2
 8005630:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800563e:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4929      	ldr	r1, [pc, #164]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800564c:	4313      	orrs	r3, r2
 800564e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	4921      	ldr	r1, [pc, #132]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800566a:	4313      	orrs	r3, r2
 800566c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800567a:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	491a      	ldr	r1, [pc, #104]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005688:	4313      	orrs	r3, r2
 800568a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	490b      	ldr	r1, [pc, #44]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	4903      	ldr	r1, [pc, #12]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3748      	adds	r7, #72	; 0x48
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fc f9e6 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 f946 	bl	80059c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0fd      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b14      	cmp	r3, #20
 80057ca:	f200 80f0 	bhi.w	80059ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005829 	.word	0x08005829
 80057d8:	080059af 	.word	0x080059af
 80057dc:	080059af 	.word	0x080059af
 80057e0:	080059af 	.word	0x080059af
 80057e4:	08005869 	.word	0x08005869
 80057e8:	080059af 	.word	0x080059af
 80057ec:	080059af 	.word	0x080059af
 80057f0:	080059af 	.word	0x080059af
 80057f4:	080058ab 	.word	0x080058ab
 80057f8:	080059af 	.word	0x080059af
 80057fc:	080059af 	.word	0x080059af
 8005800:	080059af 	.word	0x080059af
 8005804:	080058eb 	.word	0x080058eb
 8005808:	080059af 	.word	0x080059af
 800580c:	080059af 	.word	0x080059af
 8005810:	080059af 	.word	0x080059af
 8005814:	0800592d 	.word	0x0800592d
 8005818:	080059af 	.word	0x080059af
 800581c:	080059af 	.word	0x080059af
 8005820:	080059af 	.word	0x080059af
 8005824:	0800596d 	.word	0x0800596d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f936 	bl	8005aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0208 	orr.w	r2, r2, #8
 8005842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0204 	bic.w	r2, r2, #4
 8005852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6999      	ldr	r1, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	619a      	str	r2, [r3, #24]
      break;
 8005866:	e0a3      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f99c 	bl	8005bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6999      	ldr	r1, [r3, #24]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	021a      	lsls	r2, r3, #8
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	619a      	str	r2, [r3, #24]
      break;
 80058a8:	e082      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f9fb 	bl	8005cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0208 	orr.w	r2, r2, #8
 80058c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0204 	bic.w	r2, r2, #4
 80058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	61da      	str	r2, [r3, #28]
      break;
 80058e8:	e062      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fa59 	bl	8005da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69d9      	ldr	r1, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	021a      	lsls	r2, r3, #8
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	61da      	str	r2, [r3, #28]
      break;
 800592a:	e041      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa9c 	bl	8005e70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0208 	orr.w	r2, r2, #8
 8005946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0204 	bic.w	r2, r2, #4
 8005956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800596a:	e021      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fada 	bl	8005f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	021a      	lsls	r2, r3, #8
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059ac:	e000      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80059ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop

080059c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <TIM_Base_SetConfig+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x20>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <TIM_Base_SetConfig+0xcc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_Base_SetConfig+0x5a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d00b      	beq.n	8005a1e <TIM_Base_SetConfig+0x5a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <TIM_Base_SetConfig+0xd0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_Base_SetConfig+0x5a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a21      	ldr	r2, [pc, #132]	; (8005a98 <TIM_Base_SetConfig+0xd4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_Base_SetConfig+0x5a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <TIM_Base_SetConfig+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d108      	bne.n	8005a30 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <TIM_Base_SetConfig+0xcc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0xb0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <TIM_Base_SetConfig+0xd0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0xb0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <TIM_Base_SetConfig+0xd4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0xb0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <TIM_Base_SetConfig+0xd8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 0302 	bic.w	r3, r3, #2
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_OC1_SetConfig+0xfc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC1_SetConfig+0x78>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <TIM_OC1_SetConfig+0x100>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC1_SetConfig+0x78>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <TIM_OC1_SetConfig+0x104>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC1_SetConfig+0x78>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <TIM_OC1_SetConfig+0x108>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0308 	bic.w	r3, r3, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_OC1_SetConfig+0xfc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_OC1_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_OC1_SetConfig+0x100>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_OC1_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC1_SetConfig+0x104>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_OC1_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC1_SetConfig+0x108>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d111      	bne.n	8005b76 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40014400 	.word	0x40014400
 8005ba8:	40014800 	.word	0x40014800

08005bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0210 	bic.w	r2, r3, #16
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0320 	bic.w	r3, r3, #32
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <TIM_OC2_SetConfig+0xf0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10d      	bne.n	8005c2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <TIM_OC2_SetConfig+0xf0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_OC2_SetConfig+0xa0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <TIM_OC2_SetConfig+0xf4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_OC2_SetConfig+0xa0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <TIM_OC2_SetConfig+0xf8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_OC2_SetConfig+0xa0>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <TIM_OC2_SetConfig+0xfc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d113      	bne.n	8005c74 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c52:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c5a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_OC3_SetConfig+0xec>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10d      	bne.n	8005d2a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d28:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <TIM_OC3_SetConfig+0xec>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_OC3_SetConfig+0x9e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <TIM_OC3_SetConfig+0xf0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_OC3_SetConfig+0x9e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <TIM_OC3_SetConfig+0xf4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC3_SetConfig+0x9e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <TIM_OC3_SetConfig+0xf8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d113      	bne.n	8005d72 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	621a      	str	r2, [r3, #32]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800

08005da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	031b      	lsls	r3, r3, #12
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <TIM_OC4_SetConfig+0xb8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <TIM_OC4_SetConfig+0x7c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC4_SetConfig+0xbc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_OC4_SetConfig+0x7c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <TIM_OC4_SetConfig+0xc0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC4_SetConfig+0x7c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <TIM_OC4_SetConfig+0xc4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d109      	bne.n	8005e38 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	019b      	lsls	r3, r3, #6
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005eb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <TIM_OC5_SetConfig+0xac>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x72>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <TIM_OC5_SetConfig+0xb0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x72>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <TIM_OC5_SetConfig+0xb4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x72>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <TIM_OC5_SetConfig+0xb8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d109      	bne.n	8005ef6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800

08005f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	051b      	lsls	r3, r3, #20
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC6_SetConfig+0xb0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00b      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x74>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC6_SetConfig+0xb4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <TIM_OC6_SetConfig+0xb8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x74>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC6_SetConfig+0xbc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800

08005fec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <HAL_TIMEx_PWMN_Start+0x24>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e022      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0x6a>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d109      	bne.n	800602a <HAL_TIMEx_PWMN_Start+0x3e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	bf14      	ite	ne
 8006022:	2301      	movne	r3, #1
 8006024:	2300      	moveq	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	e015      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0x6a>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d109      	bne.n	8006044 <HAL_TIMEx_PWMN_Start+0x58>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	e008      	b.n	8006056 <HAL_TIMEx_PWMN_Start+0x6a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e05a      	b.n	8006114 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_TIMEx_PWMN_Start+0x82>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	e013      	b.n	8006096 <HAL_TIMEx_PWMN_Start+0xaa>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d104      	bne.n	800607e <HAL_TIMEx_PWMN_Start+0x92>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607c:	e00b      	b.n	8006096 <HAL_TIMEx_PWMN_Start+0xaa>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d104      	bne.n	800608e <HAL_TIMEx_PWMN_Start+0xa2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800608c:	e003      	b.n	8006096 <HAL_TIMEx_PWMN_Start+0xaa>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2204      	movs	r2, #4
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f920 	bl	80062e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_TIMEx_PWMN_Start+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d004      	beq.n	80060d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a14      	ldr	r2, [pc, #80]	; (8006120 <HAL_TIMEx_PWMN_Start+0x134>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d115      	bne.n	80060fe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <HAL_TIMEx_PWMN_Start+0x138>)
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d015      	beq.n	8006110 <HAL_TIMEx_PWMN_Start+0x124>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ea:	d011      	beq.n	8006110 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fc:	e008      	b.n	8006110 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e000      	b.n	8006112 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40014000 	.word	0x40014000
 8006124:	00010007 	.word	0x00010007

08006128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800613c:	2302      	movs	r3, #2
 800613e:	e04f      	b.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d108      	bne.n	800617c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006170:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a14      	ldr	r2, [pc, #80]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d004      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a10      	ldr	r2, [pc, #64]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10c      	bne.n	80061ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40014000 	.word	0x40014000

080061f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800620c:	2302      	movs	r3, #2
 800620e:	e060      	b.n	80062d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	041b      	lsls	r3, r3, #16
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d115      	bne.n	80062c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	051b      	lsls	r3, r3, #20
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40012c00 	.word	0x40012c00

080062e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2204      	movs	r2, #4
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	43db      	mvns	r3, r3
 8006306:	401a      	ands	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1a      	ldr	r2, [r3, #32]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e040      	b.n	80063c2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fb fc23 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2224      	movs	r2, #36	; 0x24
 800635a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fb1d 	bl	80069ac <UART_SetConfig>
 8006372:	4603      	mov	r3, r0
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e022      	b.n	80063c2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc47 	bl	8006c18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006398:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fcce 	bl	8006d5c <UART_CheckIdleState>
 80063c0:	4603      	mov	r3, r0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b08a      	sub	sp, #40	; 0x28
 80063ce:	af02      	add	r7, sp, #8
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	603b      	str	r3, [r7, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063de:	2b20      	cmp	r3, #32
 80063e0:	f040 8082 	bne.w	80064e8 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_UART_Transmit+0x26>
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e07a      	b.n	80064ea <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Transmit+0x38>
 80063fe:	2302      	movs	r3, #2
 8006400:	e073      	b.n	80064ea <HAL_UART_Transmit+0x120>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2221      	movs	r2, #33	; 0x21
 8006416:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006418:	f7fb fdf6 	bl	8002008 <HAL_GetTick>
 800641c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d108      	bne.n	800644a <HAL_UART_Transmit+0x80>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e003      	b.n	8006452 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800645a:	e02d      	b.n	80064b8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fcc1 	bl	8006dee <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e039      	b.n	80064ea <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006488:	b292      	uxth	r2, r2
 800648a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	3302      	adds	r3, #2
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e008      	b.n	80064a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	b292      	uxth	r2, r2
 800649e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1cb      	bne.n	800645c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2140      	movs	r1, #64	; 0x40
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fc8d 	bl	8006dee <UART_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e005      	b.n	80064ea <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006504:	2b20      	cmp	r3, #32
 8006506:	d12c      	bne.n	8006562 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Receive_IT+0x22>
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e025      	b.n	8006564 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_UART_Receive_IT+0x34>
 8006522:	2302      	movs	r3, #2
 8006524:	e01e      	b.n	8006564 <HAL_UART_Receive_IT+0x72>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006550:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fcc5 	bl	8006ee8 <UART_Start_Receive_IT>
 800655e:	4603      	mov	r3, r0
 8006560:	e000      	b.n	8006564 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006592:	4013      	ands	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d113      	bne.n	80065c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 81cc 	beq.w	8006952 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
      }
      return;
 80065c2:	e1c6      	b.n	8006952 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80e3 	beq.w	8006792 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4ba5      	ldr	r3, [pc, #660]	; (8006870 <HAL_UART_IRQHandler+0x304>)
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 80d8 	beq.w	8006792 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_UART_IRQHandler+0xa2>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d010      	beq.n	800663a <HAL_UART_IRQHandler+0xce>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2202      	movs	r2, #2
 8006628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	f043 0204 	orr.w	r2, r3, #4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <HAL_UART_IRQHandler+0xfa>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2204      	movs	r2, #4
 8006654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665c:	f043 0202 	orr.w	r2, r3, #2
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d015      	beq.n	800669c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2208      	movs	r2, #8
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006692:	f043 0208 	orr.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <HAL_UART_IRQHandler+0x15e>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00c      	beq.n	80066ca <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8140 	beq.w	8006956 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006700:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d004      	beq.n	800671a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006716:	2b00      	cmp	r3, #0
 8006718:	d031      	beq.n	800677e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc6c 	bl	8006ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d123      	bne.n	8006776 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	2b00      	cmp	r3, #0
 8006744:	d013      	beq.n	800676e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <HAL_UART_IRQHandler+0x308>)
 800674c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	4618      	mov	r0, r3
 8006754:	f7fc fd38 	bl	80031c8 <HAL_DMA_Abort_IT>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d017      	beq.n	800678e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e00f      	b.n	800678e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f906 	bl	8006980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e00b      	b.n	800678e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f902 	bl	8006980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	e007      	b.n	800678e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8fe 	bl	8006980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800678c:	e0e3      	b.n	8006956 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678e:	bf00      	nop
    return;
 8006790:	e0e1      	b.n	8006956 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006796:	2b01      	cmp	r3, #1
 8006798:	f040 80a7 	bne.w	80068ea <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80a1 	beq.w	80068ea <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 809b 	beq.w	80068ea <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2210      	movs	r2, #16
 80067ba:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d156      	bne.n	8006878 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80067d4:	893b      	ldrh	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80bf 	beq.w	800695a <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067e2:	893a      	ldrh	r2, [r7, #8]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	f080 80b8 	bcs.w	800695a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	893a      	ldrh	r2, [r7, #8]
 80067ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b20      	cmp	r3, #32
 80067fa:	d02a      	beq.n	8006852 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800680a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0210 	bic.w	r2, r2, #16
 8006846:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	4618      	mov	r0, r3
 800684e:	f7fc fc82 	bl	8003156 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800685e:	b29b      	uxth	r3, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	b29b      	uxth	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f894 	bl	8006994 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800686c:	e075      	b.n	800695a <HAL_UART_IRQHandler+0x3ee>
 800686e:	bf00      	nop
 8006870:	04000120 	.word	0x04000120
 8006874:	08007057 	.word	0x08007057
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006884:	b29b      	uxth	r3, r3
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d063      	beq.n	800695e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8006896:	897b      	ldrh	r3, [r7, #10]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d060      	beq.n	800695e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0210 	bic.w	r2, r2, #16
 80068dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f856 	bl	8006994 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80068e8:	e039      	b.n	800695e <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <HAL_UART_IRQHandler+0x3a4>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fca7 	bl	800725c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800690e:	e029      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00d      	beq.n	8006936 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
    }
    return;
 8006934:	e015      	b.n	8006962 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d011      	beq.n	8006964 <HAL_UART_IRQHandler+0x3f8>
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb99 	bl	8007082 <UART_EndTransmit_IT>
    return;
 8006950:	e008      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006952:	bf00      	nop
 8006954:	e006      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006956:	bf00      	nop
 8006958:	e004      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
      return;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
      return;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006962:	bf00      	nop
  }

}
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop

0800696c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b8a      	ldr	r3, [pc, #552]	; (8006c00 <UART_SetConfig+0x254>)
 80069d8:	4013      	ands	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	6979      	ldr	r1, [r7, #20]
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a78      	ldr	r2, [pc, #480]	; (8006c04 <UART_SetConfig+0x258>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d120      	bne.n	8006a6a <UART_SetConfig+0xbe>
 8006a28:	4b77      	ldr	r3, [pc, #476]	; (8006c08 <UART_SetConfig+0x25c>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d817      	bhi.n	8006a64 <UART_SetConfig+0xb8>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x90>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a5f 	.word	0x08006a5f
 8006a48:	08006a53 	.word	0x08006a53
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e01d      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e01a      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e017      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e014      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a64:	2310      	movs	r3, #16
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e011      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <UART_SetConfig+0x260>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d102      	bne.n	8006a7a <UART_SetConfig+0xce>
 8006a74:	2300      	movs	r3, #0
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e009      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a64      	ldr	r2, [pc, #400]	; (8006c10 <UART_SetConfig+0x264>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d102      	bne.n	8006a8a <UART_SetConfig+0xde>
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e001      	b.n	8006a8e <UART_SetConfig+0xe2>
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a96:	d15b      	bne.n	8006b50 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006a98:	7ffb      	ldrb	r3, [r7, #31]
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d827      	bhi.n	8006aee <UART_SetConfig+0x142>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0xf8>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006adf 	.word	0x08006adf
 8006ab8:	08006aef 	.word	0x08006aef
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006aef 	.word	0x08006aef
 8006ac4:	08006ae7 	.word	0x08006ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fe fc3e 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8006acc:	61b8      	str	r0, [r7, #24]
        break;
 8006ace:	e013      	b.n	8006af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fe fc5c 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006ad4:	61b8      	str	r0, [r7, #24]
        break;
 8006ad6:	e00f      	b.n	8006af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b4e      	ldr	r3, [pc, #312]	; (8006c14 <UART_SetConfig+0x268>)
 8006ada:	61bb      	str	r3, [r7, #24]
        break;
 8006adc:	e00c      	b.n	8006af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ade:	f7fe fbbd 	bl	800525c <HAL_RCC_GetSysClockFreq>
 8006ae2:	61b8      	str	r0, [r7, #24]
        break;
 8006ae4:	e008      	b.n	8006af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aea:	61bb      	str	r3, [r7, #24]
        break;
 8006aec:	e004      	b.n	8006af8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	77bb      	strb	r3, [r7, #30]
        break;
 8006af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d074      	beq.n	8006be8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	005a      	lsls	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b0f      	cmp	r3, #15
 8006b1a:	d916      	bls.n	8006b4a <UART_SetConfig+0x19e>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b22:	d212      	bcs.n	8006b4a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f023 030f 	bic.w	r3, r3, #15
 8006b2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	89fa      	ldrh	r2, [r7, #14]
 8006b46:	60da      	str	r2, [r3, #12]
 8006b48:	e04e      	b.n	8006be8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	77bb      	strb	r3, [r7, #30]
 8006b4e:	e04b      	b.n	8006be8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b50:	7ffb      	ldrb	r3, [r7, #31]
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d827      	bhi.n	8006ba6 <UART_SetConfig+0x1fa>
 8006b56:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <UART_SetConfig+0x1b0>)
 8006b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b89 	.word	0x08006b89
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba7 	.word	0x08006ba7
 8006b6c:	08006b97 	.word	0x08006b97
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006ba7 	.word	0x08006ba7
 8006b78:	08006ba7 	.word	0x08006ba7
 8006b7c:	08006b9f 	.word	0x08006b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b80:	f7fe fbe2 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8006b84:	61b8      	str	r0, [r7, #24]
        break;
 8006b86:	e013      	b.n	8006bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fe fc00 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006b8c:	61b8      	str	r0, [r7, #24]
        break;
 8006b8e:	e00f      	b.n	8006bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b90:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <UART_SetConfig+0x268>)
 8006b92:	61bb      	str	r3, [r7, #24]
        break;
 8006b94:	e00c      	b.n	8006bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b96:	f7fe fb61 	bl	800525c <HAL_RCC_GetSysClockFreq>
 8006b9a:	61b8      	str	r0, [r7, #24]
        break;
 8006b9c:	e008      	b.n	8006bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	61bb      	str	r3, [r7, #24]
        break;
 8006ba4:	e004      	b.n	8006bb0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	77bb      	strb	r3, [r7, #30]
        break;
 8006bae:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085a      	lsrs	r2, r3, #1
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	441a      	add	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d908      	bls.n	8006be4 <UART_SetConfig+0x238>
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d204      	bcs.n	8006be4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	60da      	str	r2, [r3, #12]
 8006be2:	e001      	b.n	8006be8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	efff69f3 	.word	0xefff69f3
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40004400 	.word	0x40004400
 8006c10:	40004800 	.word	0x40004800
 8006c14:	007a1200 	.word	0x007a1200

08006c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d16:	d10a      	bne.n	8006d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
  }
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d6c:	f7fb f94c 	bl	8002008 <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d10e      	bne.n	8006d9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f82d 	bl	8006dee <UART_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e023      	b.n	8006de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d10e      	bne.n	8006dca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f817 	bl	8006dee <UART_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e00d      	b.n	8006de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfe:	e05e      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d05a      	beq.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e08:	f7fb f8fe 	bl	8002008 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d302      	bcc.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11b      	bne.n	8006e56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e043      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d02c      	beq.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e72:	d124      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0201 	bic.w	r2, r2, #1
 8006e9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e00f      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d091      	beq.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	88fa      	ldrh	r2, [r7, #6]
 8006f00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d10e      	bne.n	8006f3a <UART_Start_Receive_IT+0x52>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <UART_Start_Receive_IT+0x48>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f2e:	e02d      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	22ff      	movs	r2, #255	; 0xff
 8006f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f38:	e028      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10d      	bne.n	8006f5e <UART_Start_Receive_IT+0x76>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <UART_Start_Receive_IT+0x6c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f52:	e01b      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	227f      	movs	r2, #127	; 0x7f
 8006f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f5c:	e016      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f66:	d10d      	bne.n	8006f84 <UART_Start_Receive_IT+0x9c>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <UART_Start_Receive_IT+0x92>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	227f      	movs	r2, #127	; 0x7f
 8006f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f78:	e008      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	223f      	movs	r2, #63	; 0x3f
 8006f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f82:	e003      	b.n	8006f8c <UART_Start_Receive_IT+0xa4>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2222      	movs	r2, #34	; 0x22
 8006f98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0201 	orr.w	r2, r2, #1
 8006fa8:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb2:	d107      	bne.n	8006fc4 <UART_Start_Receive_IT+0xdc>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <UART_Start_Receive_IT+0x108>)
 8006fc0:	665a      	str	r2, [r3, #100]	; 0x64
 8006fc2:	e002      	b.n	8006fca <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <UART_Start_Receive_IT+0x10c>)
 8006fc8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006fe0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	08007189 	.word	0x08007189
 8006ff4:	080070b5 	.word	0x080070b5

08006ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800700e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0201 	bic.w	r2, r2, #1
 800701e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007024:	2b01      	cmp	r3, #1
 8007026:	d107      	bne.n	8007038 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0210 	bic.w	r2, r2, #16
 8007036:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	665a      	str	r2, [r3, #100]	; 0x64
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7ff fc83 	bl	8006980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007098:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fc60 	bl	800696c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c8:	2b22      	cmp	r3, #34	; 0x22
 80070ca:	d151      	bne.n	8007170 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80070d2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070d4:	89bb      	ldrh	r3, [r7, #12]
 80070d6:	b2d9      	uxtb	r1, r3
 80070d8:	89fb      	ldrh	r3, [r7, #14]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	400a      	ands	r2, r1
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d138      	bne.n	8007180 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800711c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713e:	2b01      	cmp	r3, #1
 8007140:	d10f      	bne.n	8007162 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0210 	bic.w	r2, r2, #16
 8007150:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fc1a 	bl	8006994 <HAL_UARTEx_RxEventCallback>
 8007160:	e002      	b.n	8007168 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7f9 fe08 	bl	8000d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800716e:	e007      	b.n	8007180 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	619a      	str	r2, [r3, #24]
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007196:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719c:	2b22      	cmp	r3, #34	; 0x22
 800719e:	d151      	bne.n	8007244 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071a6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80071ae:	89ba      	ldrh	r2, [r7, #12]
 80071b0:	89fb      	ldrh	r3, [r7, #14]
 80071b2:	4013      	ands	r3, r2
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d138      	bne.n	8007254 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	2b01      	cmp	r3, #1
 8007214:	d10f      	bne.n	8007236 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0210 	bic.w	r2, r2, #16
 8007224:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fbb0 	bl	8006994 <HAL_UARTEx_RxEventCallback>
 8007234:	e002      	b.n	800723c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7f9 fd9e 	bl	8000d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007242:	e007      	b.n	8007254 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0208 	orr.w	r2, r2, #8
 8007252:	619a      	str	r2, [r3, #24]
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <__errno>:
 8007270:	4b01      	ldr	r3, [pc, #4]	; (8007278 <__errno+0x8>)
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000010 	.word	0x20000010

0800727c <__libc_init_array>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4d0d      	ldr	r5, [pc, #52]	; (80072b4 <__libc_init_array+0x38>)
 8007280:	4c0d      	ldr	r4, [pc, #52]	; (80072b8 <__libc_init_array+0x3c>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	2600      	movs	r6, #0
 8007288:	42a6      	cmp	r6, r4
 800728a:	d109      	bne.n	80072a0 <__libc_init_array+0x24>
 800728c:	4d0b      	ldr	r5, [pc, #44]	; (80072bc <__libc_init_array+0x40>)
 800728e:	4c0c      	ldr	r4, [pc, #48]	; (80072c0 <__libc_init_array+0x44>)
 8007290:	f002 fec4 	bl	800a01c <_init>
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	2600      	movs	r6, #0
 800729a:	42a6      	cmp	r6, r4
 800729c:	d105      	bne.n	80072aa <__libc_init_array+0x2e>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a4:	4798      	blx	r3
 80072a6:	3601      	adds	r6, #1
 80072a8:	e7ee      	b.n	8007288 <__libc_init_array+0xc>
 80072aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ae:	4798      	blx	r3
 80072b0:	3601      	adds	r6, #1
 80072b2:	e7f2      	b.n	800729a <__libc_init_array+0x1e>
 80072b4:	0800a4d4 	.word	0x0800a4d4
 80072b8:	0800a4d4 	.word	0x0800a4d4
 80072bc:	0800a4d4 	.word	0x0800a4d4
 80072c0:	0800a4dc 	.word	0x0800a4dc

080072c4 <memset>:
 80072c4:	4402      	add	r2, r0
 80072c6:	4603      	mov	r3, r0
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d100      	bne.n	80072ce <memset+0xa>
 80072cc:	4770      	bx	lr
 80072ce:	f803 1b01 	strb.w	r1, [r3], #1
 80072d2:	e7f9      	b.n	80072c8 <memset+0x4>

080072d4 <__cvt>:
 80072d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	ec55 4b10 	vmov	r4, r5, d0
 80072dc:	2d00      	cmp	r5, #0
 80072de:	460e      	mov	r6, r1
 80072e0:	4619      	mov	r1, r3
 80072e2:	462b      	mov	r3, r5
 80072e4:	bfbb      	ittet	lt
 80072e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072ea:	461d      	movlt	r5, r3
 80072ec:	2300      	movge	r3, #0
 80072ee:	232d      	movlt	r3, #45	; 0x2d
 80072f0:	700b      	strb	r3, [r1, #0]
 80072f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072f8:	4691      	mov	r9, r2
 80072fa:	f023 0820 	bic.w	r8, r3, #32
 80072fe:	bfbc      	itt	lt
 8007300:	4622      	movlt	r2, r4
 8007302:	4614      	movlt	r4, r2
 8007304:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007308:	d005      	beq.n	8007316 <__cvt+0x42>
 800730a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800730e:	d100      	bne.n	8007312 <__cvt+0x3e>
 8007310:	3601      	adds	r6, #1
 8007312:	2102      	movs	r1, #2
 8007314:	e000      	b.n	8007318 <__cvt+0x44>
 8007316:	2103      	movs	r1, #3
 8007318:	ab03      	add	r3, sp, #12
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	ab02      	add	r3, sp, #8
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	ec45 4b10 	vmov	d0, r4, r5
 8007324:	4653      	mov	r3, sl
 8007326:	4632      	mov	r2, r6
 8007328:	f000 fcfa 	bl	8007d20 <_dtoa_r>
 800732c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007330:	4607      	mov	r7, r0
 8007332:	d102      	bne.n	800733a <__cvt+0x66>
 8007334:	f019 0f01 	tst.w	r9, #1
 8007338:	d022      	beq.n	8007380 <__cvt+0xac>
 800733a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800733e:	eb07 0906 	add.w	r9, r7, r6
 8007342:	d110      	bne.n	8007366 <__cvt+0x92>
 8007344:	783b      	ldrb	r3, [r7, #0]
 8007346:	2b30      	cmp	r3, #48	; 0x30
 8007348:	d10a      	bne.n	8007360 <__cvt+0x8c>
 800734a:	2200      	movs	r2, #0
 800734c:	2300      	movs	r3, #0
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f9 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007356:	b918      	cbnz	r0, 8007360 <__cvt+0x8c>
 8007358:	f1c6 0601 	rsb	r6, r6, #1
 800735c:	f8ca 6000 	str.w	r6, [sl]
 8007360:	f8da 3000 	ldr.w	r3, [sl]
 8007364:	4499      	add	r9, r3
 8007366:	2200      	movs	r2, #0
 8007368:	2300      	movs	r3, #0
 800736a:	4620      	mov	r0, r4
 800736c:	4629      	mov	r1, r5
 800736e:	f7f9 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007372:	b108      	cbz	r0, 8007378 <__cvt+0xa4>
 8007374:	f8cd 900c 	str.w	r9, [sp, #12]
 8007378:	2230      	movs	r2, #48	; 0x30
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	454b      	cmp	r3, r9
 800737e:	d307      	bcc.n	8007390 <__cvt+0xbc>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007384:	1bdb      	subs	r3, r3, r7
 8007386:	4638      	mov	r0, r7
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	b004      	add	sp, #16
 800738c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007390:	1c59      	adds	r1, r3, #1
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e7f0      	b.n	800737a <__cvt+0xa6>

08007398 <__exponent>:
 8007398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800739a:	4603      	mov	r3, r0
 800739c:	2900      	cmp	r1, #0
 800739e:	bfb8      	it	lt
 80073a0:	4249      	neglt	r1, r1
 80073a2:	f803 2b02 	strb.w	r2, [r3], #2
 80073a6:	bfb4      	ite	lt
 80073a8:	222d      	movlt	r2, #45	; 0x2d
 80073aa:	222b      	movge	r2, #43	; 0x2b
 80073ac:	2909      	cmp	r1, #9
 80073ae:	7042      	strb	r2, [r0, #1]
 80073b0:	dd2a      	ble.n	8007408 <__exponent+0x70>
 80073b2:	f10d 0407 	add.w	r4, sp, #7
 80073b6:	46a4      	mov	ip, r4
 80073b8:	270a      	movs	r7, #10
 80073ba:	46a6      	mov	lr, r4
 80073bc:	460a      	mov	r2, r1
 80073be:	fb91 f6f7 	sdiv	r6, r1, r7
 80073c2:	fb07 1516 	mls	r5, r7, r6, r1
 80073c6:	3530      	adds	r5, #48	; 0x30
 80073c8:	2a63      	cmp	r2, #99	; 0x63
 80073ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80073ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073d2:	4631      	mov	r1, r6
 80073d4:	dcf1      	bgt.n	80073ba <__exponent+0x22>
 80073d6:	3130      	adds	r1, #48	; 0x30
 80073d8:	f1ae 0502 	sub.w	r5, lr, #2
 80073dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073e0:	1c44      	adds	r4, r0, #1
 80073e2:	4629      	mov	r1, r5
 80073e4:	4561      	cmp	r1, ip
 80073e6:	d30a      	bcc.n	80073fe <__exponent+0x66>
 80073e8:	f10d 0209 	add.w	r2, sp, #9
 80073ec:	eba2 020e 	sub.w	r2, r2, lr
 80073f0:	4565      	cmp	r5, ip
 80073f2:	bf88      	it	hi
 80073f4:	2200      	movhi	r2, #0
 80073f6:	4413      	add	r3, r2
 80073f8:	1a18      	subs	r0, r3, r0
 80073fa:	b003      	add	sp, #12
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007402:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007406:	e7ed      	b.n	80073e4 <__exponent+0x4c>
 8007408:	2330      	movs	r3, #48	; 0x30
 800740a:	3130      	adds	r1, #48	; 0x30
 800740c:	7083      	strb	r3, [r0, #2]
 800740e:	70c1      	strb	r1, [r0, #3]
 8007410:	1d03      	adds	r3, r0, #4
 8007412:	e7f1      	b.n	80073f8 <__exponent+0x60>

08007414 <_printf_float>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	ed2d 8b02 	vpush	{d8}
 800741c:	b08d      	sub	sp, #52	; 0x34
 800741e:	460c      	mov	r4, r1
 8007420:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007424:	4616      	mov	r6, r2
 8007426:	461f      	mov	r7, r3
 8007428:	4605      	mov	r5, r0
 800742a:	f001 fa65 	bl	80088f8 <_localeconv_r>
 800742e:	f8d0 a000 	ldr.w	sl, [r0]
 8007432:	4650      	mov	r0, sl
 8007434:	f7f8 fecc 	bl	80001d0 <strlen>
 8007438:	2300      	movs	r3, #0
 800743a:	930a      	str	r3, [sp, #40]	; 0x28
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	f8d8 3000 	ldr.w	r3, [r8]
 8007444:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007448:	3307      	adds	r3, #7
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	f103 0208 	add.w	r2, r3, #8
 8007452:	f8c8 2000 	str.w	r2, [r8]
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800745e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007462:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	f8cd 8018 	str.w	r8, [sp, #24]
 800746c:	ee08 0a10 	vmov	s16, r0
 8007470:	4b9f      	ldr	r3, [pc, #636]	; (80076f0 <_printf_float+0x2dc>)
 8007472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	f7f9 fb57 	bl	8000b2c <__aeabi_dcmpun>
 800747e:	bb88      	cbnz	r0, 80074e4 <_printf_float+0xd0>
 8007480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007484:	4b9a      	ldr	r3, [pc, #616]	; (80076f0 <_printf_float+0x2dc>)
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	f7f9 fb31 	bl	8000af0 <__aeabi_dcmple>
 800748e:	bb48      	cbnz	r0, 80074e4 <_printf_float+0xd0>
 8007490:	2200      	movs	r2, #0
 8007492:	2300      	movs	r3, #0
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 fb20 	bl	8000adc <__aeabi_dcmplt>
 800749c:	b110      	cbz	r0, 80074a4 <_printf_float+0x90>
 800749e:	232d      	movs	r3, #45	; 0x2d
 80074a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a4:	4b93      	ldr	r3, [pc, #588]	; (80076f4 <_printf_float+0x2e0>)
 80074a6:	4894      	ldr	r0, [pc, #592]	; (80076f8 <_printf_float+0x2e4>)
 80074a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074ac:	bf94      	ite	ls
 80074ae:	4698      	movls	r8, r3
 80074b0:	4680      	movhi	r8, r0
 80074b2:	2303      	movs	r3, #3
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	f023 0204 	bic.w	r2, r3, #4
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	9700      	str	r7, [sp, #0]
 80074c4:	4633      	mov	r3, r6
 80074c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f9d8 	bl	8007880 <_printf_common>
 80074d0:	3001      	adds	r0, #1
 80074d2:	f040 8090 	bne.w	80075f6 <_printf_float+0x1e2>
 80074d6:	f04f 30ff 	mov.w	r0, #4294967295
 80074da:	b00d      	add	sp, #52	; 0x34
 80074dc:	ecbd 8b02 	vpop	{d8}
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	4642      	mov	r2, r8
 80074e6:	464b      	mov	r3, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f9 fb1e 	bl	8000b2c <__aeabi_dcmpun>
 80074f0:	b140      	cbz	r0, 8007504 <_printf_float+0xf0>
 80074f2:	464b      	mov	r3, r9
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbc      	itt	lt
 80074f8:	232d      	movlt	r3, #45	; 0x2d
 80074fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074fe:	487f      	ldr	r0, [pc, #508]	; (80076fc <_printf_float+0x2e8>)
 8007500:	4b7f      	ldr	r3, [pc, #508]	; (8007700 <_printf_float+0x2ec>)
 8007502:	e7d1      	b.n	80074a8 <_printf_float+0x94>
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800750a:	9206      	str	r2, [sp, #24]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	d13f      	bne.n	8007590 <_printf_float+0x17c>
 8007510:	2306      	movs	r3, #6
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	9b05      	ldr	r3, [sp, #20]
 8007516:	6861      	ldr	r1, [r4, #4]
 8007518:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800751c:	2300      	movs	r3, #0
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	ab0a      	add	r3, sp, #40	; 0x28
 8007522:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007526:	ab09      	add	r3, sp, #36	; 0x24
 8007528:	ec49 8b10 	vmov	d0, r8, r9
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007534:	4628      	mov	r0, r5
 8007536:	f7ff fecd 	bl	80072d4 <__cvt>
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800753e:	2b47      	cmp	r3, #71	; 0x47
 8007540:	4680      	mov	r8, r0
 8007542:	d108      	bne.n	8007556 <_printf_float+0x142>
 8007544:	1cc8      	adds	r0, r1, #3
 8007546:	db02      	blt.n	800754e <_printf_float+0x13a>
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	4299      	cmp	r1, r3
 800754c:	dd41      	ble.n	80075d2 <_printf_float+0x1be>
 800754e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007552:	fa5f fb8b 	uxtb.w	fp, fp
 8007556:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800755a:	d820      	bhi.n	800759e <_printf_float+0x18a>
 800755c:	3901      	subs	r1, #1
 800755e:	465a      	mov	r2, fp
 8007560:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007564:	9109      	str	r1, [sp, #36]	; 0x24
 8007566:	f7ff ff17 	bl	8007398 <__exponent>
 800756a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756c:	1813      	adds	r3, r2, r0
 800756e:	2a01      	cmp	r2, #1
 8007570:	4681      	mov	r9, r0
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	dc02      	bgt.n	800757c <_printf_float+0x168>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	07d2      	lsls	r2, r2, #31
 800757a:	d501      	bpl.n	8007580 <_printf_float+0x16c>
 800757c:	3301      	adds	r3, #1
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007584:	2b00      	cmp	r3, #0
 8007586:	d09c      	beq.n	80074c2 <_printf_float+0xae>
 8007588:	232d      	movs	r3, #45	; 0x2d
 800758a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758e:	e798      	b.n	80074c2 <_printf_float+0xae>
 8007590:	9a06      	ldr	r2, [sp, #24]
 8007592:	2a47      	cmp	r2, #71	; 0x47
 8007594:	d1be      	bne.n	8007514 <_printf_float+0x100>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1bc      	bne.n	8007514 <_printf_float+0x100>
 800759a:	2301      	movs	r3, #1
 800759c:	e7b9      	b.n	8007512 <_printf_float+0xfe>
 800759e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075a2:	d118      	bne.n	80075d6 <_printf_float+0x1c2>
 80075a4:	2900      	cmp	r1, #0
 80075a6:	6863      	ldr	r3, [r4, #4]
 80075a8:	dd0b      	ble.n	80075c2 <_printf_float+0x1ae>
 80075aa:	6121      	str	r1, [r4, #16]
 80075ac:	b913      	cbnz	r3, 80075b4 <_printf_float+0x1a0>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	07d0      	lsls	r0, r2, #31
 80075b2:	d502      	bpl.n	80075ba <_printf_float+0x1a6>
 80075b4:	3301      	adds	r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80075bc:	f04f 0900 	mov.w	r9, #0
 80075c0:	e7de      	b.n	8007580 <_printf_float+0x16c>
 80075c2:	b913      	cbnz	r3, 80075ca <_printf_float+0x1b6>
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	07d2      	lsls	r2, r2, #31
 80075c8:	d501      	bpl.n	80075ce <_printf_float+0x1ba>
 80075ca:	3302      	adds	r3, #2
 80075cc:	e7f4      	b.n	80075b8 <_printf_float+0x1a4>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e7f2      	b.n	80075b8 <_printf_float+0x1a4>
 80075d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d8:	4299      	cmp	r1, r3
 80075da:	db05      	blt.n	80075e8 <_printf_float+0x1d4>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6121      	str	r1, [r4, #16]
 80075e0:	07d8      	lsls	r0, r3, #31
 80075e2:	d5ea      	bpl.n	80075ba <_printf_float+0x1a6>
 80075e4:	1c4b      	adds	r3, r1, #1
 80075e6:	e7e7      	b.n	80075b8 <_printf_float+0x1a4>
 80075e8:	2900      	cmp	r1, #0
 80075ea:	bfd4      	ite	le
 80075ec:	f1c1 0202 	rsble	r2, r1, #2
 80075f0:	2201      	movgt	r2, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	e7e0      	b.n	80075b8 <_printf_float+0x1a4>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	055a      	lsls	r2, r3, #21
 80075fa:	d407      	bmi.n	800760c <_printf_float+0x1f8>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	4642      	mov	r2, r8
 8007600:	4631      	mov	r1, r6
 8007602:	4628      	mov	r0, r5
 8007604:	47b8      	blx	r7
 8007606:	3001      	adds	r0, #1
 8007608:	d12c      	bne.n	8007664 <_printf_float+0x250>
 800760a:	e764      	b.n	80074d6 <_printf_float+0xc2>
 800760c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007610:	f240 80e0 	bls.w	80077d4 <_printf_float+0x3c0>
 8007614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	f7f9 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007620:	2800      	cmp	r0, #0
 8007622:	d034      	beq.n	800768e <_printf_float+0x27a>
 8007624:	4a37      	ldr	r2, [pc, #220]	; (8007704 <_printf_float+0x2f0>)
 8007626:	2301      	movs	r3, #1
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f af51 	beq.w	80074d6 <_printf_float+0xc2>
 8007634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007638:	429a      	cmp	r2, r3
 800763a:	db02      	blt.n	8007642 <_printf_float+0x22e>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	07d8      	lsls	r0, r3, #31
 8007640:	d510      	bpl.n	8007664 <_printf_float+0x250>
 8007642:	ee18 3a10 	vmov	r3, s16
 8007646:	4652      	mov	r2, sl
 8007648:	4631      	mov	r1, r6
 800764a:	4628      	mov	r0, r5
 800764c:	47b8      	blx	r7
 800764e:	3001      	adds	r0, #1
 8007650:	f43f af41 	beq.w	80074d6 <_printf_float+0xc2>
 8007654:	f04f 0800 	mov.w	r8, #0
 8007658:	f104 091a 	add.w	r9, r4, #26
 800765c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	4543      	cmp	r3, r8
 8007662:	dc09      	bgt.n	8007678 <_printf_float+0x264>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	079b      	lsls	r3, r3, #30
 8007668:	f100 8105 	bmi.w	8007876 <_printf_float+0x462>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e730      	b.n	80074da <_printf_float+0xc6>
 8007678:	2301      	movs	r3, #1
 800767a:	464a      	mov	r2, r9
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f af27 	beq.w	80074d6 <_printf_float+0xc2>
 8007688:	f108 0801 	add.w	r8, r8, #1
 800768c:	e7e6      	b.n	800765c <_printf_float+0x248>
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	dc39      	bgt.n	8007708 <_printf_float+0x2f4>
 8007694:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <_printf_float+0x2f0>)
 8007696:	2301      	movs	r3, #1
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af19 	beq.w	80074d6 <_printf_float+0xc2>
 80076a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076a8:	4313      	orrs	r3, r2
 80076aa:	d102      	bne.n	80076b2 <_printf_float+0x29e>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d5d8      	bpl.n	8007664 <_printf_float+0x250>
 80076b2:	ee18 3a10 	vmov	r3, s16
 80076b6:	4652      	mov	r2, sl
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f af09 	beq.w	80074d6 <_printf_float+0xc2>
 80076c4:	f04f 0900 	mov.w	r9, #0
 80076c8:	f104 0a1a 	add.w	sl, r4, #26
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	425b      	negs	r3, r3
 80076d0:	454b      	cmp	r3, r9
 80076d2:	dc01      	bgt.n	80076d8 <_printf_float+0x2c4>
 80076d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d6:	e792      	b.n	80075fe <_printf_float+0x1ea>
 80076d8:	2301      	movs	r3, #1
 80076da:	4652      	mov	r2, sl
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47b8      	blx	r7
 80076e2:	3001      	adds	r0, #1
 80076e4:	f43f aef7 	beq.w	80074d6 <_printf_float+0xc2>
 80076e8:	f109 0901 	add.w	r9, r9, #1
 80076ec:	e7ee      	b.n	80076cc <_printf_float+0x2b8>
 80076ee:	bf00      	nop
 80076f0:	7fefffff 	.word	0x7fefffff
 80076f4:	0800a0f8 	.word	0x0800a0f8
 80076f8:	0800a0fc 	.word	0x0800a0fc
 80076fc:	0800a104 	.word	0x0800a104
 8007700:	0800a100 	.word	0x0800a100
 8007704:	0800a108 	.word	0x0800a108
 8007708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800770c:	429a      	cmp	r2, r3
 800770e:	bfa8      	it	ge
 8007710:	461a      	movge	r2, r3
 8007712:	2a00      	cmp	r2, #0
 8007714:	4691      	mov	r9, r2
 8007716:	dc37      	bgt.n	8007788 <_printf_float+0x374>
 8007718:	f04f 0b00 	mov.w	fp, #0
 800771c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007720:	f104 021a 	add.w	r2, r4, #26
 8007724:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	eba3 0309 	sub.w	r3, r3, r9
 800772c:	455b      	cmp	r3, fp
 800772e:	dc33      	bgt.n	8007798 <_printf_float+0x384>
 8007730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007734:	429a      	cmp	r2, r3
 8007736:	db3b      	blt.n	80077b0 <_printf_float+0x39c>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07da      	lsls	r2, r3, #31
 800773c:	d438      	bmi.n	80077b0 <_printf_float+0x39c>
 800773e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007740:	9b05      	ldr	r3, [sp, #20]
 8007742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	eba2 0901 	sub.w	r9, r2, r1
 800774a:	4599      	cmp	r9, r3
 800774c:	bfa8      	it	ge
 800774e:	4699      	movge	r9, r3
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	dc35      	bgt.n	80077c2 <_printf_float+0x3ae>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800775e:	f104 0a1a 	add.w	sl, r4, #26
 8007762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	eba3 0309 	sub.w	r3, r3, r9
 800776c:	4543      	cmp	r3, r8
 800776e:	f77f af79 	ble.w	8007664 <_printf_float+0x250>
 8007772:	2301      	movs	r3, #1
 8007774:	4652      	mov	r2, sl
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f aeaa 	beq.w	80074d6 <_printf_float+0xc2>
 8007782:	f108 0801 	add.w	r8, r8, #1
 8007786:	e7ec      	b.n	8007762 <_printf_float+0x34e>
 8007788:	4613      	mov	r3, r2
 800778a:	4631      	mov	r1, r6
 800778c:	4642      	mov	r2, r8
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	d1c0      	bne.n	8007718 <_printf_float+0x304>
 8007796:	e69e      	b.n	80074d6 <_printf_float+0xc2>
 8007798:	2301      	movs	r3, #1
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	9205      	str	r2, [sp, #20]
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f ae97 	beq.w	80074d6 <_printf_float+0xc2>
 80077a8:	9a05      	ldr	r2, [sp, #20]
 80077aa:	f10b 0b01 	add.w	fp, fp, #1
 80077ae:	e7b9      	b.n	8007724 <_printf_float+0x310>
 80077b0:	ee18 3a10 	vmov	r3, s16
 80077b4:	4652      	mov	r2, sl
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	d1be      	bne.n	800773e <_printf_float+0x32a>
 80077c0:	e689      	b.n	80074d6 <_printf_float+0xc2>
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	464b      	mov	r3, r9
 80077c6:	4442      	add	r2, r8
 80077c8:	4631      	mov	r1, r6
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d1c1      	bne.n	8007756 <_printf_float+0x342>
 80077d2:	e680      	b.n	80074d6 <_printf_float+0xc2>
 80077d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d6:	2a01      	cmp	r2, #1
 80077d8:	dc01      	bgt.n	80077de <_printf_float+0x3ca>
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	d538      	bpl.n	8007850 <_printf_float+0x43c>
 80077de:	2301      	movs	r3, #1
 80077e0:	4642      	mov	r2, r8
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	f43f ae74 	beq.w	80074d6 <_printf_float+0xc2>
 80077ee:	ee18 3a10 	vmov	r3, s16
 80077f2:	4652      	mov	r2, sl
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f ae6b 	beq.w	80074d6 <_printf_float+0xc2>
 8007800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007804:	2200      	movs	r2, #0
 8007806:	2300      	movs	r3, #0
 8007808:	f7f9 f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800780c:	b9d8      	cbnz	r0, 8007846 <_printf_float+0x432>
 800780e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007810:	f108 0201 	add.w	r2, r8, #1
 8007814:	3b01      	subs	r3, #1
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	d10e      	bne.n	800783e <_printf_float+0x42a>
 8007820:	e659      	b.n	80074d6 <_printf_float+0xc2>
 8007822:	2301      	movs	r3, #1
 8007824:	4652      	mov	r2, sl
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f ae52 	beq.w	80074d6 <_printf_float+0xc2>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007838:	3b01      	subs	r3, #1
 800783a:	4543      	cmp	r3, r8
 800783c:	dcf1      	bgt.n	8007822 <_printf_float+0x40e>
 800783e:	464b      	mov	r3, r9
 8007840:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007844:	e6dc      	b.n	8007600 <_printf_float+0x1ec>
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	f104 0a1a 	add.w	sl, r4, #26
 800784e:	e7f2      	b.n	8007836 <_printf_float+0x422>
 8007850:	2301      	movs	r3, #1
 8007852:	4642      	mov	r2, r8
 8007854:	e7df      	b.n	8007816 <_printf_float+0x402>
 8007856:	2301      	movs	r3, #1
 8007858:	464a      	mov	r2, r9
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	f43f ae38 	beq.w	80074d6 <_printf_float+0xc2>
 8007866:	f108 0801 	add.w	r8, r8, #1
 800786a:	68e3      	ldr	r3, [r4, #12]
 800786c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800786e:	1a5b      	subs	r3, r3, r1
 8007870:	4543      	cmp	r3, r8
 8007872:	dcf0      	bgt.n	8007856 <_printf_float+0x442>
 8007874:	e6fa      	b.n	800766c <_printf_float+0x258>
 8007876:	f04f 0800 	mov.w	r8, #0
 800787a:	f104 0919 	add.w	r9, r4, #25
 800787e:	e7f4      	b.n	800786a <_printf_float+0x456>

08007880 <_printf_common>:
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	4616      	mov	r6, r2
 8007886:	4699      	mov	r9, r3
 8007888:	688a      	ldr	r2, [r1, #8]
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007890:	4293      	cmp	r3, r2
 8007892:	bfb8      	it	lt
 8007894:	4613      	movlt	r3, r2
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800789c:	4607      	mov	r7, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	b10a      	cbz	r2, 80078a6 <_printf_common+0x26>
 80078a2:	3301      	adds	r3, #1
 80078a4:	6033      	str	r3, [r6, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	0699      	lsls	r1, r3, #26
 80078aa:	bf42      	ittt	mi
 80078ac:	6833      	ldrmi	r3, [r6, #0]
 80078ae:	3302      	addmi	r3, #2
 80078b0:	6033      	strmi	r3, [r6, #0]
 80078b2:	6825      	ldr	r5, [r4, #0]
 80078b4:	f015 0506 	ands.w	r5, r5, #6
 80078b8:	d106      	bne.n	80078c8 <_printf_common+0x48>
 80078ba:	f104 0a19 	add.w	sl, r4, #25
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	6832      	ldr	r2, [r6, #0]
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	42ab      	cmp	r3, r5
 80078c6:	dc26      	bgt.n	8007916 <_printf_common+0x96>
 80078c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078cc:	1e13      	subs	r3, r2, #0
 80078ce:	6822      	ldr	r2, [r4, #0]
 80078d0:	bf18      	it	ne
 80078d2:	2301      	movne	r3, #1
 80078d4:	0692      	lsls	r2, r2, #26
 80078d6:	d42b      	bmi.n	8007930 <_printf_common+0xb0>
 80078d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078dc:	4649      	mov	r1, r9
 80078de:	4638      	mov	r0, r7
 80078e0:	47c0      	blx	r8
 80078e2:	3001      	adds	r0, #1
 80078e4:	d01e      	beq.n	8007924 <_printf_common+0xa4>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	68e5      	ldr	r5, [r4, #12]
 80078ea:	6832      	ldr	r2, [r6, #0]
 80078ec:	f003 0306 	and.w	r3, r3, #6
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	bf08      	it	eq
 80078f4:	1aad      	subeq	r5, r5, r2
 80078f6:	68a3      	ldr	r3, [r4, #8]
 80078f8:	6922      	ldr	r2, [r4, #16]
 80078fa:	bf0c      	ite	eq
 80078fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007900:	2500      	movne	r5, #0
 8007902:	4293      	cmp	r3, r2
 8007904:	bfc4      	itt	gt
 8007906:	1a9b      	subgt	r3, r3, r2
 8007908:	18ed      	addgt	r5, r5, r3
 800790a:	2600      	movs	r6, #0
 800790c:	341a      	adds	r4, #26
 800790e:	42b5      	cmp	r5, r6
 8007910:	d11a      	bne.n	8007948 <_printf_common+0xc8>
 8007912:	2000      	movs	r0, #0
 8007914:	e008      	b.n	8007928 <_printf_common+0xa8>
 8007916:	2301      	movs	r3, #1
 8007918:	4652      	mov	r2, sl
 800791a:	4649      	mov	r1, r9
 800791c:	4638      	mov	r0, r7
 800791e:	47c0      	blx	r8
 8007920:	3001      	adds	r0, #1
 8007922:	d103      	bne.n	800792c <_printf_common+0xac>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	3501      	adds	r5, #1
 800792e:	e7c6      	b.n	80078be <_printf_common+0x3e>
 8007930:	18e1      	adds	r1, r4, r3
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	2030      	movs	r0, #48	; 0x30
 8007936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800793a:	4422      	add	r2, r4
 800793c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007944:	3302      	adds	r3, #2
 8007946:	e7c7      	b.n	80078d8 <_printf_common+0x58>
 8007948:	2301      	movs	r3, #1
 800794a:	4622      	mov	r2, r4
 800794c:	4649      	mov	r1, r9
 800794e:	4638      	mov	r0, r7
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d0e6      	beq.n	8007924 <_printf_common+0xa4>
 8007956:	3601      	adds	r6, #1
 8007958:	e7d9      	b.n	800790e <_printf_common+0x8e>
	...

0800795c <_printf_i>:
 800795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	4691      	mov	r9, r2
 8007964:	7e27      	ldrb	r7, [r4, #24]
 8007966:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007968:	2f78      	cmp	r7, #120	; 0x78
 800796a:	4680      	mov	r8, r0
 800796c:	469a      	mov	sl, r3
 800796e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007972:	d807      	bhi.n	8007984 <_printf_i+0x28>
 8007974:	2f62      	cmp	r7, #98	; 0x62
 8007976:	d80a      	bhi.n	800798e <_printf_i+0x32>
 8007978:	2f00      	cmp	r7, #0
 800797a:	f000 80d8 	beq.w	8007b2e <_printf_i+0x1d2>
 800797e:	2f58      	cmp	r7, #88	; 0x58
 8007980:	f000 80a3 	beq.w	8007aca <_printf_i+0x16e>
 8007984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800798c:	e03a      	b.n	8007a04 <_printf_i+0xa8>
 800798e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007992:	2b15      	cmp	r3, #21
 8007994:	d8f6      	bhi.n	8007984 <_printf_i+0x28>
 8007996:	a001      	add	r0, pc, #4	; (adr r0, 800799c <_printf_i+0x40>)
 8007998:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007985 	.word	0x08007985
 80079a8:	08007985 	.word	0x08007985
 80079ac:	08007985 	.word	0x08007985
 80079b0:	08007985 	.word	0x08007985
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007985 	.word	0x08007985
 80079bc:	08007985 	.word	0x08007985
 80079c0:	08007985 	.word	0x08007985
 80079c4:	08007985 	.word	0x08007985
 80079c8:	08007b15 	.word	0x08007b15
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007af7 	.word	0x08007af7
 80079d4:	08007985 	.word	0x08007985
 80079d8:	08007985 	.word	0x08007985
 80079dc:	08007b37 	.word	0x08007b37
 80079e0:	08007985 	.word	0x08007985
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007985 	.word	0x08007985
 80079ec:	08007985 	.word	0x08007985
 80079f0:	08007aff 	.word	0x08007aff
 80079f4:	680b      	ldr	r3, [r1, #0]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	600a      	str	r2, [r1, #0]
 80079fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0a3      	b.n	8007b50 <_printf_i+0x1f4>
 8007a08:	6825      	ldr	r5, [r4, #0]
 8007a0a:	6808      	ldr	r0, [r1, #0]
 8007a0c:	062e      	lsls	r6, r5, #24
 8007a0e:	f100 0304 	add.w	r3, r0, #4
 8007a12:	d50a      	bpl.n	8007a2a <_printf_i+0xce>
 8007a14:	6805      	ldr	r5, [r0, #0]
 8007a16:	600b      	str	r3, [r1, #0]
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	da03      	bge.n	8007a24 <_printf_i+0xc8>
 8007a1c:	232d      	movs	r3, #45	; 0x2d
 8007a1e:	426d      	negs	r5, r5
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	485e      	ldr	r0, [pc, #376]	; (8007ba0 <_printf_i+0x244>)
 8007a26:	230a      	movs	r3, #10
 8007a28:	e019      	b.n	8007a5e <_printf_i+0x102>
 8007a2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a2e:	6805      	ldr	r5, [r0, #0]
 8007a30:	600b      	str	r3, [r1, #0]
 8007a32:	bf18      	it	ne
 8007a34:	b22d      	sxthne	r5, r5
 8007a36:	e7ef      	b.n	8007a18 <_printf_i+0xbc>
 8007a38:	680b      	ldr	r3, [r1, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	1d18      	adds	r0, r3, #4
 8007a3e:	6008      	str	r0, [r1, #0]
 8007a40:	0628      	lsls	r0, r5, #24
 8007a42:	d501      	bpl.n	8007a48 <_printf_i+0xec>
 8007a44:	681d      	ldr	r5, [r3, #0]
 8007a46:	e002      	b.n	8007a4e <_printf_i+0xf2>
 8007a48:	0669      	lsls	r1, r5, #25
 8007a4a:	d5fb      	bpl.n	8007a44 <_printf_i+0xe8>
 8007a4c:	881d      	ldrh	r5, [r3, #0]
 8007a4e:	4854      	ldr	r0, [pc, #336]	; (8007ba0 <_printf_i+0x244>)
 8007a50:	2f6f      	cmp	r7, #111	; 0x6f
 8007a52:	bf0c      	ite	eq
 8007a54:	2308      	moveq	r3, #8
 8007a56:	230a      	movne	r3, #10
 8007a58:	2100      	movs	r1, #0
 8007a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a5e:	6866      	ldr	r6, [r4, #4]
 8007a60:	60a6      	str	r6, [r4, #8]
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	bfa2      	ittt	ge
 8007a66:	6821      	ldrge	r1, [r4, #0]
 8007a68:	f021 0104 	bicge.w	r1, r1, #4
 8007a6c:	6021      	strge	r1, [r4, #0]
 8007a6e:	b90d      	cbnz	r5, 8007a74 <_printf_i+0x118>
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	d04d      	beq.n	8007b10 <_printf_i+0x1b4>
 8007a74:	4616      	mov	r6, r2
 8007a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a7e:	5dc7      	ldrb	r7, [r0, r7]
 8007a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a84:	462f      	mov	r7, r5
 8007a86:	42bb      	cmp	r3, r7
 8007a88:	460d      	mov	r5, r1
 8007a8a:	d9f4      	bls.n	8007a76 <_printf_i+0x11a>
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d10b      	bne.n	8007aa8 <_printf_i+0x14c>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07df      	lsls	r7, r3, #31
 8007a94:	d508      	bpl.n	8007aa8 <_printf_i+0x14c>
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	6861      	ldr	r1, [r4, #4]
 8007a9a:	4299      	cmp	r1, r3
 8007a9c:	bfde      	ittt	le
 8007a9e:	2330      	movle	r3, #48	; 0x30
 8007aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aa8:	1b92      	subs	r2, r2, r6
 8007aaa:	6122      	str	r2, [r4, #16]
 8007aac:	f8cd a000 	str.w	sl, [sp]
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	aa03      	add	r2, sp, #12
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	f7ff fee2 	bl	8007880 <_printf_common>
 8007abc:	3001      	adds	r0, #1
 8007abe:	d14c      	bne.n	8007b5a <_printf_i+0x1fe>
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	b004      	add	sp, #16
 8007ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aca:	4835      	ldr	r0, [pc, #212]	; (8007ba0 <_printf_i+0x244>)
 8007acc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	680e      	ldr	r6, [r1, #0]
 8007ad4:	061f      	lsls	r7, r3, #24
 8007ad6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ada:	600e      	str	r6, [r1, #0]
 8007adc:	d514      	bpl.n	8007b08 <_printf_i+0x1ac>
 8007ade:	07d9      	lsls	r1, r3, #31
 8007ae0:	bf44      	itt	mi
 8007ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae6:	6023      	strmi	r3, [r4, #0]
 8007ae8:	b91d      	cbnz	r5, 8007af2 <_printf_i+0x196>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f023 0320 	bic.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	2310      	movs	r3, #16
 8007af4:	e7b0      	b.n	8007a58 <_printf_i+0xfc>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	f043 0320 	orr.w	r3, r3, #32
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	2378      	movs	r3, #120	; 0x78
 8007b00:	4828      	ldr	r0, [pc, #160]	; (8007ba4 <_printf_i+0x248>)
 8007b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b06:	e7e3      	b.n	8007ad0 <_printf_i+0x174>
 8007b08:	065e      	lsls	r6, r3, #25
 8007b0a:	bf48      	it	mi
 8007b0c:	b2ad      	uxthmi	r5, r5
 8007b0e:	e7e6      	b.n	8007ade <_printf_i+0x182>
 8007b10:	4616      	mov	r6, r2
 8007b12:	e7bb      	b.n	8007a8c <_printf_i+0x130>
 8007b14:	680b      	ldr	r3, [r1, #0]
 8007b16:	6826      	ldr	r6, [r4, #0]
 8007b18:	6960      	ldr	r0, [r4, #20]
 8007b1a:	1d1d      	adds	r5, r3, #4
 8007b1c:	600d      	str	r5, [r1, #0]
 8007b1e:	0635      	lsls	r5, r6, #24
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	d501      	bpl.n	8007b28 <_printf_i+0x1cc>
 8007b24:	6018      	str	r0, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <_printf_i+0x1d2>
 8007b28:	0671      	lsls	r1, r6, #25
 8007b2a:	d5fb      	bpl.n	8007b24 <_printf_i+0x1c8>
 8007b2c:	8018      	strh	r0, [r3, #0]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	4616      	mov	r6, r2
 8007b34:	e7ba      	b.n	8007aac <_printf_i+0x150>
 8007b36:	680b      	ldr	r3, [r1, #0]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	600a      	str	r2, [r1, #0]
 8007b3c:	681e      	ldr	r6, [r3, #0]
 8007b3e:	6862      	ldr	r2, [r4, #4]
 8007b40:	2100      	movs	r1, #0
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7f8 fb4c 	bl	80001e0 <memchr>
 8007b48:	b108      	cbz	r0, 8007b4e <_printf_i+0x1f2>
 8007b4a:	1b80      	subs	r0, r0, r6
 8007b4c:	6060      	str	r0, [r4, #4]
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	2300      	movs	r3, #0
 8007b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b58:	e7a8      	b.n	8007aac <_printf_i+0x150>
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d0ab      	beq.n	8007ac0 <_printf_i+0x164>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	079b      	lsls	r3, r3, #30
 8007b6c:	d413      	bmi.n	8007b96 <_printf_i+0x23a>
 8007b6e:	68e0      	ldr	r0, [r4, #12]
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	4298      	cmp	r0, r3
 8007b74:	bfb8      	it	lt
 8007b76:	4618      	movlt	r0, r3
 8007b78:	e7a4      	b.n	8007ac4 <_printf_i+0x168>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4632      	mov	r2, r6
 8007b7e:	4649      	mov	r1, r9
 8007b80:	4640      	mov	r0, r8
 8007b82:	47d0      	blx	sl
 8007b84:	3001      	adds	r0, #1
 8007b86:	d09b      	beq.n	8007ac0 <_printf_i+0x164>
 8007b88:	3501      	adds	r5, #1
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	9903      	ldr	r1, [sp, #12]
 8007b8e:	1a5b      	subs	r3, r3, r1
 8007b90:	42ab      	cmp	r3, r5
 8007b92:	dcf2      	bgt.n	8007b7a <_printf_i+0x21e>
 8007b94:	e7eb      	b.n	8007b6e <_printf_i+0x212>
 8007b96:	2500      	movs	r5, #0
 8007b98:	f104 0619 	add.w	r6, r4, #25
 8007b9c:	e7f5      	b.n	8007b8a <_printf_i+0x22e>
 8007b9e:	bf00      	nop
 8007ba0:	0800a10a 	.word	0x0800a10a
 8007ba4:	0800a11b 	.word	0x0800a11b

08007ba8 <siprintf>:
 8007ba8:	b40e      	push	{r1, r2, r3}
 8007baa:	b500      	push	{lr}
 8007bac:	b09c      	sub	sp, #112	; 0x70
 8007bae:	ab1d      	add	r3, sp, #116	; 0x74
 8007bb0:	9002      	str	r0, [sp, #8]
 8007bb2:	9006      	str	r0, [sp, #24]
 8007bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <siprintf+0x38>)
 8007bba:	9107      	str	r1, [sp, #28]
 8007bbc:	9104      	str	r1, [sp, #16]
 8007bbe:	4909      	ldr	r1, [pc, #36]	; (8007be4 <siprintf+0x3c>)
 8007bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc4:	9105      	str	r1, [sp, #20]
 8007bc6:	6800      	ldr	r0, [r0, #0]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	a902      	add	r1, sp, #8
 8007bcc:	f001 fb42 	bl	8009254 <_svfiprintf_r>
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	b01c      	add	sp, #112	; 0x70
 8007bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bdc:	b003      	add	sp, #12
 8007bde:	4770      	bx	lr
 8007be0:	20000010 	.word	0x20000010
 8007be4:	ffff0208 	.word	0xffff0208

08007be8 <strcat>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4602      	mov	r2, r0
 8007bec:	7814      	ldrb	r4, [r2, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	3201      	adds	r2, #1
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	d1fa      	bne.n	8007bec <strcat+0x4>
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	d1f9      	bne.n	8007bf8 <strcat+0x10>
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <quorem>:
 8007c06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6903      	ldr	r3, [r0, #16]
 8007c0c:	690c      	ldr	r4, [r1, #16]
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	4607      	mov	r7, r0
 8007c12:	f2c0 8081 	blt.w	8007d18 <quorem+0x112>
 8007c16:	3c01      	subs	r4, #1
 8007c18:	f101 0814 	add.w	r8, r1, #20
 8007c1c:	f100 0514 	add.w	r5, r0, #20
 8007c20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	429a      	cmp	r2, r3
 8007c32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c3e:	d331      	bcc.n	8007ca4 <quorem+0x9e>
 8007c40:	f04f 0e00 	mov.w	lr, #0
 8007c44:	4640      	mov	r0, r8
 8007c46:	46ac      	mov	ip, r5
 8007c48:	46f2      	mov	sl, lr
 8007c4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c4e:	b293      	uxth	r3, r2
 8007c50:	fb06 e303 	mla	r3, r6, r3, lr
 8007c54:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c5e:	0c12      	lsrs	r2, r2, #16
 8007c60:	f8dc a000 	ldr.w	sl, [ip]
 8007c64:	fb06 e202 	mla	r2, r6, r2, lr
 8007c68:	fa13 f38a 	uxtah	r3, r3, sl
 8007c6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c70:	fa1f fa82 	uxth.w	sl, r2
 8007c74:	f8dc 2000 	ldr.w	r2, [ip]
 8007c78:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c86:	4581      	cmp	r9, r0
 8007c88:	f84c 3b04 	str.w	r3, [ip], #4
 8007c8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c90:	d2db      	bcs.n	8007c4a <quorem+0x44>
 8007c92:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c96:	b92b      	cbnz	r3, 8007ca4 <quorem+0x9e>
 8007c98:	9b01      	ldr	r3, [sp, #4]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	429d      	cmp	r5, r3
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	d32e      	bcc.n	8007d00 <quorem+0xfa>
 8007ca2:	613c      	str	r4, [r7, #16]
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f001 f8bf 	bl	8008e28 <__mcmp>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	db24      	blt.n	8007cf8 <quorem+0xf2>
 8007cae:	3601      	adds	r6, #1
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f04f 0c00 	mov.w	ip, #0
 8007cb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cba:	f8d0 e000 	ldr.w	lr, [r0]
 8007cbe:	b293      	uxth	r3, r2
 8007cc0:	ebac 0303 	sub.w	r3, ip, r3
 8007cc4:	0c12      	lsrs	r2, r2, #16
 8007cc6:	fa13 f38e 	uxtah	r3, r3, lr
 8007cca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cd8:	45c1      	cmp	r9, r8
 8007cda:	f840 3b04 	str.w	r3, [r0], #4
 8007cde:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ce2:	d2e8      	bcs.n	8007cb6 <quorem+0xb0>
 8007ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cec:	b922      	cbnz	r2, 8007cf8 <quorem+0xf2>
 8007cee:	3b04      	subs	r3, #4
 8007cf0:	429d      	cmp	r5, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	d30a      	bcc.n	8007d0c <quorem+0x106>
 8007cf6:	613c      	str	r4, [r7, #16]
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	3b04      	subs	r3, #4
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	d1cc      	bne.n	8007ca2 <quorem+0x9c>
 8007d08:	3c01      	subs	r4, #1
 8007d0a:	e7c7      	b.n	8007c9c <quorem+0x96>
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	3b04      	subs	r3, #4
 8007d10:	2a00      	cmp	r2, #0
 8007d12:	d1f0      	bne.n	8007cf6 <quorem+0xf0>
 8007d14:	3c01      	subs	r4, #1
 8007d16:	e7eb      	b.n	8007cf0 <quorem+0xea>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e7ee      	b.n	8007cfa <quorem+0xf4>
 8007d1c:	0000      	movs	r0, r0
	...

08007d20 <_dtoa_r>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	ed2d 8b02 	vpush	{d8}
 8007d28:	ec57 6b10 	vmov	r6, r7, d0
 8007d2c:	b095      	sub	sp, #84	; 0x54
 8007d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d40:	b975      	cbnz	r5, 8007d60 <_dtoa_r+0x40>
 8007d42:	2010      	movs	r0, #16
 8007d44:	f000 fddc 	bl	8008900 <malloc>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007d4c:	b920      	cbnz	r0, 8007d58 <_dtoa_r+0x38>
 8007d4e:	4bb2      	ldr	r3, [pc, #712]	; (8008018 <_dtoa_r+0x2f8>)
 8007d50:	21ea      	movs	r1, #234	; 0xea
 8007d52:	48b2      	ldr	r0, [pc, #712]	; (800801c <_dtoa_r+0x2fc>)
 8007d54:	f001 fb8e 	bl	8009474 <__assert_func>
 8007d58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d5c:	6005      	str	r5, [r0, #0]
 8007d5e:	60c5      	str	r5, [r0, #12]
 8007d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	b151      	cbz	r1, 8007d7c <_dtoa_r+0x5c>
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	604a      	str	r2, [r1, #4]
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4093      	lsls	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 fe1b 	bl	80089ac <_Bfree>
 8007d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	1e3b      	subs	r3, r7, #0
 8007d7e:	bfb9      	ittee	lt
 8007d80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	9303      	strlt	r3, [sp, #12]
 8007d86:	2300      	movge	r3, #0
 8007d88:	f8c8 3000 	strge.w	r3, [r8]
 8007d8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d90:	4ba3      	ldr	r3, [pc, #652]	; (8008020 <_dtoa_r+0x300>)
 8007d92:	bfbc      	itt	lt
 8007d94:	2201      	movlt	r2, #1
 8007d96:	f8c8 2000 	strlt.w	r2, [r8]
 8007d9a:	ea33 0309 	bics.w	r3, r3, r9
 8007d9e:	d11b      	bne.n	8007dd8 <_dtoa_r+0xb8>
 8007da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007da2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dac:	4333      	orrs	r3, r6
 8007dae:	f000 857a 	beq.w	80088a6 <_dtoa_r+0xb86>
 8007db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db4:	b963      	cbnz	r3, 8007dd0 <_dtoa_r+0xb0>
 8007db6:	4b9b      	ldr	r3, [pc, #620]	; (8008024 <_dtoa_r+0x304>)
 8007db8:	e024      	b.n	8007e04 <_dtoa_r+0xe4>
 8007dba:	4b9b      	ldr	r3, [pc, #620]	; (8008028 <_dtoa_r+0x308>)
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	3308      	adds	r3, #8
 8007dc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	9800      	ldr	r0, [sp, #0]
 8007dc6:	b015      	add	sp, #84	; 0x54
 8007dc8:	ecbd 8b02 	vpop	{d8}
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	4b94      	ldr	r3, [pc, #592]	; (8008024 <_dtoa_r+0x304>)
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	e7f3      	b.n	8007dc0 <_dtoa_r+0xa0>
 8007dd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	ec51 0b17 	vmov	r0, r1, d7
 8007de2:	2300      	movs	r3, #0
 8007de4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007de8:	f7f8 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dec:	4680      	mov	r8, r0
 8007dee:	b158      	cbz	r0, 8007e08 <_dtoa_r+0xe8>
 8007df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007df2:	2301      	movs	r3, #1
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8551 	beq.w	80088a0 <_dtoa_r+0xb80>
 8007dfe:	488b      	ldr	r0, [pc, #556]	; (800802c <_dtoa_r+0x30c>)
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	1e43      	subs	r3, r0, #1
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	e7dd      	b.n	8007dc4 <_dtoa_r+0xa4>
 8007e08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e0c:	aa12      	add	r2, sp, #72	; 0x48
 8007e0e:	a913      	add	r1, sp, #76	; 0x4c
 8007e10:	4620      	mov	r0, r4
 8007e12:	f001 f8ad 	bl	8008f70 <__d2b>
 8007e16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e1a:	4683      	mov	fp, r0
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	d07c      	beq.n	8007f1a <_dtoa_r+0x1fa>
 8007e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e3a:	4b7d      	ldr	r3, [pc, #500]	; (8008030 <_dtoa_r+0x310>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4630      	mov	r0, r6
 8007e40:	4639      	mov	r1, r7
 8007e42:	f7f8 fa21 	bl	8000288 <__aeabi_dsub>
 8007e46:	a36e      	add	r3, pc, #440	; (adr r3, 8008000 <_dtoa_r+0x2e0>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f7f8 fbd4 	bl	80005f8 <__aeabi_dmul>
 8007e50:	a36d      	add	r3, pc, #436	; (adr r3, 8008008 <_dtoa_r+0x2e8>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fa19 	bl	800028c <__adddf3>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	460f      	mov	r7, r1
 8007e60:	f7f8 fb60 	bl	8000524 <__aeabi_i2d>
 8007e64:	a36a      	add	r3, pc, #424	; (adr r3, 8008010 <_dtoa_r+0x2f0>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 fbc5 	bl	80005f8 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fa09 	bl	800028c <__adddf3>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	f7f8 fe6b 	bl	8000b58 <__aeabi_d2iz>
 8007e82:	2200      	movs	r2, #0
 8007e84:	4682      	mov	sl, r0
 8007e86:	2300      	movs	r3, #0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	f7f8 fe26 	bl	8000adc <__aeabi_dcmplt>
 8007e90:	b148      	cbz	r0, 8007ea6 <_dtoa_r+0x186>
 8007e92:	4650      	mov	r0, sl
 8007e94:	f7f8 fb46 	bl	8000524 <__aeabi_i2d>
 8007e98:	4632      	mov	r2, r6
 8007e9a:	463b      	mov	r3, r7
 8007e9c:	f7f8 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ea0:	b908      	cbnz	r0, 8007ea6 <_dtoa_r+0x186>
 8007ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ea6:	f1ba 0f16 	cmp.w	sl, #22
 8007eaa:	d854      	bhi.n	8007f56 <_dtoa_r+0x236>
 8007eac:	4b61      	ldr	r3, [pc, #388]	; (8008034 <_dtoa_r+0x314>)
 8007eae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007eba:	f7f8 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d04b      	beq.n	8007f5a <_dtoa_r+0x23a>
 8007ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8007eca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ecc:	1b5d      	subs	r5, r3, r5
 8007ece:	1e6b      	subs	r3, r5, #1
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	bf43      	ittte	mi
 8007ed4:	2300      	movmi	r3, #0
 8007ed6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007eda:	9304      	strmi	r3, [sp, #16]
 8007edc:	f04f 0800 	movpl.w	r8, #0
 8007ee0:	f1ba 0f00 	cmp.w	sl, #0
 8007ee4:	db3b      	blt.n	8007f5e <_dtoa_r+0x23e>
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007eec:	4453      	add	r3, sl
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	9b05      	ldr	r3, [sp, #20]
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d869      	bhi.n	8007fce <_dtoa_r+0x2ae>
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	bfc4      	itt	gt
 8007efe:	3b04      	subgt	r3, #4
 8007f00:	9305      	strgt	r3, [sp, #20]
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	f1a3 0302 	sub.w	r3, r3, #2
 8007f08:	bfcc      	ite	gt
 8007f0a:	2500      	movgt	r5, #0
 8007f0c:	2501      	movle	r5, #1
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d869      	bhi.n	8007fe6 <_dtoa_r+0x2c6>
 8007f12:	e8df f003 	tbb	[pc, r3]
 8007f16:	4e2c      	.short	0x4e2c
 8007f18:	5a4c      	.short	0x5a4c
 8007f1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f1e:	441d      	add	r5, r3
 8007f20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	bfc1      	itttt	gt
 8007f28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f30:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f38:	bfda      	itte	le
 8007f3a:	f1c3 0320 	rsble	r3, r3, #32
 8007f3e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f42:	4318      	orrgt	r0, r3
 8007f44:	f7f8 fade 	bl	8000504 <__aeabi_ui2d>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f50:	3d01      	subs	r5, #1
 8007f52:	9310      	str	r3, [sp, #64]	; 0x40
 8007f54:	e771      	b.n	8007e3a <_dtoa_r+0x11a>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7b6      	b.n	8007ec8 <_dtoa_r+0x1a8>
 8007f5a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f5c:	e7b5      	b.n	8007eca <_dtoa_r+0x1aa>
 8007f5e:	f1ca 0300 	rsb	r3, sl, #0
 8007f62:	9306      	str	r3, [sp, #24]
 8007f64:	2300      	movs	r3, #0
 8007f66:	eba8 080a 	sub.w	r8, r8, sl
 8007f6a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f6c:	e7c2      	b.n	8007ef4 <_dtoa_r+0x1d4>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9308      	str	r3, [sp, #32]
 8007f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc39      	bgt.n	8007fec <_dtoa_r+0x2cc>
 8007f78:	f04f 0901 	mov.w	r9, #1
 8007f7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f80:	464b      	mov	r3, r9
 8007f82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6042      	str	r2, [r0, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f102 0614 	add.w	r6, r2, #20
 8007f92:	429e      	cmp	r6, r3
 8007f94:	6841      	ldr	r1, [r0, #4]
 8007f96:	d92f      	bls.n	8007ff8 <_dtoa_r+0x2d8>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fcc7 	bl	800892c <_Balloc>
 8007f9e:	9000      	str	r0, [sp, #0]
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d14b      	bne.n	800803c <_dtoa_r+0x31c>
 8007fa4:	4b24      	ldr	r3, [pc, #144]	; (8008038 <_dtoa_r+0x318>)
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fac:	e6d1      	b.n	8007d52 <_dtoa_r+0x32>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7de      	b.n	8007f70 <_dtoa_r+0x250>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	eb0a 0903 	add.w	r9, sl, r3
 8007fbc:	f109 0301 	add.w	r3, r9, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	bfb8      	it	lt
 8007fc6:	2301      	movlt	r3, #1
 8007fc8:	e7dd      	b.n	8007f86 <_dtoa_r+0x266>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e7f2      	b.n	8007fb4 <_dtoa_r+0x294>
 8007fce:	2501      	movs	r5, #1
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	9508      	str	r5, [sp, #32]
 8007fd6:	f04f 39ff 	mov.w	r9, #4294967295
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fe0:	2312      	movs	r3, #18
 8007fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe4:	e7cf      	b.n	8007f86 <_dtoa_r+0x266>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	e7f4      	b.n	8007fd6 <_dtoa_r+0x2b6>
 8007fec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007ff0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	e7c6      	b.n	8007f86 <_dtoa_r+0x266>
 8007ff8:	3101      	adds	r1, #1
 8007ffa:	6041      	str	r1, [r0, #4]
 8007ffc:	0052      	lsls	r2, r2, #1
 8007ffe:	e7c6      	b.n	8007f8e <_dtoa_r+0x26e>
 8008000:	636f4361 	.word	0x636f4361
 8008004:	3fd287a7 	.word	0x3fd287a7
 8008008:	8b60c8b3 	.word	0x8b60c8b3
 800800c:	3fc68a28 	.word	0x3fc68a28
 8008010:	509f79fb 	.word	0x509f79fb
 8008014:	3fd34413 	.word	0x3fd34413
 8008018:	0800a139 	.word	0x0800a139
 800801c:	0800a150 	.word	0x0800a150
 8008020:	7ff00000 	.word	0x7ff00000
 8008024:	0800a135 	.word	0x0800a135
 8008028:	0800a12c 	.word	0x0800a12c
 800802c:	0800a109 	.word	0x0800a109
 8008030:	3ff80000 	.word	0x3ff80000
 8008034:	0800a248 	.word	0x0800a248
 8008038:	0800a1af 	.word	0x0800a1af
 800803c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800803e:	9a00      	ldr	r2, [sp, #0]
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	2b0e      	cmp	r3, #14
 8008046:	f200 80ad 	bhi.w	80081a4 <_dtoa_r+0x484>
 800804a:	2d00      	cmp	r5, #0
 800804c:	f000 80aa 	beq.w	80081a4 <_dtoa_r+0x484>
 8008050:	f1ba 0f00 	cmp.w	sl, #0
 8008054:	dd36      	ble.n	80080c4 <_dtoa_r+0x3a4>
 8008056:	4ac3      	ldr	r2, [pc, #780]	; (8008364 <_dtoa_r+0x644>)
 8008058:	f00a 030f 	and.w	r3, sl, #15
 800805c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008060:	ed93 7b00 	vldr	d7, [r3]
 8008064:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008068:	ea4f 172a 	mov.w	r7, sl, asr #4
 800806c:	eeb0 8a47 	vmov.f32	s16, s14
 8008070:	eef0 8a67 	vmov.f32	s17, s15
 8008074:	d016      	beq.n	80080a4 <_dtoa_r+0x384>
 8008076:	4bbc      	ldr	r3, [pc, #752]	; (8008368 <_dtoa_r+0x648>)
 8008078:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800807c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008080:	f7f8 fbe4 	bl	800084c <__aeabi_ddiv>
 8008084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008088:	f007 070f 	and.w	r7, r7, #15
 800808c:	2503      	movs	r5, #3
 800808e:	4eb6      	ldr	r6, [pc, #728]	; (8008368 <_dtoa_r+0x648>)
 8008090:	b957      	cbnz	r7, 80080a8 <_dtoa_r+0x388>
 8008092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008096:	ec53 2b18 	vmov	r2, r3, d8
 800809a:	f7f8 fbd7 	bl	800084c <__aeabi_ddiv>
 800809e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a2:	e029      	b.n	80080f8 <_dtoa_r+0x3d8>
 80080a4:	2502      	movs	r5, #2
 80080a6:	e7f2      	b.n	800808e <_dtoa_r+0x36e>
 80080a8:	07f9      	lsls	r1, r7, #31
 80080aa:	d508      	bpl.n	80080be <_dtoa_r+0x39e>
 80080ac:	ec51 0b18 	vmov	r0, r1, d8
 80080b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080b4:	f7f8 faa0 	bl	80005f8 <__aeabi_dmul>
 80080b8:	ec41 0b18 	vmov	d8, r0, r1
 80080bc:	3501      	adds	r5, #1
 80080be:	107f      	asrs	r7, r7, #1
 80080c0:	3608      	adds	r6, #8
 80080c2:	e7e5      	b.n	8008090 <_dtoa_r+0x370>
 80080c4:	f000 80a6 	beq.w	8008214 <_dtoa_r+0x4f4>
 80080c8:	f1ca 0600 	rsb	r6, sl, #0
 80080cc:	4ba5      	ldr	r3, [pc, #660]	; (8008364 <_dtoa_r+0x644>)
 80080ce:	4fa6      	ldr	r7, [pc, #664]	; (8008368 <_dtoa_r+0x648>)
 80080d0:	f006 020f 	and.w	r2, r6, #15
 80080d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e8:	1136      	asrs	r6, r6, #4
 80080ea:	2300      	movs	r3, #0
 80080ec:	2502      	movs	r5, #2
 80080ee:	2e00      	cmp	r6, #0
 80080f0:	f040 8085 	bne.w	80081fe <_dtoa_r+0x4de>
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1d2      	bne.n	800809e <_dtoa_r+0x37e>
 80080f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 808c 	beq.w	8008218 <_dtoa_r+0x4f8>
 8008100:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008104:	4b99      	ldr	r3, [pc, #612]	; (800836c <_dtoa_r+0x64c>)
 8008106:	2200      	movs	r2, #0
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 fce6 	bl	8000adc <__aeabi_dcmplt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f000 8081 	beq.w	8008218 <_dtoa_r+0x4f8>
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d07d      	beq.n	8008218 <_dtoa_r+0x4f8>
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	dd3c      	ble.n	800819c <_dtoa_r+0x47c>
 8008122:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008126:	9307      	str	r3, [sp, #28]
 8008128:	2200      	movs	r2, #0
 800812a:	4b91      	ldr	r3, [pc, #580]	; (8008370 <_dtoa_r+0x650>)
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008138:	3501      	adds	r5, #1
 800813a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800813e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008142:	4628      	mov	r0, r5
 8008144:	f7f8 f9ee 	bl	8000524 <__aeabi_i2d>
 8008148:	4632      	mov	r2, r6
 800814a:	463b      	mov	r3, r7
 800814c:	f7f8 fa54 	bl	80005f8 <__aeabi_dmul>
 8008150:	4b88      	ldr	r3, [pc, #544]	; (8008374 <_dtoa_r+0x654>)
 8008152:	2200      	movs	r2, #0
 8008154:	f7f8 f89a 	bl	800028c <__adddf3>
 8008158:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800815c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008164:	2b00      	cmp	r3, #0
 8008166:	d15c      	bne.n	8008222 <_dtoa_r+0x502>
 8008168:	4b83      	ldr	r3, [pc, #524]	; (8008378 <_dtoa_r+0x658>)
 800816a:	2200      	movs	r2, #0
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 f88a 	bl	8000288 <__aeabi_dsub>
 8008174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	f7f8 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8008180:	2800      	cmp	r0, #0
 8008182:	f040 8296 	bne.w	80086b2 <_dtoa_r+0x992>
 8008186:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800818a:	4630      	mov	r0, r6
 800818c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fca3 	bl	8000adc <__aeabi_dcmplt>
 8008196:	2800      	cmp	r0, #0
 8008198:	f040 8288 	bne.w	80086ac <_dtoa_r+0x98c>
 800819c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f2c0 8158 	blt.w	800845c <_dtoa_r+0x73c>
 80081ac:	f1ba 0f0e 	cmp.w	sl, #14
 80081b0:	f300 8154 	bgt.w	800845c <_dtoa_r+0x73c>
 80081b4:	4b6b      	ldr	r3, [pc, #428]	; (8008364 <_dtoa_r+0x644>)
 80081b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f280 80e3 	bge.w	800838c <_dtoa_r+0x66c>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f300 80df 	bgt.w	800838c <_dtoa_r+0x66c>
 80081ce:	f040 826d 	bne.w	80086ac <_dtoa_r+0x98c>
 80081d2:	4b69      	ldr	r3, [pc, #420]	; (8008378 <_dtoa_r+0x658>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	f7f8 fa0d 	bl	80005f8 <__aeabi_dmul>
 80081de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081e2:	f7f8 fc8f 	bl	8000b04 <__aeabi_dcmpge>
 80081e6:	9e01      	ldr	r6, [sp, #4]
 80081e8:	4637      	mov	r7, r6
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f040 8243 	bne.w	8008676 <_dtoa_r+0x956>
 80081f0:	9d00      	ldr	r5, [sp, #0]
 80081f2:	2331      	movs	r3, #49	; 0x31
 80081f4:	f805 3b01 	strb.w	r3, [r5], #1
 80081f8:	f10a 0a01 	add.w	sl, sl, #1
 80081fc:	e23f      	b.n	800867e <_dtoa_r+0x95e>
 80081fe:	07f2      	lsls	r2, r6, #31
 8008200:	d505      	bpl.n	800820e <_dtoa_r+0x4ee>
 8008202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008206:	f7f8 f9f7 	bl	80005f8 <__aeabi_dmul>
 800820a:	3501      	adds	r5, #1
 800820c:	2301      	movs	r3, #1
 800820e:	1076      	asrs	r6, r6, #1
 8008210:	3708      	adds	r7, #8
 8008212:	e76c      	b.n	80080ee <_dtoa_r+0x3ce>
 8008214:	2502      	movs	r5, #2
 8008216:	e76f      	b.n	80080f8 <_dtoa_r+0x3d8>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	f8cd a01c 	str.w	sl, [sp, #28]
 800821e:	930c      	str	r3, [sp, #48]	; 0x30
 8008220:	e78d      	b.n	800813e <_dtoa_r+0x41e>
 8008222:	9900      	ldr	r1, [sp, #0]
 8008224:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008228:	4b4e      	ldr	r3, [pc, #312]	; (8008364 <_dtoa_r+0x644>)
 800822a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800822e:	4401      	add	r1, r0
 8008230:	9102      	str	r1, [sp, #8]
 8008232:	9908      	ldr	r1, [sp, #32]
 8008234:	eeb0 8a47 	vmov.f32	s16, s14
 8008238:	eef0 8a67 	vmov.f32	s17, s15
 800823c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008244:	2900      	cmp	r1, #0
 8008246:	d045      	beq.n	80082d4 <_dtoa_r+0x5b4>
 8008248:	494c      	ldr	r1, [pc, #304]	; (800837c <_dtoa_r+0x65c>)
 800824a:	2000      	movs	r0, #0
 800824c:	f7f8 fafe 	bl	800084c <__aeabi_ddiv>
 8008250:	ec53 2b18 	vmov	r2, r3, d8
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	9d00      	ldr	r5, [sp, #0]
 800825a:	ec41 0b18 	vmov	d8, r0, r1
 800825e:	4639      	mov	r1, r7
 8008260:	4630      	mov	r0, r6
 8008262:	f7f8 fc79 	bl	8000b58 <__aeabi_d2iz>
 8008266:	900c      	str	r0, [sp, #48]	; 0x30
 8008268:	f7f8 f95c 	bl	8000524 <__aeabi_i2d>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 f808 	bl	8000288 <__aeabi_dsub>
 8008278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800827a:	3330      	adds	r3, #48	; 0x30
 800827c:	f805 3b01 	strb.w	r3, [r5], #1
 8008280:	ec53 2b18 	vmov	r2, r3, d8
 8008284:	4606      	mov	r6, r0
 8008286:	460f      	mov	r7, r1
 8008288:	f7f8 fc28 	bl	8000adc <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	d165      	bne.n	800835c <_dtoa_r+0x63c>
 8008290:	4632      	mov	r2, r6
 8008292:	463b      	mov	r3, r7
 8008294:	4935      	ldr	r1, [pc, #212]	; (800836c <_dtoa_r+0x64c>)
 8008296:	2000      	movs	r0, #0
 8008298:	f7f7 fff6 	bl	8000288 <__aeabi_dsub>
 800829c:	ec53 2b18 	vmov	r2, r3, d8
 80082a0:	f7f8 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 80b9 	bne.w	800841c <_dtoa_r+0x6fc>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	429d      	cmp	r5, r3
 80082ae:	f43f af75 	beq.w	800819c <_dtoa_r+0x47c>
 80082b2:	4b2f      	ldr	r3, [pc, #188]	; (8008370 <_dtoa_r+0x650>)
 80082b4:	ec51 0b18 	vmov	r0, r1, d8
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f99d 	bl	80005f8 <__aeabi_dmul>
 80082be:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <_dtoa_r+0x650>)
 80082c0:	ec41 0b18 	vmov	d8, r0, r1
 80082c4:	2200      	movs	r2, #0
 80082c6:	4630      	mov	r0, r6
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	4606      	mov	r6, r0
 80082d0:	460f      	mov	r7, r1
 80082d2:	e7c4      	b.n	800825e <_dtoa_r+0x53e>
 80082d4:	ec51 0b17 	vmov	r0, r1, d7
 80082d8:	f7f8 f98e 	bl	80005f8 <__aeabi_dmul>
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	9d00      	ldr	r5, [sp, #0]
 80082e0:	930c      	str	r3, [sp, #48]	; 0x30
 80082e2:	ec41 0b18 	vmov	d8, r0, r1
 80082e6:	4639      	mov	r1, r7
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7f8 fc35 	bl	8000b58 <__aeabi_d2iz>
 80082ee:	9011      	str	r0, [sp, #68]	; 0x44
 80082f0:	f7f8 f918 	bl	8000524 <__aeabi_i2d>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f7 ffc4 	bl	8000288 <__aeabi_dsub>
 8008300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008302:	3330      	adds	r3, #48	; 0x30
 8008304:	f805 3b01 	strb.w	r3, [r5], #1
 8008308:	9b02      	ldr	r3, [sp, #8]
 800830a:	429d      	cmp	r5, r3
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	d134      	bne.n	8008380 <_dtoa_r+0x660>
 8008316:	4b19      	ldr	r3, [pc, #100]	; (800837c <_dtoa_r+0x65c>)
 8008318:	ec51 0b18 	vmov	r0, r1, d8
 800831c:	f7f7 ffb6 	bl	800028c <__adddf3>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f7f8 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800832c:	2800      	cmp	r0, #0
 800832e:	d175      	bne.n	800841c <_dtoa_r+0x6fc>
 8008330:	ec53 2b18 	vmov	r2, r3, d8
 8008334:	4911      	ldr	r1, [pc, #68]	; (800837c <_dtoa_r+0x65c>)
 8008336:	2000      	movs	r0, #0
 8008338:	f7f7 ffa6 	bl	8000288 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fbca 	bl	8000adc <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f43f af27 	beq.w	800819c <_dtoa_r+0x47c>
 800834e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008350:	1e6b      	subs	r3, r5, #1
 8008352:	930c      	str	r3, [sp, #48]	; 0x30
 8008354:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008358:	2b30      	cmp	r3, #48	; 0x30
 800835a:	d0f8      	beq.n	800834e <_dtoa_r+0x62e>
 800835c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008360:	e04a      	b.n	80083f8 <_dtoa_r+0x6d8>
 8008362:	bf00      	nop
 8008364:	0800a248 	.word	0x0800a248
 8008368:	0800a220 	.word	0x0800a220
 800836c:	3ff00000 	.word	0x3ff00000
 8008370:	40240000 	.word	0x40240000
 8008374:	401c0000 	.word	0x401c0000
 8008378:	40140000 	.word	0x40140000
 800837c:	3fe00000 	.word	0x3fe00000
 8008380:	4baf      	ldr	r3, [pc, #700]	; (8008640 <_dtoa_r+0x920>)
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	4606      	mov	r6, r0
 8008388:	460f      	mov	r7, r1
 800838a:	e7ac      	b.n	80082e6 <_dtoa_r+0x5c6>
 800838c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008390:	9d00      	ldr	r5, [sp, #0]
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	4630      	mov	r0, r6
 8008398:	4639      	mov	r1, r7
 800839a:	f7f8 fa57 	bl	800084c <__aeabi_ddiv>
 800839e:	f7f8 fbdb 	bl	8000b58 <__aeabi_d2iz>
 80083a2:	9002      	str	r0, [sp, #8]
 80083a4:	f7f8 f8be 	bl	8000524 <__aeabi_i2d>
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	f7f8 f924 	bl	80005f8 <__aeabi_dmul>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f7 ff66 	bl	8000288 <__aeabi_dsub>
 80083bc:	9e02      	ldr	r6, [sp, #8]
 80083be:	9f01      	ldr	r7, [sp, #4]
 80083c0:	3630      	adds	r6, #48	; 0x30
 80083c2:	f805 6b01 	strb.w	r6, [r5], #1
 80083c6:	9e00      	ldr	r6, [sp, #0]
 80083c8:	1bae      	subs	r6, r5, r6
 80083ca:	42b7      	cmp	r7, r6
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	d137      	bne.n	8008442 <_dtoa_r+0x722>
 80083d2:	f7f7 ff5b 	bl	800028c <__adddf3>
 80083d6:	4642      	mov	r2, r8
 80083d8:	464b      	mov	r3, r9
 80083da:	4606      	mov	r6, r0
 80083dc:	460f      	mov	r7, r1
 80083de:	f7f8 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 80083e2:	b9c8      	cbnz	r0, 8008418 <_dtoa_r+0x6f8>
 80083e4:	4642      	mov	r2, r8
 80083e6:	464b      	mov	r3, r9
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f7f8 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80083f0:	b110      	cbz	r0, 80083f8 <_dtoa_r+0x6d8>
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	07d9      	lsls	r1, r3, #31
 80083f6:	d40f      	bmi.n	8008418 <_dtoa_r+0x6f8>
 80083f8:	4620      	mov	r0, r4
 80083fa:	4659      	mov	r1, fp
 80083fc:	f000 fad6 	bl	80089ac <_Bfree>
 8008400:	2300      	movs	r3, #0
 8008402:	702b      	strb	r3, [r5, #0]
 8008404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008406:	f10a 0001 	add.w	r0, sl, #1
 800840a:	6018      	str	r0, [r3, #0]
 800840c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800840e:	2b00      	cmp	r3, #0
 8008410:	f43f acd8 	beq.w	8007dc4 <_dtoa_r+0xa4>
 8008414:	601d      	str	r5, [r3, #0]
 8008416:	e4d5      	b.n	8007dc4 <_dtoa_r+0xa4>
 8008418:	f8cd a01c 	str.w	sl, [sp, #28]
 800841c:	462b      	mov	r3, r5
 800841e:	461d      	mov	r5, r3
 8008420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008424:	2a39      	cmp	r2, #57	; 0x39
 8008426:	d108      	bne.n	800843a <_dtoa_r+0x71a>
 8008428:	9a00      	ldr	r2, [sp, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d1f7      	bne.n	800841e <_dtoa_r+0x6fe>
 800842e:	9a07      	ldr	r2, [sp, #28]
 8008430:	9900      	ldr	r1, [sp, #0]
 8008432:	3201      	adds	r2, #1
 8008434:	9207      	str	r2, [sp, #28]
 8008436:	2230      	movs	r2, #48	; 0x30
 8008438:	700a      	strb	r2, [r1, #0]
 800843a:	781a      	ldrb	r2, [r3, #0]
 800843c:	3201      	adds	r2, #1
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	e78c      	b.n	800835c <_dtoa_r+0x63c>
 8008442:	4b7f      	ldr	r3, [pc, #508]	; (8008640 <_dtoa_r+0x920>)
 8008444:	2200      	movs	r2, #0
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	2200      	movs	r2, #0
 800844c:	2300      	movs	r3, #0
 800844e:	4606      	mov	r6, r0
 8008450:	460f      	mov	r7, r1
 8008452:	f7f8 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 8008456:	2800      	cmp	r0, #0
 8008458:	d09b      	beq.n	8008392 <_dtoa_r+0x672>
 800845a:	e7cd      	b.n	80083f8 <_dtoa_r+0x6d8>
 800845c:	9a08      	ldr	r2, [sp, #32]
 800845e:	2a00      	cmp	r2, #0
 8008460:	f000 80c4 	beq.w	80085ec <_dtoa_r+0x8cc>
 8008464:	9a05      	ldr	r2, [sp, #20]
 8008466:	2a01      	cmp	r2, #1
 8008468:	f300 80a8 	bgt.w	80085bc <_dtoa_r+0x89c>
 800846c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800846e:	2a00      	cmp	r2, #0
 8008470:	f000 80a0 	beq.w	80085b4 <_dtoa_r+0x894>
 8008474:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008478:	9e06      	ldr	r6, [sp, #24]
 800847a:	4645      	mov	r5, r8
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	2101      	movs	r1, #1
 8008480:	441a      	add	r2, r3
 8008482:	4620      	mov	r0, r4
 8008484:	4498      	add	r8, r3
 8008486:	9204      	str	r2, [sp, #16]
 8008488:	f000 fb4c 	bl	8008b24 <__i2b>
 800848c:	4607      	mov	r7, r0
 800848e:	2d00      	cmp	r5, #0
 8008490:	dd0b      	ble.n	80084aa <_dtoa_r+0x78a>
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	dd08      	ble.n	80084aa <_dtoa_r+0x78a>
 8008498:	42ab      	cmp	r3, r5
 800849a:	9a04      	ldr	r2, [sp, #16]
 800849c:	bfa8      	it	ge
 800849e:	462b      	movge	r3, r5
 80084a0:	eba8 0803 	sub.w	r8, r8, r3
 80084a4:	1aed      	subs	r5, r5, r3
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9b06      	ldr	r3, [sp, #24]
 80084ac:	b1fb      	cbz	r3, 80084ee <_dtoa_r+0x7ce>
 80084ae:	9b08      	ldr	r3, [sp, #32]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 809f 	beq.w	80085f4 <_dtoa_r+0x8d4>
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	dd11      	ble.n	80084de <_dtoa_r+0x7be>
 80084ba:	4639      	mov	r1, r7
 80084bc:	4632      	mov	r2, r6
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 fbec 	bl	8008c9c <__pow5mult>
 80084c4:	465a      	mov	r2, fp
 80084c6:	4601      	mov	r1, r0
 80084c8:	4607      	mov	r7, r0
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 fb40 	bl	8008b50 <__multiply>
 80084d0:	4659      	mov	r1, fp
 80084d2:	9007      	str	r0, [sp, #28]
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 fa69 	bl	80089ac <_Bfree>
 80084da:	9b07      	ldr	r3, [sp, #28]
 80084dc:	469b      	mov	fp, r3
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	1b9a      	subs	r2, r3, r6
 80084e2:	d004      	beq.n	80084ee <_dtoa_r+0x7ce>
 80084e4:	4659      	mov	r1, fp
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 fbd8 	bl	8008c9c <__pow5mult>
 80084ec:	4683      	mov	fp, r0
 80084ee:	2101      	movs	r1, #1
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fb17 	bl	8008b24 <__i2b>
 80084f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	4606      	mov	r6, r0
 80084fc:	dd7c      	ble.n	80085f8 <_dtoa_r+0x8d8>
 80084fe:	461a      	mov	r2, r3
 8008500:	4601      	mov	r1, r0
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fbca 	bl	8008c9c <__pow5mult>
 8008508:	9b05      	ldr	r3, [sp, #20]
 800850a:	2b01      	cmp	r3, #1
 800850c:	4606      	mov	r6, r0
 800850e:	dd76      	ble.n	80085fe <_dtoa_r+0x8de>
 8008510:	2300      	movs	r3, #0
 8008512:	9306      	str	r3, [sp, #24]
 8008514:	6933      	ldr	r3, [r6, #16]
 8008516:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800851a:	6918      	ldr	r0, [r3, #16]
 800851c:	f000 fab2 	bl	8008a84 <__hi0bits>
 8008520:	f1c0 0020 	rsb	r0, r0, #32
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4418      	add	r0, r3
 8008528:	f010 001f 	ands.w	r0, r0, #31
 800852c:	f000 8086 	beq.w	800863c <_dtoa_r+0x91c>
 8008530:	f1c0 0320 	rsb	r3, r0, #32
 8008534:	2b04      	cmp	r3, #4
 8008536:	dd7f      	ble.n	8008638 <_dtoa_r+0x918>
 8008538:	f1c0 001c 	rsb	r0, r0, #28
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	4403      	add	r3, r0
 8008540:	4480      	add	r8, r0
 8008542:	4405      	add	r5, r0
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f1b8 0f00 	cmp.w	r8, #0
 800854a:	dd05      	ble.n	8008558 <_dtoa_r+0x838>
 800854c:	4659      	mov	r1, fp
 800854e:	4642      	mov	r2, r8
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fbfd 	bl	8008d50 <__lshift>
 8008556:	4683      	mov	fp, r0
 8008558:	9b04      	ldr	r3, [sp, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd05      	ble.n	800856a <_dtoa_r+0x84a>
 800855e:	4631      	mov	r1, r6
 8008560:	461a      	mov	r2, r3
 8008562:	4620      	mov	r0, r4
 8008564:	f000 fbf4 	bl	8008d50 <__lshift>
 8008568:	4606      	mov	r6, r0
 800856a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800856c:	2b00      	cmp	r3, #0
 800856e:	d069      	beq.n	8008644 <_dtoa_r+0x924>
 8008570:	4631      	mov	r1, r6
 8008572:	4658      	mov	r0, fp
 8008574:	f000 fc58 	bl	8008e28 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	da63      	bge.n	8008644 <_dtoa_r+0x924>
 800857c:	2300      	movs	r3, #0
 800857e:	4659      	mov	r1, fp
 8008580:	220a      	movs	r2, #10
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fa34 	bl	80089f0 <__multadd>
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800858e:	4683      	mov	fp, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 818f 	beq.w	80088b4 <_dtoa_r+0xb94>
 8008596:	4639      	mov	r1, r7
 8008598:	2300      	movs	r3, #0
 800859a:	220a      	movs	r2, #10
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fa27 	bl	80089f0 <__multadd>
 80085a2:	f1b9 0f00 	cmp.w	r9, #0
 80085a6:	4607      	mov	r7, r0
 80085a8:	f300 808e 	bgt.w	80086c8 <_dtoa_r+0x9a8>
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	dc50      	bgt.n	8008654 <_dtoa_r+0x934>
 80085b2:	e089      	b.n	80086c8 <_dtoa_r+0x9a8>
 80085b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ba:	e75d      	b.n	8008478 <_dtoa_r+0x758>
 80085bc:	9b01      	ldr	r3, [sp, #4]
 80085be:	1e5e      	subs	r6, r3, #1
 80085c0:	9b06      	ldr	r3, [sp, #24]
 80085c2:	42b3      	cmp	r3, r6
 80085c4:	bfbf      	itttt	lt
 80085c6:	9b06      	ldrlt	r3, [sp, #24]
 80085c8:	9606      	strlt	r6, [sp, #24]
 80085ca:	1af2      	sublt	r2, r6, r3
 80085cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80085ce:	bfb6      	itet	lt
 80085d0:	189b      	addlt	r3, r3, r2
 80085d2:	1b9e      	subge	r6, r3, r6
 80085d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085d6:	9b01      	ldr	r3, [sp, #4]
 80085d8:	bfb8      	it	lt
 80085da:	2600      	movlt	r6, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfb5      	itete	lt
 80085e0:	eba8 0503 	sublt.w	r5, r8, r3
 80085e4:	9b01      	ldrge	r3, [sp, #4]
 80085e6:	2300      	movlt	r3, #0
 80085e8:	4645      	movge	r5, r8
 80085ea:	e747      	b.n	800847c <_dtoa_r+0x75c>
 80085ec:	9e06      	ldr	r6, [sp, #24]
 80085ee:	9f08      	ldr	r7, [sp, #32]
 80085f0:	4645      	mov	r5, r8
 80085f2:	e74c      	b.n	800848e <_dtoa_r+0x76e>
 80085f4:	9a06      	ldr	r2, [sp, #24]
 80085f6:	e775      	b.n	80084e4 <_dtoa_r+0x7c4>
 80085f8:	9b05      	ldr	r3, [sp, #20]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	dc18      	bgt.n	8008630 <_dtoa_r+0x910>
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	b9b3      	cbnz	r3, 8008630 <_dtoa_r+0x910>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008608:	b9a3      	cbnz	r3, 8008634 <_dtoa_r+0x914>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008610:	0d1b      	lsrs	r3, r3, #20
 8008612:	051b      	lsls	r3, r3, #20
 8008614:	b12b      	cbz	r3, 8008622 <_dtoa_r+0x902>
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	f108 0801 	add.w	r8, r8, #1
 8008620:	2301      	movs	r3, #1
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008626:	2b00      	cmp	r3, #0
 8008628:	f47f af74 	bne.w	8008514 <_dtoa_r+0x7f4>
 800862c:	2001      	movs	r0, #1
 800862e:	e779      	b.n	8008524 <_dtoa_r+0x804>
 8008630:	2300      	movs	r3, #0
 8008632:	e7f6      	b.n	8008622 <_dtoa_r+0x902>
 8008634:	9b02      	ldr	r3, [sp, #8]
 8008636:	e7f4      	b.n	8008622 <_dtoa_r+0x902>
 8008638:	d085      	beq.n	8008546 <_dtoa_r+0x826>
 800863a:	4618      	mov	r0, r3
 800863c:	301c      	adds	r0, #28
 800863e:	e77d      	b.n	800853c <_dtoa_r+0x81c>
 8008640:	40240000 	.word	0x40240000
 8008644:	9b01      	ldr	r3, [sp, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	dc38      	bgt.n	80086bc <_dtoa_r+0x99c>
 800864a:	9b05      	ldr	r3, [sp, #20]
 800864c:	2b02      	cmp	r3, #2
 800864e:	dd35      	ble.n	80086bc <_dtoa_r+0x99c>
 8008650:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d10d      	bne.n	8008676 <_dtoa_r+0x956>
 800865a:	4631      	mov	r1, r6
 800865c:	464b      	mov	r3, r9
 800865e:	2205      	movs	r2, #5
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f9c5 	bl	80089f0 <__multadd>
 8008666:	4601      	mov	r1, r0
 8008668:	4606      	mov	r6, r0
 800866a:	4658      	mov	r0, fp
 800866c:	f000 fbdc 	bl	8008e28 <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	f73f adbd 	bgt.w	80081f0 <_dtoa_r+0x4d0>
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	9d00      	ldr	r5, [sp, #0]
 800867a:	ea6f 0a03 	mvn.w	sl, r3
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	4631      	mov	r1, r6
 8008684:	4620      	mov	r0, r4
 8008686:	f000 f991 	bl	80089ac <_Bfree>
 800868a:	2f00      	cmp	r7, #0
 800868c:	f43f aeb4 	beq.w	80083f8 <_dtoa_r+0x6d8>
 8008690:	f1b8 0f00 	cmp.w	r8, #0
 8008694:	d005      	beq.n	80086a2 <_dtoa_r+0x982>
 8008696:	45b8      	cmp	r8, r7
 8008698:	d003      	beq.n	80086a2 <_dtoa_r+0x982>
 800869a:	4641      	mov	r1, r8
 800869c:	4620      	mov	r0, r4
 800869e:	f000 f985 	bl	80089ac <_Bfree>
 80086a2:	4639      	mov	r1, r7
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f981 	bl	80089ac <_Bfree>
 80086aa:	e6a5      	b.n	80083f8 <_dtoa_r+0x6d8>
 80086ac:	2600      	movs	r6, #0
 80086ae:	4637      	mov	r7, r6
 80086b0:	e7e1      	b.n	8008676 <_dtoa_r+0x956>
 80086b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80086b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80086b8:	4637      	mov	r7, r6
 80086ba:	e599      	b.n	80081f0 <_dtoa_r+0x4d0>
 80086bc:	9b08      	ldr	r3, [sp, #32]
 80086be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 80fd 	beq.w	80088c2 <_dtoa_r+0xba2>
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	dd05      	ble.n	80086d8 <_dtoa_r+0x9b8>
 80086cc:	4639      	mov	r1, r7
 80086ce:	462a      	mov	r2, r5
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fb3d 	bl	8008d50 <__lshift>
 80086d6:	4607      	mov	r7, r0
 80086d8:	9b06      	ldr	r3, [sp, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d05c      	beq.n	8008798 <_dtoa_r+0xa78>
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 f923 	bl	800892c <_Balloc>
 80086e6:	4605      	mov	r5, r0
 80086e8:	b928      	cbnz	r0, 80086f6 <_dtoa_r+0x9d6>
 80086ea:	4b80      	ldr	r3, [pc, #512]	; (80088ec <_dtoa_r+0xbcc>)
 80086ec:	4602      	mov	r2, r0
 80086ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086f2:	f7ff bb2e 	b.w	8007d52 <_dtoa_r+0x32>
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	3202      	adds	r2, #2
 80086fa:	0092      	lsls	r2, r2, #2
 80086fc:	f107 010c 	add.w	r1, r7, #12
 8008700:	300c      	adds	r0, #12
 8008702:	f000 f905 	bl	8008910 <memcpy>
 8008706:	2201      	movs	r2, #1
 8008708:	4629      	mov	r1, r5
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fb20 	bl	8008d50 <__lshift>
 8008710:	9b00      	ldr	r3, [sp, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	444b      	add	r3, r9
 800871a:	9307      	str	r3, [sp, #28]
 800871c:	9b02      	ldr	r3, [sp, #8]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	46b8      	mov	r8, r7
 8008724:	9306      	str	r3, [sp, #24]
 8008726:	4607      	mov	r7, r0
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	4631      	mov	r1, r6
 800872c:	3b01      	subs	r3, #1
 800872e:	4658      	mov	r0, fp
 8008730:	9302      	str	r3, [sp, #8]
 8008732:	f7ff fa68 	bl	8007c06 <quorem>
 8008736:	4603      	mov	r3, r0
 8008738:	3330      	adds	r3, #48	; 0x30
 800873a:	9004      	str	r0, [sp, #16]
 800873c:	4641      	mov	r1, r8
 800873e:	4658      	mov	r0, fp
 8008740:	9308      	str	r3, [sp, #32]
 8008742:	f000 fb71 	bl	8008e28 <__mcmp>
 8008746:	463a      	mov	r2, r7
 8008748:	4681      	mov	r9, r0
 800874a:	4631      	mov	r1, r6
 800874c:	4620      	mov	r0, r4
 800874e:	f000 fb87 	bl	8008e60 <__mdiff>
 8008752:	68c2      	ldr	r2, [r0, #12]
 8008754:	9b08      	ldr	r3, [sp, #32]
 8008756:	4605      	mov	r5, r0
 8008758:	bb02      	cbnz	r2, 800879c <_dtoa_r+0xa7c>
 800875a:	4601      	mov	r1, r0
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fb63 	bl	8008e28 <__mcmp>
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	4602      	mov	r2, r0
 8008766:	4629      	mov	r1, r5
 8008768:	4620      	mov	r0, r4
 800876a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800876e:	f000 f91d 	bl	80089ac <_Bfree>
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008776:	9d01      	ldr	r5, [sp, #4]
 8008778:	ea43 0102 	orr.w	r1, r3, r2
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	430b      	orrs	r3, r1
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	d10d      	bne.n	80087a0 <_dtoa_r+0xa80>
 8008784:	2b39      	cmp	r3, #57	; 0x39
 8008786:	d029      	beq.n	80087dc <_dtoa_r+0xabc>
 8008788:	f1b9 0f00 	cmp.w	r9, #0
 800878c:	dd01      	ble.n	8008792 <_dtoa_r+0xa72>
 800878e:	9b04      	ldr	r3, [sp, #16]
 8008790:	3331      	adds	r3, #49	; 0x31
 8008792:	9a02      	ldr	r2, [sp, #8]
 8008794:	7013      	strb	r3, [r2, #0]
 8008796:	e774      	b.n	8008682 <_dtoa_r+0x962>
 8008798:	4638      	mov	r0, r7
 800879a:	e7b9      	b.n	8008710 <_dtoa_r+0x9f0>
 800879c:	2201      	movs	r2, #1
 800879e:	e7e2      	b.n	8008766 <_dtoa_r+0xa46>
 80087a0:	f1b9 0f00 	cmp.w	r9, #0
 80087a4:	db06      	blt.n	80087b4 <_dtoa_r+0xa94>
 80087a6:	9905      	ldr	r1, [sp, #20]
 80087a8:	ea41 0909 	orr.w	r9, r1, r9
 80087ac:	9906      	ldr	r1, [sp, #24]
 80087ae:	ea59 0101 	orrs.w	r1, r9, r1
 80087b2:	d120      	bne.n	80087f6 <_dtoa_r+0xad6>
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	ddec      	ble.n	8008792 <_dtoa_r+0xa72>
 80087b8:	4659      	mov	r1, fp
 80087ba:	2201      	movs	r2, #1
 80087bc:	4620      	mov	r0, r4
 80087be:	9301      	str	r3, [sp, #4]
 80087c0:	f000 fac6 	bl	8008d50 <__lshift>
 80087c4:	4631      	mov	r1, r6
 80087c6:	4683      	mov	fp, r0
 80087c8:	f000 fb2e 	bl	8008e28 <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	dc02      	bgt.n	80087d8 <_dtoa_r+0xab8>
 80087d2:	d1de      	bne.n	8008792 <_dtoa_r+0xa72>
 80087d4:	07da      	lsls	r2, r3, #31
 80087d6:	d5dc      	bpl.n	8008792 <_dtoa_r+0xa72>
 80087d8:	2b39      	cmp	r3, #57	; 0x39
 80087da:	d1d8      	bne.n	800878e <_dtoa_r+0xa6e>
 80087dc:	9a02      	ldr	r2, [sp, #8]
 80087de:	2339      	movs	r3, #57	; 0x39
 80087e0:	7013      	strb	r3, [r2, #0]
 80087e2:	462b      	mov	r3, r5
 80087e4:	461d      	mov	r5, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087ec:	2a39      	cmp	r2, #57	; 0x39
 80087ee:	d050      	beq.n	8008892 <_dtoa_r+0xb72>
 80087f0:	3201      	adds	r2, #1
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	e745      	b.n	8008682 <_dtoa_r+0x962>
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	dd03      	ble.n	8008802 <_dtoa_r+0xae2>
 80087fa:	2b39      	cmp	r3, #57	; 0x39
 80087fc:	d0ee      	beq.n	80087dc <_dtoa_r+0xabc>
 80087fe:	3301      	adds	r3, #1
 8008800:	e7c7      	b.n	8008792 <_dtoa_r+0xa72>
 8008802:	9a01      	ldr	r2, [sp, #4]
 8008804:	9907      	ldr	r1, [sp, #28]
 8008806:	f802 3c01 	strb.w	r3, [r2, #-1]
 800880a:	428a      	cmp	r2, r1
 800880c:	d02a      	beq.n	8008864 <_dtoa_r+0xb44>
 800880e:	4659      	mov	r1, fp
 8008810:	2300      	movs	r3, #0
 8008812:	220a      	movs	r2, #10
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f8eb 	bl	80089f0 <__multadd>
 800881a:	45b8      	cmp	r8, r7
 800881c:	4683      	mov	fp, r0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	f04f 020a 	mov.w	r2, #10
 8008826:	4641      	mov	r1, r8
 8008828:	4620      	mov	r0, r4
 800882a:	d107      	bne.n	800883c <_dtoa_r+0xb1c>
 800882c:	f000 f8e0 	bl	80089f0 <__multadd>
 8008830:	4680      	mov	r8, r0
 8008832:	4607      	mov	r7, r0
 8008834:	9b01      	ldr	r3, [sp, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	e775      	b.n	8008728 <_dtoa_r+0xa08>
 800883c:	f000 f8d8 	bl	80089f0 <__multadd>
 8008840:	4639      	mov	r1, r7
 8008842:	4680      	mov	r8, r0
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f8d1 	bl	80089f0 <__multadd>
 800884e:	4607      	mov	r7, r0
 8008850:	e7f0      	b.n	8008834 <_dtoa_r+0xb14>
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	9a00      	ldr	r2, [sp, #0]
 8008858:	bfcc      	ite	gt
 800885a:	464d      	movgt	r5, r9
 800885c:	2501      	movle	r5, #1
 800885e:	4415      	add	r5, r2
 8008860:	f04f 0800 	mov.w	r8, #0
 8008864:	4659      	mov	r1, fp
 8008866:	2201      	movs	r2, #1
 8008868:	4620      	mov	r0, r4
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f000 fa70 	bl	8008d50 <__lshift>
 8008870:	4631      	mov	r1, r6
 8008872:	4683      	mov	fp, r0
 8008874:	f000 fad8 	bl	8008e28 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	dcb2      	bgt.n	80087e2 <_dtoa_r+0xac2>
 800887c:	d102      	bne.n	8008884 <_dtoa_r+0xb64>
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	07db      	lsls	r3, r3, #31
 8008882:	d4ae      	bmi.n	80087e2 <_dtoa_r+0xac2>
 8008884:	462b      	mov	r3, r5
 8008886:	461d      	mov	r5, r3
 8008888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888c:	2a30      	cmp	r2, #48	; 0x30
 800888e:	d0fa      	beq.n	8008886 <_dtoa_r+0xb66>
 8008890:	e6f7      	b.n	8008682 <_dtoa_r+0x962>
 8008892:	9a00      	ldr	r2, [sp, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d1a5      	bne.n	80087e4 <_dtoa_r+0xac4>
 8008898:	f10a 0a01 	add.w	sl, sl, #1
 800889c:	2331      	movs	r3, #49	; 0x31
 800889e:	e779      	b.n	8008794 <_dtoa_r+0xa74>
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <_dtoa_r+0xbd0>)
 80088a2:	f7ff baaf 	b.w	8007e04 <_dtoa_r+0xe4>
 80088a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f47f aa86 	bne.w	8007dba <_dtoa_r+0x9a>
 80088ae:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <_dtoa_r+0xbd4>)
 80088b0:	f7ff baa8 	b.w	8007e04 <_dtoa_r+0xe4>
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	dc03      	bgt.n	80088c2 <_dtoa_r+0xba2>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	f73f aec9 	bgt.w	8008654 <_dtoa_r+0x934>
 80088c2:	9d00      	ldr	r5, [sp, #0]
 80088c4:	4631      	mov	r1, r6
 80088c6:	4658      	mov	r0, fp
 80088c8:	f7ff f99d 	bl	8007c06 <quorem>
 80088cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088d0:	f805 3b01 	strb.w	r3, [r5], #1
 80088d4:	9a00      	ldr	r2, [sp, #0]
 80088d6:	1aaa      	subs	r2, r5, r2
 80088d8:	4591      	cmp	r9, r2
 80088da:	ddba      	ble.n	8008852 <_dtoa_r+0xb32>
 80088dc:	4659      	mov	r1, fp
 80088de:	2300      	movs	r3, #0
 80088e0:	220a      	movs	r2, #10
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 f884 	bl	80089f0 <__multadd>
 80088e8:	4683      	mov	fp, r0
 80088ea:	e7eb      	b.n	80088c4 <_dtoa_r+0xba4>
 80088ec:	0800a1af 	.word	0x0800a1af
 80088f0:	0800a108 	.word	0x0800a108
 80088f4:	0800a12c 	.word	0x0800a12c

080088f8 <_localeconv_r>:
 80088f8:	4800      	ldr	r0, [pc, #0]	; (80088fc <_localeconv_r+0x4>)
 80088fa:	4770      	bx	lr
 80088fc:	20000164 	.word	0x20000164

08008900 <malloc>:
 8008900:	4b02      	ldr	r3, [pc, #8]	; (800890c <malloc+0xc>)
 8008902:	4601      	mov	r1, r0
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f000 bbef 	b.w	80090e8 <_malloc_r>
 800890a:	bf00      	nop
 800890c:	20000010 	.word	0x20000010

08008910 <memcpy>:
 8008910:	440a      	add	r2, r1
 8008912:	4291      	cmp	r1, r2
 8008914:	f100 33ff 	add.w	r3, r0, #4294967295
 8008918:	d100      	bne.n	800891c <memcpy+0xc>
 800891a:	4770      	bx	lr
 800891c:	b510      	push	{r4, lr}
 800891e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008926:	4291      	cmp	r1, r2
 8008928:	d1f9      	bne.n	800891e <memcpy+0xe>
 800892a:	bd10      	pop	{r4, pc}

0800892c <_Balloc>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008930:	4604      	mov	r4, r0
 8008932:	460d      	mov	r5, r1
 8008934:	b976      	cbnz	r6, 8008954 <_Balloc+0x28>
 8008936:	2010      	movs	r0, #16
 8008938:	f7ff ffe2 	bl	8008900 <malloc>
 800893c:	4602      	mov	r2, r0
 800893e:	6260      	str	r0, [r4, #36]	; 0x24
 8008940:	b920      	cbnz	r0, 800894c <_Balloc+0x20>
 8008942:	4b18      	ldr	r3, [pc, #96]	; (80089a4 <_Balloc+0x78>)
 8008944:	4818      	ldr	r0, [pc, #96]	; (80089a8 <_Balloc+0x7c>)
 8008946:	2166      	movs	r1, #102	; 0x66
 8008948:	f000 fd94 	bl	8009474 <__assert_func>
 800894c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008950:	6006      	str	r6, [r0, #0]
 8008952:	60c6      	str	r6, [r0, #12]
 8008954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008956:	68f3      	ldr	r3, [r6, #12]
 8008958:	b183      	cbz	r3, 800897c <_Balloc+0x50>
 800895a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008962:	b9b8      	cbnz	r0, 8008994 <_Balloc+0x68>
 8008964:	2101      	movs	r1, #1
 8008966:	fa01 f605 	lsl.w	r6, r1, r5
 800896a:	1d72      	adds	r2, r6, #5
 800896c:	0092      	lsls	r2, r2, #2
 800896e:	4620      	mov	r0, r4
 8008970:	f000 fb5a 	bl	8009028 <_calloc_r>
 8008974:	b160      	cbz	r0, 8008990 <_Balloc+0x64>
 8008976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800897a:	e00e      	b.n	800899a <_Balloc+0x6e>
 800897c:	2221      	movs	r2, #33	; 0x21
 800897e:	2104      	movs	r1, #4
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fb51 	bl	8009028 <_calloc_r>
 8008986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008988:	60f0      	str	r0, [r6, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e4      	bne.n	800895a <_Balloc+0x2e>
 8008990:	2000      	movs	r0, #0
 8008992:	bd70      	pop	{r4, r5, r6, pc}
 8008994:	6802      	ldr	r2, [r0, #0]
 8008996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800899a:	2300      	movs	r3, #0
 800899c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089a0:	e7f7      	b.n	8008992 <_Balloc+0x66>
 80089a2:	bf00      	nop
 80089a4:	0800a139 	.word	0x0800a139
 80089a8:	0800a1c0 	.word	0x0800a1c0

080089ac <_Bfree>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b976      	cbnz	r6, 80089d4 <_Bfree+0x28>
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7ff ffa2 	bl	8008900 <malloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	6268      	str	r0, [r5, #36]	; 0x24
 80089c0:	b920      	cbnz	r0, 80089cc <_Bfree+0x20>
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <_Bfree+0x3c>)
 80089c4:	4809      	ldr	r0, [pc, #36]	; (80089ec <_Bfree+0x40>)
 80089c6:	218a      	movs	r1, #138	; 0x8a
 80089c8:	f000 fd54 	bl	8009474 <__assert_func>
 80089cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d0:	6006      	str	r6, [r0, #0]
 80089d2:	60c6      	str	r6, [r0, #12]
 80089d4:	b13c      	cbz	r4, 80089e6 <_Bfree+0x3a>
 80089d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089e0:	6021      	str	r1, [r4, #0]
 80089e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	0800a139 	.word	0x0800a139
 80089ec:	0800a1c0 	.word	0x0800a1c0

080089f0 <__multadd>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	690e      	ldr	r6, [r1, #16]
 80089f6:	4607      	mov	r7, r0
 80089f8:	4698      	mov	r8, r3
 80089fa:	460c      	mov	r4, r1
 80089fc:	f101 0014 	add.w	r0, r1, #20
 8008a00:	2300      	movs	r3, #0
 8008a02:	6805      	ldr	r5, [r0, #0]
 8008a04:	b2a9      	uxth	r1, r5
 8008a06:	fb02 8101 	mla	r1, r2, r1, r8
 8008a0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a0e:	0c2d      	lsrs	r5, r5, #16
 8008a10:	fb02 c505 	mla	r5, r2, r5, ip
 8008a14:	b289      	uxth	r1, r1
 8008a16:	3301      	adds	r3, #1
 8008a18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a1c:	429e      	cmp	r6, r3
 8008a1e:	f840 1b04 	str.w	r1, [r0], #4
 8008a22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a26:	dcec      	bgt.n	8008a02 <__multadd+0x12>
 8008a28:	f1b8 0f00 	cmp.w	r8, #0
 8008a2c:	d022      	beq.n	8008a74 <__multadd+0x84>
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	42b3      	cmp	r3, r6
 8008a32:	dc19      	bgt.n	8008a68 <__multadd+0x78>
 8008a34:	6861      	ldr	r1, [r4, #4]
 8008a36:	4638      	mov	r0, r7
 8008a38:	3101      	adds	r1, #1
 8008a3a:	f7ff ff77 	bl	800892c <_Balloc>
 8008a3e:	4605      	mov	r5, r0
 8008a40:	b928      	cbnz	r0, 8008a4e <__multadd+0x5e>
 8008a42:	4602      	mov	r2, r0
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <__multadd+0x8c>)
 8008a46:	480e      	ldr	r0, [pc, #56]	; (8008a80 <__multadd+0x90>)
 8008a48:	21b5      	movs	r1, #181	; 0xb5
 8008a4a:	f000 fd13 	bl	8009474 <__assert_func>
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	3202      	adds	r2, #2
 8008a52:	f104 010c 	add.w	r1, r4, #12
 8008a56:	0092      	lsls	r2, r2, #2
 8008a58:	300c      	adds	r0, #12
 8008a5a:	f7ff ff59 	bl	8008910 <memcpy>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4638      	mov	r0, r7
 8008a62:	f7ff ffa3 	bl	80089ac <_Bfree>
 8008a66:	462c      	mov	r4, r5
 8008a68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a72:	6126      	str	r6, [r4, #16]
 8008a74:	4620      	mov	r0, r4
 8008a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a7a:	bf00      	nop
 8008a7c:	0800a1af 	.word	0x0800a1af
 8008a80:	0800a1c0 	.word	0x0800a1c0

08008a84 <__hi0bits>:
 8008a84:	0c03      	lsrs	r3, r0, #16
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	b9d3      	cbnz	r3, 8008ac0 <__hi0bits+0x3c>
 8008a8a:	0400      	lsls	r0, r0, #16
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a92:	bf04      	itt	eq
 8008a94:	0200      	lsleq	r0, r0, #8
 8008a96:	3308      	addeq	r3, #8
 8008a98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a9c:	bf04      	itt	eq
 8008a9e:	0100      	lsleq	r0, r0, #4
 8008aa0:	3304      	addeq	r3, #4
 8008aa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008aa6:	bf04      	itt	eq
 8008aa8:	0080      	lsleq	r0, r0, #2
 8008aaa:	3302      	addeq	r3, #2
 8008aac:	2800      	cmp	r0, #0
 8008aae:	db05      	blt.n	8008abc <__hi0bits+0x38>
 8008ab0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ab4:	f103 0301 	add.w	r3, r3, #1
 8008ab8:	bf08      	it	eq
 8008aba:	2320      	moveq	r3, #32
 8008abc:	4618      	mov	r0, r3
 8008abe:	4770      	bx	lr
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e7e4      	b.n	8008a8e <__hi0bits+0xa>

08008ac4 <__lo0bits>:
 8008ac4:	6803      	ldr	r3, [r0, #0]
 8008ac6:	f013 0207 	ands.w	r2, r3, #7
 8008aca:	4601      	mov	r1, r0
 8008acc:	d00b      	beq.n	8008ae6 <__lo0bits+0x22>
 8008ace:	07da      	lsls	r2, r3, #31
 8008ad0:	d424      	bmi.n	8008b1c <__lo0bits+0x58>
 8008ad2:	0798      	lsls	r0, r3, #30
 8008ad4:	bf49      	itett	mi
 8008ad6:	085b      	lsrmi	r3, r3, #1
 8008ad8:	089b      	lsrpl	r3, r3, #2
 8008ada:	2001      	movmi	r0, #1
 8008adc:	600b      	strmi	r3, [r1, #0]
 8008ade:	bf5c      	itt	pl
 8008ae0:	600b      	strpl	r3, [r1, #0]
 8008ae2:	2002      	movpl	r0, #2
 8008ae4:	4770      	bx	lr
 8008ae6:	b298      	uxth	r0, r3
 8008ae8:	b9b0      	cbnz	r0, 8008b18 <__lo0bits+0x54>
 8008aea:	0c1b      	lsrs	r3, r3, #16
 8008aec:	2010      	movs	r0, #16
 8008aee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008af2:	bf04      	itt	eq
 8008af4:	0a1b      	lsreq	r3, r3, #8
 8008af6:	3008      	addeq	r0, #8
 8008af8:	071a      	lsls	r2, r3, #28
 8008afa:	bf04      	itt	eq
 8008afc:	091b      	lsreq	r3, r3, #4
 8008afe:	3004      	addeq	r0, #4
 8008b00:	079a      	lsls	r2, r3, #30
 8008b02:	bf04      	itt	eq
 8008b04:	089b      	lsreq	r3, r3, #2
 8008b06:	3002      	addeq	r0, #2
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	d403      	bmi.n	8008b14 <__lo0bits+0x50>
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	f100 0001 	add.w	r0, r0, #1
 8008b12:	d005      	beq.n	8008b20 <__lo0bits+0x5c>
 8008b14:	600b      	str	r3, [r1, #0]
 8008b16:	4770      	bx	lr
 8008b18:	4610      	mov	r0, r2
 8008b1a:	e7e8      	b.n	8008aee <__lo0bits+0x2a>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	4770      	bx	lr
 8008b20:	2020      	movs	r0, #32
 8008b22:	4770      	bx	lr

08008b24 <__i2b>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	2101      	movs	r1, #1
 8008b2a:	f7ff feff 	bl	800892c <_Balloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <__i2b+0x1a>
 8008b32:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <__i2b+0x24>)
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <__i2b+0x28>)
 8008b36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b3a:	f000 fc9b 	bl	8009474 <__assert_func>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	6144      	str	r4, [r0, #20]
 8008b42:	6103      	str	r3, [r0, #16]
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	bf00      	nop
 8008b48:	0800a1af 	.word	0x0800a1af
 8008b4c:	0800a1c0 	.word	0x0800a1c0

08008b50 <__multiply>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	4614      	mov	r4, r2
 8008b56:	690a      	ldr	r2, [r1, #16]
 8008b58:	6923      	ldr	r3, [r4, #16]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	bfb8      	it	lt
 8008b5e:	460b      	movlt	r3, r1
 8008b60:	460d      	mov	r5, r1
 8008b62:	bfbc      	itt	lt
 8008b64:	4625      	movlt	r5, r4
 8008b66:	461c      	movlt	r4, r3
 8008b68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b70:	68ab      	ldr	r3, [r5, #8]
 8008b72:	6869      	ldr	r1, [r5, #4]
 8008b74:	eb0a 0709 	add.w	r7, sl, r9
 8008b78:	42bb      	cmp	r3, r7
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	bfb8      	it	lt
 8008b7e:	3101      	addlt	r1, #1
 8008b80:	f7ff fed4 	bl	800892c <_Balloc>
 8008b84:	b930      	cbnz	r0, 8008b94 <__multiply+0x44>
 8008b86:	4602      	mov	r2, r0
 8008b88:	4b42      	ldr	r3, [pc, #264]	; (8008c94 <__multiply+0x144>)
 8008b8a:	4843      	ldr	r0, [pc, #268]	; (8008c98 <__multiply+0x148>)
 8008b8c:	f240 115d 	movw	r1, #349	; 0x15d
 8008b90:	f000 fc70 	bl	8009474 <__assert_func>
 8008b94:	f100 0614 	add.w	r6, r0, #20
 8008b98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b9c:	4633      	mov	r3, r6
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4543      	cmp	r3, r8
 8008ba2:	d31e      	bcc.n	8008be2 <__multiply+0x92>
 8008ba4:	f105 0c14 	add.w	ip, r5, #20
 8008ba8:	f104 0314 	add.w	r3, r4, #20
 8008bac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008bb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008bb4:	9202      	str	r2, [sp, #8]
 8008bb6:	ebac 0205 	sub.w	r2, ip, r5
 8008bba:	3a15      	subs	r2, #21
 8008bbc:	f022 0203 	bic.w	r2, r2, #3
 8008bc0:	3204      	adds	r2, #4
 8008bc2:	f105 0115 	add.w	r1, r5, #21
 8008bc6:	458c      	cmp	ip, r1
 8008bc8:	bf38      	it	cc
 8008bca:	2204      	movcc	r2, #4
 8008bcc:	9201      	str	r2, [sp, #4]
 8008bce:	9a02      	ldr	r2, [sp, #8]
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d808      	bhi.n	8008be8 <__multiply+0x98>
 8008bd6:	2f00      	cmp	r7, #0
 8008bd8:	dc55      	bgt.n	8008c86 <__multiply+0x136>
 8008bda:	6107      	str	r7, [r0, #16]
 8008bdc:	b005      	add	sp, #20
 8008bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be2:	f843 2b04 	str.w	r2, [r3], #4
 8008be6:	e7db      	b.n	8008ba0 <__multiply+0x50>
 8008be8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bec:	f1ba 0f00 	cmp.w	sl, #0
 8008bf0:	d020      	beq.n	8008c34 <__multiply+0xe4>
 8008bf2:	f105 0e14 	add.w	lr, r5, #20
 8008bf6:	46b1      	mov	r9, r6
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bfe:	f8d9 b000 	ldr.w	fp, [r9]
 8008c02:	b2a1      	uxth	r1, r4
 8008c04:	fa1f fb8b 	uxth.w	fp, fp
 8008c08:	fb0a b101 	mla	r1, sl, r1, fp
 8008c0c:	4411      	add	r1, r2
 8008c0e:	f8d9 2000 	ldr.w	r2, [r9]
 8008c12:	0c24      	lsrs	r4, r4, #16
 8008c14:	0c12      	lsrs	r2, r2, #16
 8008c16:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c1e:	b289      	uxth	r1, r1
 8008c20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c24:	45f4      	cmp	ip, lr
 8008c26:	f849 1b04 	str.w	r1, [r9], #4
 8008c2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c2e:	d8e4      	bhi.n	8008bfa <__multiply+0xaa>
 8008c30:	9901      	ldr	r1, [sp, #4]
 8008c32:	5072      	str	r2, [r6, r1]
 8008c34:	9a03      	ldr	r2, [sp, #12]
 8008c36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	d01f      	beq.n	8008c82 <__multiply+0x132>
 8008c42:	6834      	ldr	r4, [r6, #0]
 8008c44:	f105 0114 	add.w	r1, r5, #20
 8008c48:	46b6      	mov	lr, r6
 8008c4a:	f04f 0a00 	mov.w	sl, #0
 8008c4e:	880a      	ldrh	r2, [r1, #0]
 8008c50:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c54:	fb09 b202 	mla	r2, r9, r2, fp
 8008c58:	4492      	add	sl, r2
 8008c5a:	b2a4      	uxth	r4, r4
 8008c5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c60:	f84e 4b04 	str.w	r4, [lr], #4
 8008c64:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c68:	f8be 2000 	ldrh.w	r2, [lr]
 8008c6c:	0c24      	lsrs	r4, r4, #16
 8008c6e:	fb09 2404 	mla	r4, r9, r4, r2
 8008c72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c76:	458c      	cmp	ip, r1
 8008c78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c7c:	d8e7      	bhi.n	8008c4e <__multiply+0xfe>
 8008c7e:	9a01      	ldr	r2, [sp, #4]
 8008c80:	50b4      	str	r4, [r6, r2]
 8008c82:	3604      	adds	r6, #4
 8008c84:	e7a3      	b.n	8008bce <__multiply+0x7e>
 8008c86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1a5      	bne.n	8008bda <__multiply+0x8a>
 8008c8e:	3f01      	subs	r7, #1
 8008c90:	e7a1      	b.n	8008bd6 <__multiply+0x86>
 8008c92:	bf00      	nop
 8008c94:	0800a1af 	.word	0x0800a1af
 8008c98:	0800a1c0 	.word	0x0800a1c0

08008c9c <__pow5mult>:
 8008c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	f012 0203 	ands.w	r2, r2, #3
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	d007      	beq.n	8008cbc <__pow5mult+0x20>
 8008cac:	4c25      	ldr	r4, [pc, #148]	; (8008d44 <__pow5mult+0xa8>)
 8008cae:	3a01      	subs	r2, #1
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cb6:	f7ff fe9b 	bl	80089f0 <__multadd>
 8008cba:	4607      	mov	r7, r0
 8008cbc:	10ad      	asrs	r5, r5, #2
 8008cbe:	d03d      	beq.n	8008d3c <__pow5mult+0xa0>
 8008cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cc2:	b97c      	cbnz	r4, 8008ce4 <__pow5mult+0x48>
 8008cc4:	2010      	movs	r0, #16
 8008cc6:	f7ff fe1b 	bl	8008900 <malloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	6270      	str	r0, [r6, #36]	; 0x24
 8008cce:	b928      	cbnz	r0, 8008cdc <__pow5mult+0x40>
 8008cd0:	4b1d      	ldr	r3, [pc, #116]	; (8008d48 <__pow5mult+0xac>)
 8008cd2:	481e      	ldr	r0, [pc, #120]	; (8008d4c <__pow5mult+0xb0>)
 8008cd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cd8:	f000 fbcc 	bl	8009474 <__assert_func>
 8008cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ce0:	6004      	str	r4, [r0, #0]
 8008ce2:	60c4      	str	r4, [r0, #12]
 8008ce4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cec:	b94c      	cbnz	r4, 8008d02 <__pow5mult+0x66>
 8008cee:	f240 2171 	movw	r1, #625	; 0x271
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff ff16 	bl	8008b24 <__i2b>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cfe:	4604      	mov	r4, r0
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	f04f 0900 	mov.w	r9, #0
 8008d06:	07eb      	lsls	r3, r5, #31
 8008d08:	d50a      	bpl.n	8008d20 <__pow5mult+0x84>
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7ff ff1e 	bl	8008b50 <__multiply>
 8008d14:	4639      	mov	r1, r7
 8008d16:	4680      	mov	r8, r0
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff fe47 	bl	80089ac <_Bfree>
 8008d1e:	4647      	mov	r7, r8
 8008d20:	106d      	asrs	r5, r5, #1
 8008d22:	d00b      	beq.n	8008d3c <__pow5mult+0xa0>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	b938      	cbnz	r0, 8008d38 <__pow5mult+0x9c>
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7ff ff0f 	bl	8008b50 <__multiply>
 8008d32:	6020      	str	r0, [r4, #0]
 8008d34:	f8c0 9000 	str.w	r9, [r0]
 8008d38:	4604      	mov	r4, r0
 8008d3a:	e7e4      	b.n	8008d06 <__pow5mult+0x6a>
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d42:	bf00      	nop
 8008d44:	0800a310 	.word	0x0800a310
 8008d48:	0800a139 	.word	0x0800a139
 8008d4c:	0800a1c0 	.word	0x0800a1c0

08008d50 <__lshift>:
 8008d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	460c      	mov	r4, r1
 8008d56:	6849      	ldr	r1, [r1, #4]
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d5e:	68a3      	ldr	r3, [r4, #8]
 8008d60:	4607      	mov	r7, r0
 8008d62:	4691      	mov	r9, r2
 8008d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d68:	f108 0601 	add.w	r6, r8, #1
 8008d6c:	42b3      	cmp	r3, r6
 8008d6e:	db0b      	blt.n	8008d88 <__lshift+0x38>
 8008d70:	4638      	mov	r0, r7
 8008d72:	f7ff fddb 	bl	800892c <_Balloc>
 8008d76:	4605      	mov	r5, r0
 8008d78:	b948      	cbnz	r0, 8008d8e <__lshift+0x3e>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b28      	ldr	r3, [pc, #160]	; (8008e20 <__lshift+0xd0>)
 8008d7e:	4829      	ldr	r0, [pc, #164]	; (8008e24 <__lshift+0xd4>)
 8008d80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d84:	f000 fb76 	bl	8009474 <__assert_func>
 8008d88:	3101      	adds	r1, #1
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	e7ee      	b.n	8008d6c <__lshift+0x1c>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f100 0114 	add.w	r1, r0, #20
 8008d94:	f100 0210 	add.w	r2, r0, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	4553      	cmp	r3, sl
 8008d9c:	db33      	blt.n	8008e06 <__lshift+0xb6>
 8008d9e:	6920      	ldr	r0, [r4, #16]
 8008da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008da4:	f104 0314 	add.w	r3, r4, #20
 8008da8:	f019 091f 	ands.w	r9, r9, #31
 8008dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008db0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008db4:	d02b      	beq.n	8008e0e <__lshift+0xbe>
 8008db6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dba:	468a      	mov	sl, r1
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	fa00 f009 	lsl.w	r0, r0, r9
 8008dc4:	4302      	orrs	r2, r0
 8008dc6:	f84a 2b04 	str.w	r2, [sl], #4
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	459c      	cmp	ip, r3
 8008dd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dd4:	d8f3      	bhi.n	8008dbe <__lshift+0x6e>
 8008dd6:	ebac 0304 	sub.w	r3, ip, r4
 8008dda:	3b15      	subs	r3, #21
 8008ddc:	f023 0303 	bic.w	r3, r3, #3
 8008de0:	3304      	adds	r3, #4
 8008de2:	f104 0015 	add.w	r0, r4, #21
 8008de6:	4584      	cmp	ip, r0
 8008de8:	bf38      	it	cc
 8008dea:	2304      	movcc	r3, #4
 8008dec:	50ca      	str	r2, [r1, r3]
 8008dee:	b10a      	cbz	r2, 8008df4 <__lshift+0xa4>
 8008df0:	f108 0602 	add.w	r6, r8, #2
 8008df4:	3e01      	subs	r6, #1
 8008df6:	4638      	mov	r0, r7
 8008df8:	612e      	str	r6, [r5, #16]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	f7ff fdd6 	bl	80089ac <_Bfree>
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	e7c5      	b.n	8008d9a <__lshift+0x4a>
 8008e0e:	3904      	subs	r1, #4
 8008e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e18:	459c      	cmp	ip, r3
 8008e1a:	d8f9      	bhi.n	8008e10 <__lshift+0xc0>
 8008e1c:	e7ea      	b.n	8008df4 <__lshift+0xa4>
 8008e1e:	bf00      	nop
 8008e20:	0800a1af 	.word	0x0800a1af
 8008e24:	0800a1c0 	.word	0x0800a1c0

08008e28 <__mcmp>:
 8008e28:	b530      	push	{r4, r5, lr}
 8008e2a:	6902      	ldr	r2, [r0, #16]
 8008e2c:	690c      	ldr	r4, [r1, #16]
 8008e2e:	1b12      	subs	r2, r2, r4
 8008e30:	d10e      	bne.n	8008e50 <__mcmp+0x28>
 8008e32:	f100 0314 	add.w	r3, r0, #20
 8008e36:	3114      	adds	r1, #20
 8008e38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e48:	42a5      	cmp	r5, r4
 8008e4a:	d003      	beq.n	8008e54 <__mcmp+0x2c>
 8008e4c:	d305      	bcc.n	8008e5a <__mcmp+0x32>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4610      	mov	r0, r2
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	4283      	cmp	r3, r0
 8008e56:	d3f3      	bcc.n	8008e40 <__mcmp+0x18>
 8008e58:	e7fa      	b.n	8008e50 <__mcmp+0x28>
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	e7f7      	b.n	8008e50 <__mcmp+0x28>

08008e60 <__mdiff>:
 8008e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	4606      	mov	r6, r0
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4617      	mov	r7, r2
 8008e6e:	f7ff ffdb 	bl	8008e28 <__mcmp>
 8008e72:	1e05      	subs	r5, r0, #0
 8008e74:	d110      	bne.n	8008e98 <__mdiff+0x38>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff fd57 	bl	800892c <_Balloc>
 8008e7e:	b930      	cbnz	r0, 8008e8e <__mdiff+0x2e>
 8008e80:	4b39      	ldr	r3, [pc, #228]	; (8008f68 <__mdiff+0x108>)
 8008e82:	4602      	mov	r2, r0
 8008e84:	f240 2132 	movw	r1, #562	; 0x232
 8008e88:	4838      	ldr	r0, [pc, #224]	; (8008f6c <__mdiff+0x10c>)
 8008e8a:	f000 faf3 	bl	8009474 <__assert_func>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	bfa4      	itt	ge
 8008e9a:	463b      	movge	r3, r7
 8008e9c:	4627      	movge	r7, r4
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	bfa6      	itte	ge
 8008ea4:	461c      	movge	r4, r3
 8008ea6:	2500      	movge	r5, #0
 8008ea8:	2501      	movlt	r5, #1
 8008eaa:	f7ff fd3f 	bl	800892c <_Balloc>
 8008eae:	b920      	cbnz	r0, 8008eba <__mdiff+0x5a>
 8008eb0:	4b2d      	ldr	r3, [pc, #180]	; (8008f68 <__mdiff+0x108>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008eb8:	e7e6      	b.n	8008e88 <__mdiff+0x28>
 8008eba:	693e      	ldr	r6, [r7, #16]
 8008ebc:	60c5      	str	r5, [r0, #12]
 8008ebe:	6925      	ldr	r5, [r4, #16]
 8008ec0:	f107 0114 	add.w	r1, r7, #20
 8008ec4:	f104 0914 	add.w	r9, r4, #20
 8008ec8:	f100 0e14 	add.w	lr, r0, #20
 8008ecc:	f107 0210 	add.w	r2, r7, #16
 8008ed0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ed4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ed8:	46f2      	mov	sl, lr
 8008eda:	2700      	movs	r7, #0
 8008edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ee4:	fa1f f883 	uxth.w	r8, r3
 8008ee8:	fa17 f78b 	uxtah	r7, r7, fp
 8008eec:	0c1b      	lsrs	r3, r3, #16
 8008eee:	eba7 0808 	sub.w	r8, r7, r8
 8008ef2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ef6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008efa:	fa1f f888 	uxth.w	r8, r8
 8008efe:	141f      	asrs	r7, r3, #16
 8008f00:	454d      	cmp	r5, r9
 8008f02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f06:	f84a 3b04 	str.w	r3, [sl], #4
 8008f0a:	d8e7      	bhi.n	8008edc <__mdiff+0x7c>
 8008f0c:	1b2b      	subs	r3, r5, r4
 8008f0e:	3b15      	subs	r3, #21
 8008f10:	f023 0303 	bic.w	r3, r3, #3
 8008f14:	3304      	adds	r3, #4
 8008f16:	3415      	adds	r4, #21
 8008f18:	42a5      	cmp	r5, r4
 8008f1a:	bf38      	it	cc
 8008f1c:	2304      	movcc	r3, #4
 8008f1e:	4419      	add	r1, r3
 8008f20:	4473      	add	r3, lr
 8008f22:	469e      	mov	lr, r3
 8008f24:	460d      	mov	r5, r1
 8008f26:	4565      	cmp	r5, ip
 8008f28:	d30e      	bcc.n	8008f48 <__mdiff+0xe8>
 8008f2a:	f10c 0203 	add.w	r2, ip, #3
 8008f2e:	1a52      	subs	r2, r2, r1
 8008f30:	f022 0203 	bic.w	r2, r2, #3
 8008f34:	3903      	subs	r1, #3
 8008f36:	458c      	cmp	ip, r1
 8008f38:	bf38      	it	cc
 8008f3a:	2200      	movcc	r2, #0
 8008f3c:	441a      	add	r2, r3
 8008f3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f42:	b17b      	cbz	r3, 8008f64 <__mdiff+0x104>
 8008f44:	6106      	str	r6, [r0, #16]
 8008f46:	e7a5      	b.n	8008e94 <__mdiff+0x34>
 8008f48:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f4c:	fa17 f488 	uxtah	r4, r7, r8
 8008f50:	1422      	asrs	r2, r4, #16
 8008f52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f56:	b2a4      	uxth	r4, r4
 8008f58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f5c:	f84e 4b04 	str.w	r4, [lr], #4
 8008f60:	1417      	asrs	r7, r2, #16
 8008f62:	e7e0      	b.n	8008f26 <__mdiff+0xc6>
 8008f64:	3e01      	subs	r6, #1
 8008f66:	e7ea      	b.n	8008f3e <__mdiff+0xde>
 8008f68:	0800a1af 	.word	0x0800a1af
 8008f6c:	0800a1c0 	.word	0x0800a1c0

08008f70 <__d2b>:
 8008f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	4689      	mov	r9, r1
 8008f76:	2101      	movs	r1, #1
 8008f78:	ec57 6b10 	vmov	r6, r7, d0
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	f7ff fcd5 	bl	800892c <_Balloc>
 8008f82:	4604      	mov	r4, r0
 8008f84:	b930      	cbnz	r0, 8008f94 <__d2b+0x24>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4b25      	ldr	r3, [pc, #148]	; (8009020 <__d2b+0xb0>)
 8008f8a:	4826      	ldr	r0, [pc, #152]	; (8009024 <__d2b+0xb4>)
 8008f8c:	f240 310a 	movw	r1, #778	; 0x30a
 8008f90:	f000 fa70 	bl	8009474 <__assert_func>
 8008f94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f9c:	bb35      	cbnz	r5, 8008fec <__d2b+0x7c>
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	d028      	beq.n	8008ff6 <__d2b+0x86>
 8008fa4:	4668      	mov	r0, sp
 8008fa6:	9600      	str	r6, [sp, #0]
 8008fa8:	f7ff fd8c 	bl	8008ac4 <__lo0bits>
 8008fac:	9900      	ldr	r1, [sp, #0]
 8008fae:	b300      	cbz	r0, 8008ff2 <__d2b+0x82>
 8008fb0:	9a01      	ldr	r2, [sp, #4]
 8008fb2:	f1c0 0320 	rsb	r3, r0, #32
 8008fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	40c2      	lsrs	r2, r0
 8008fbe:	6163      	str	r3, [r4, #20]
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	61a3      	str	r3, [r4, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bf14      	ite	ne
 8008fca:	2202      	movne	r2, #2
 8008fcc:	2201      	moveq	r2, #1
 8008fce:	6122      	str	r2, [r4, #16]
 8008fd0:	b1d5      	cbz	r5, 8009008 <__d2b+0x98>
 8008fd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fd6:	4405      	add	r5, r0
 8008fd8:	f8c9 5000 	str.w	r5, [r9]
 8008fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fe0:	f8c8 0000 	str.w	r0, [r8]
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	b003      	add	sp, #12
 8008fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff0:	e7d5      	b.n	8008f9e <__d2b+0x2e>
 8008ff2:	6161      	str	r1, [r4, #20]
 8008ff4:	e7e5      	b.n	8008fc2 <__d2b+0x52>
 8008ff6:	a801      	add	r0, sp, #4
 8008ff8:	f7ff fd64 	bl	8008ac4 <__lo0bits>
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	2201      	movs	r2, #1
 8009002:	6122      	str	r2, [r4, #16]
 8009004:	3020      	adds	r0, #32
 8009006:	e7e3      	b.n	8008fd0 <__d2b+0x60>
 8009008:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800900c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009010:	f8c9 0000 	str.w	r0, [r9]
 8009014:	6918      	ldr	r0, [r3, #16]
 8009016:	f7ff fd35 	bl	8008a84 <__hi0bits>
 800901a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800901e:	e7df      	b.n	8008fe0 <__d2b+0x70>
 8009020:	0800a1af 	.word	0x0800a1af
 8009024:	0800a1c0 	.word	0x0800a1c0

08009028 <_calloc_r>:
 8009028:	b513      	push	{r0, r1, r4, lr}
 800902a:	434a      	muls	r2, r1
 800902c:	4611      	mov	r1, r2
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	f000 f85a 	bl	80090e8 <_malloc_r>
 8009034:	4604      	mov	r4, r0
 8009036:	b118      	cbz	r0, 8009040 <_calloc_r+0x18>
 8009038:	9a01      	ldr	r2, [sp, #4]
 800903a:	2100      	movs	r1, #0
 800903c:	f7fe f942 	bl	80072c4 <memset>
 8009040:	4620      	mov	r0, r4
 8009042:	b002      	add	sp, #8
 8009044:	bd10      	pop	{r4, pc}
	...

08009048 <_free_r>:
 8009048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800904a:	2900      	cmp	r1, #0
 800904c:	d048      	beq.n	80090e0 <_free_r+0x98>
 800904e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009052:	9001      	str	r0, [sp, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f1a1 0404 	sub.w	r4, r1, #4
 800905a:	bfb8      	it	lt
 800905c:	18e4      	addlt	r4, r4, r3
 800905e:	f000 fa65 	bl	800952c <__malloc_lock>
 8009062:	4a20      	ldr	r2, [pc, #128]	; (80090e4 <_free_r+0x9c>)
 8009064:	9801      	ldr	r0, [sp, #4]
 8009066:	6813      	ldr	r3, [r2, #0]
 8009068:	4615      	mov	r5, r2
 800906a:	b933      	cbnz	r3, 800907a <_free_r+0x32>
 800906c:	6063      	str	r3, [r4, #4]
 800906e:	6014      	str	r4, [r2, #0]
 8009070:	b003      	add	sp, #12
 8009072:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009076:	f000 ba5f 	b.w	8009538 <__malloc_unlock>
 800907a:	42a3      	cmp	r3, r4
 800907c:	d90b      	bls.n	8009096 <_free_r+0x4e>
 800907e:	6821      	ldr	r1, [r4, #0]
 8009080:	1862      	adds	r2, r4, r1
 8009082:	4293      	cmp	r3, r2
 8009084:	bf04      	itt	eq
 8009086:	681a      	ldreq	r2, [r3, #0]
 8009088:	685b      	ldreq	r3, [r3, #4]
 800908a:	6063      	str	r3, [r4, #4]
 800908c:	bf04      	itt	eq
 800908e:	1852      	addeq	r2, r2, r1
 8009090:	6022      	streq	r2, [r4, #0]
 8009092:	602c      	str	r4, [r5, #0]
 8009094:	e7ec      	b.n	8009070 <_free_r+0x28>
 8009096:	461a      	mov	r2, r3
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	b10b      	cbz	r3, 80090a0 <_free_r+0x58>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d9fa      	bls.n	8009096 <_free_r+0x4e>
 80090a0:	6811      	ldr	r1, [r2, #0]
 80090a2:	1855      	adds	r5, r2, r1
 80090a4:	42a5      	cmp	r5, r4
 80090a6:	d10b      	bne.n	80090c0 <_free_r+0x78>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	4421      	add	r1, r4
 80090ac:	1854      	adds	r4, r2, r1
 80090ae:	42a3      	cmp	r3, r4
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	d1dd      	bne.n	8009070 <_free_r+0x28>
 80090b4:	681c      	ldr	r4, [r3, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	6053      	str	r3, [r2, #4]
 80090ba:	4421      	add	r1, r4
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	e7d7      	b.n	8009070 <_free_r+0x28>
 80090c0:	d902      	bls.n	80090c8 <_free_r+0x80>
 80090c2:	230c      	movs	r3, #12
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	e7d3      	b.n	8009070 <_free_r+0x28>
 80090c8:	6825      	ldr	r5, [r4, #0]
 80090ca:	1961      	adds	r1, r4, r5
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf04      	itt	eq
 80090d0:	6819      	ldreq	r1, [r3, #0]
 80090d2:	685b      	ldreq	r3, [r3, #4]
 80090d4:	6063      	str	r3, [r4, #4]
 80090d6:	bf04      	itt	eq
 80090d8:	1949      	addeq	r1, r1, r5
 80090da:	6021      	streq	r1, [r4, #0]
 80090dc:	6054      	str	r4, [r2, #4]
 80090de:	e7c7      	b.n	8009070 <_free_r+0x28>
 80090e0:	b003      	add	sp, #12
 80090e2:	bd30      	pop	{r4, r5, pc}
 80090e4:	20000310 	.word	0x20000310

080090e8 <_malloc_r>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	1ccd      	adds	r5, r1, #3
 80090ec:	f025 0503 	bic.w	r5, r5, #3
 80090f0:	3508      	adds	r5, #8
 80090f2:	2d0c      	cmp	r5, #12
 80090f4:	bf38      	it	cc
 80090f6:	250c      	movcc	r5, #12
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	4606      	mov	r6, r0
 80090fc:	db01      	blt.n	8009102 <_malloc_r+0x1a>
 80090fe:	42a9      	cmp	r1, r5
 8009100:	d903      	bls.n	800910a <_malloc_r+0x22>
 8009102:	230c      	movs	r3, #12
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	2000      	movs	r0, #0
 8009108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800910a:	f000 fa0f 	bl	800952c <__malloc_lock>
 800910e:	4921      	ldr	r1, [pc, #132]	; (8009194 <_malloc_r+0xac>)
 8009110:	680a      	ldr	r2, [r1, #0]
 8009112:	4614      	mov	r4, r2
 8009114:	b99c      	cbnz	r4, 800913e <_malloc_r+0x56>
 8009116:	4f20      	ldr	r7, [pc, #128]	; (8009198 <_malloc_r+0xb0>)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	b923      	cbnz	r3, 8009126 <_malloc_r+0x3e>
 800911c:	4621      	mov	r1, r4
 800911e:	4630      	mov	r0, r6
 8009120:	f000 f998 	bl	8009454 <_sbrk_r>
 8009124:	6038      	str	r0, [r7, #0]
 8009126:	4629      	mov	r1, r5
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f993 	bl	8009454 <_sbrk_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	d123      	bne.n	800917a <_malloc_r+0x92>
 8009132:	230c      	movs	r3, #12
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	4630      	mov	r0, r6
 8009138:	f000 f9fe 	bl	8009538 <__malloc_unlock>
 800913c:	e7e3      	b.n	8009106 <_malloc_r+0x1e>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	1b5b      	subs	r3, r3, r5
 8009142:	d417      	bmi.n	8009174 <_malloc_r+0x8c>
 8009144:	2b0b      	cmp	r3, #11
 8009146:	d903      	bls.n	8009150 <_malloc_r+0x68>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	441c      	add	r4, r3
 800914c:	6025      	str	r5, [r4, #0]
 800914e:	e004      	b.n	800915a <_malloc_r+0x72>
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	42a2      	cmp	r2, r4
 8009154:	bf0c      	ite	eq
 8009156:	600b      	streq	r3, [r1, #0]
 8009158:	6053      	strne	r3, [r2, #4]
 800915a:	4630      	mov	r0, r6
 800915c:	f000 f9ec 	bl	8009538 <__malloc_unlock>
 8009160:	f104 000b 	add.w	r0, r4, #11
 8009164:	1d23      	adds	r3, r4, #4
 8009166:	f020 0007 	bic.w	r0, r0, #7
 800916a:	1ac2      	subs	r2, r0, r3
 800916c:	d0cc      	beq.n	8009108 <_malloc_r+0x20>
 800916e:	1a1b      	subs	r3, r3, r0
 8009170:	50a3      	str	r3, [r4, r2]
 8009172:	e7c9      	b.n	8009108 <_malloc_r+0x20>
 8009174:	4622      	mov	r2, r4
 8009176:	6864      	ldr	r4, [r4, #4]
 8009178:	e7cc      	b.n	8009114 <_malloc_r+0x2c>
 800917a:	1cc4      	adds	r4, r0, #3
 800917c:	f024 0403 	bic.w	r4, r4, #3
 8009180:	42a0      	cmp	r0, r4
 8009182:	d0e3      	beq.n	800914c <_malloc_r+0x64>
 8009184:	1a21      	subs	r1, r4, r0
 8009186:	4630      	mov	r0, r6
 8009188:	f000 f964 	bl	8009454 <_sbrk_r>
 800918c:	3001      	adds	r0, #1
 800918e:	d1dd      	bne.n	800914c <_malloc_r+0x64>
 8009190:	e7cf      	b.n	8009132 <_malloc_r+0x4a>
 8009192:	bf00      	nop
 8009194:	20000310 	.word	0x20000310
 8009198:	20000314 	.word	0x20000314

0800919c <__ssputs_r>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	688e      	ldr	r6, [r1, #8]
 80091a2:	429e      	cmp	r6, r3
 80091a4:	4682      	mov	sl, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	4690      	mov	r8, r2
 80091aa:	461f      	mov	r7, r3
 80091ac:	d838      	bhi.n	8009220 <__ssputs_r+0x84>
 80091ae:	898a      	ldrh	r2, [r1, #12]
 80091b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091b4:	d032      	beq.n	800921c <__ssputs_r+0x80>
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	6909      	ldr	r1, [r1, #16]
 80091ba:	eba5 0901 	sub.w	r9, r5, r1
 80091be:	6965      	ldr	r5, [r4, #20]
 80091c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091c8:	3301      	adds	r3, #1
 80091ca:	444b      	add	r3, r9
 80091cc:	106d      	asrs	r5, r5, #1
 80091ce:	429d      	cmp	r5, r3
 80091d0:	bf38      	it	cc
 80091d2:	461d      	movcc	r5, r3
 80091d4:	0553      	lsls	r3, r2, #21
 80091d6:	d531      	bpl.n	800923c <__ssputs_r+0xa0>
 80091d8:	4629      	mov	r1, r5
 80091da:	f7ff ff85 	bl	80090e8 <_malloc_r>
 80091de:	4606      	mov	r6, r0
 80091e0:	b950      	cbnz	r0, 80091f8 <__ssputs_r+0x5c>
 80091e2:	230c      	movs	r3, #12
 80091e4:	f8ca 3000 	str.w	r3, [sl]
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	f04f 30ff 	mov.w	r0, #4294967295
 80091f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f8:	6921      	ldr	r1, [r4, #16]
 80091fa:	464a      	mov	r2, r9
 80091fc:	f7ff fb88 	bl	8008910 <memcpy>
 8009200:	89a3      	ldrh	r3, [r4, #12]
 8009202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	6126      	str	r6, [r4, #16]
 800920e:	6165      	str	r5, [r4, #20]
 8009210:	444e      	add	r6, r9
 8009212:	eba5 0509 	sub.w	r5, r5, r9
 8009216:	6026      	str	r6, [r4, #0]
 8009218:	60a5      	str	r5, [r4, #8]
 800921a:	463e      	mov	r6, r7
 800921c:	42be      	cmp	r6, r7
 800921e:	d900      	bls.n	8009222 <__ssputs_r+0x86>
 8009220:	463e      	mov	r6, r7
 8009222:	4632      	mov	r2, r6
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	4641      	mov	r1, r8
 8009228:	f000 f966 	bl	80094f8 <memmove>
 800922c:	68a3      	ldr	r3, [r4, #8]
 800922e:	6822      	ldr	r2, [r4, #0]
 8009230:	1b9b      	subs	r3, r3, r6
 8009232:	4432      	add	r2, r6
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	6022      	str	r2, [r4, #0]
 8009238:	2000      	movs	r0, #0
 800923a:	e7db      	b.n	80091f4 <__ssputs_r+0x58>
 800923c:	462a      	mov	r2, r5
 800923e:	f000 f981 	bl	8009544 <_realloc_r>
 8009242:	4606      	mov	r6, r0
 8009244:	2800      	cmp	r0, #0
 8009246:	d1e1      	bne.n	800920c <__ssputs_r+0x70>
 8009248:	6921      	ldr	r1, [r4, #16]
 800924a:	4650      	mov	r0, sl
 800924c:	f7ff fefc 	bl	8009048 <_free_r>
 8009250:	e7c7      	b.n	80091e2 <__ssputs_r+0x46>
	...

08009254 <_svfiprintf_r>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	4698      	mov	r8, r3
 800925a:	898b      	ldrh	r3, [r1, #12]
 800925c:	061b      	lsls	r3, r3, #24
 800925e:	b09d      	sub	sp, #116	; 0x74
 8009260:	4607      	mov	r7, r0
 8009262:	460d      	mov	r5, r1
 8009264:	4614      	mov	r4, r2
 8009266:	d50e      	bpl.n	8009286 <_svfiprintf_r+0x32>
 8009268:	690b      	ldr	r3, [r1, #16]
 800926a:	b963      	cbnz	r3, 8009286 <_svfiprintf_r+0x32>
 800926c:	2140      	movs	r1, #64	; 0x40
 800926e:	f7ff ff3b 	bl	80090e8 <_malloc_r>
 8009272:	6028      	str	r0, [r5, #0]
 8009274:	6128      	str	r0, [r5, #16]
 8009276:	b920      	cbnz	r0, 8009282 <_svfiprintf_r+0x2e>
 8009278:	230c      	movs	r3, #12
 800927a:	603b      	str	r3, [r7, #0]
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e0d1      	b.n	8009426 <_svfiprintf_r+0x1d2>
 8009282:	2340      	movs	r3, #64	; 0x40
 8009284:	616b      	str	r3, [r5, #20]
 8009286:	2300      	movs	r3, #0
 8009288:	9309      	str	r3, [sp, #36]	; 0x24
 800928a:	2320      	movs	r3, #32
 800928c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009290:	f8cd 800c 	str.w	r8, [sp, #12]
 8009294:	2330      	movs	r3, #48	; 0x30
 8009296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009440 <_svfiprintf_r+0x1ec>
 800929a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800929e:	f04f 0901 	mov.w	r9, #1
 80092a2:	4623      	mov	r3, r4
 80092a4:	469a      	mov	sl, r3
 80092a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092aa:	b10a      	cbz	r2, 80092b0 <_svfiprintf_r+0x5c>
 80092ac:	2a25      	cmp	r2, #37	; 0x25
 80092ae:	d1f9      	bne.n	80092a4 <_svfiprintf_r+0x50>
 80092b0:	ebba 0b04 	subs.w	fp, sl, r4
 80092b4:	d00b      	beq.n	80092ce <_svfiprintf_r+0x7a>
 80092b6:	465b      	mov	r3, fp
 80092b8:	4622      	mov	r2, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	4638      	mov	r0, r7
 80092be:	f7ff ff6d 	bl	800919c <__ssputs_r>
 80092c2:	3001      	adds	r0, #1
 80092c4:	f000 80aa 	beq.w	800941c <_svfiprintf_r+0x1c8>
 80092c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ca:	445a      	add	r2, fp
 80092cc:	9209      	str	r2, [sp, #36]	; 0x24
 80092ce:	f89a 3000 	ldrb.w	r3, [sl]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80a2 	beq.w	800941c <_svfiprintf_r+0x1c8>
 80092d8:	2300      	movs	r3, #0
 80092da:	f04f 32ff 	mov.w	r2, #4294967295
 80092de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e2:	f10a 0a01 	add.w	sl, sl, #1
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ee:	931a      	str	r3, [sp, #104]	; 0x68
 80092f0:	4654      	mov	r4, sl
 80092f2:	2205      	movs	r2, #5
 80092f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f8:	4851      	ldr	r0, [pc, #324]	; (8009440 <_svfiprintf_r+0x1ec>)
 80092fa:	f7f6 ff71 	bl	80001e0 <memchr>
 80092fe:	9a04      	ldr	r2, [sp, #16]
 8009300:	b9d8      	cbnz	r0, 800933a <_svfiprintf_r+0xe6>
 8009302:	06d0      	lsls	r0, r2, #27
 8009304:	bf44      	itt	mi
 8009306:	2320      	movmi	r3, #32
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930c:	0711      	lsls	r1, r2, #28
 800930e:	bf44      	itt	mi
 8009310:	232b      	movmi	r3, #43	; 0x2b
 8009312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009316:	f89a 3000 	ldrb.w	r3, [sl]
 800931a:	2b2a      	cmp	r3, #42	; 0x2a
 800931c:	d015      	beq.n	800934a <_svfiprintf_r+0xf6>
 800931e:	9a07      	ldr	r2, [sp, #28]
 8009320:	4654      	mov	r4, sl
 8009322:	2000      	movs	r0, #0
 8009324:	f04f 0c0a 	mov.w	ip, #10
 8009328:	4621      	mov	r1, r4
 800932a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800932e:	3b30      	subs	r3, #48	; 0x30
 8009330:	2b09      	cmp	r3, #9
 8009332:	d94e      	bls.n	80093d2 <_svfiprintf_r+0x17e>
 8009334:	b1b0      	cbz	r0, 8009364 <_svfiprintf_r+0x110>
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	e014      	b.n	8009364 <_svfiprintf_r+0x110>
 800933a:	eba0 0308 	sub.w	r3, r0, r8
 800933e:	fa09 f303 	lsl.w	r3, r9, r3
 8009342:	4313      	orrs	r3, r2
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	46a2      	mov	sl, r4
 8009348:	e7d2      	b.n	80092f0 <_svfiprintf_r+0x9c>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	1d19      	adds	r1, r3, #4
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	9103      	str	r1, [sp, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfbb      	ittet	lt
 8009356:	425b      	neglt	r3, r3
 8009358:	f042 0202 	orrlt.w	r2, r2, #2
 800935c:	9307      	strge	r3, [sp, #28]
 800935e:	9307      	strlt	r3, [sp, #28]
 8009360:	bfb8      	it	lt
 8009362:	9204      	strlt	r2, [sp, #16]
 8009364:	7823      	ldrb	r3, [r4, #0]
 8009366:	2b2e      	cmp	r3, #46	; 0x2e
 8009368:	d10c      	bne.n	8009384 <_svfiprintf_r+0x130>
 800936a:	7863      	ldrb	r3, [r4, #1]
 800936c:	2b2a      	cmp	r3, #42	; 0x2a
 800936e:	d135      	bne.n	80093dc <_svfiprintf_r+0x188>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	9203      	str	r2, [sp, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bfb8      	it	lt
 800937c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009380:	3402      	adds	r4, #2
 8009382:	9305      	str	r3, [sp, #20]
 8009384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009450 <_svfiprintf_r+0x1fc>
 8009388:	7821      	ldrb	r1, [r4, #0]
 800938a:	2203      	movs	r2, #3
 800938c:	4650      	mov	r0, sl
 800938e:	f7f6 ff27 	bl	80001e0 <memchr>
 8009392:	b140      	cbz	r0, 80093a6 <_svfiprintf_r+0x152>
 8009394:	2340      	movs	r3, #64	; 0x40
 8009396:	eba0 000a 	sub.w	r0, r0, sl
 800939a:	fa03 f000 	lsl.w	r0, r3, r0
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	4303      	orrs	r3, r0
 80093a2:	3401      	adds	r4, #1
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093aa:	4826      	ldr	r0, [pc, #152]	; (8009444 <_svfiprintf_r+0x1f0>)
 80093ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b0:	2206      	movs	r2, #6
 80093b2:	f7f6 ff15 	bl	80001e0 <memchr>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d038      	beq.n	800942c <_svfiprintf_r+0x1d8>
 80093ba:	4b23      	ldr	r3, [pc, #140]	; (8009448 <_svfiprintf_r+0x1f4>)
 80093bc:	bb1b      	cbnz	r3, 8009406 <_svfiprintf_r+0x1b2>
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	3307      	adds	r3, #7
 80093c2:	f023 0307 	bic.w	r3, r3, #7
 80093c6:	3308      	adds	r3, #8
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093cc:	4433      	add	r3, r6
 80093ce:	9309      	str	r3, [sp, #36]	; 0x24
 80093d0:	e767      	b.n	80092a2 <_svfiprintf_r+0x4e>
 80093d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d6:	460c      	mov	r4, r1
 80093d8:	2001      	movs	r0, #1
 80093da:	e7a5      	b.n	8009328 <_svfiprintf_r+0xd4>
 80093dc:	2300      	movs	r3, #0
 80093de:	3401      	adds	r4, #1
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	4619      	mov	r1, r3
 80093e4:	f04f 0c0a 	mov.w	ip, #10
 80093e8:	4620      	mov	r0, r4
 80093ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ee:	3a30      	subs	r2, #48	; 0x30
 80093f0:	2a09      	cmp	r2, #9
 80093f2:	d903      	bls.n	80093fc <_svfiprintf_r+0x1a8>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0c5      	beq.n	8009384 <_svfiprintf_r+0x130>
 80093f8:	9105      	str	r1, [sp, #20]
 80093fa:	e7c3      	b.n	8009384 <_svfiprintf_r+0x130>
 80093fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009400:	4604      	mov	r4, r0
 8009402:	2301      	movs	r3, #1
 8009404:	e7f0      	b.n	80093e8 <_svfiprintf_r+0x194>
 8009406:	ab03      	add	r3, sp, #12
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	462a      	mov	r2, r5
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <_svfiprintf_r+0x1f8>)
 800940e:	a904      	add	r1, sp, #16
 8009410:	4638      	mov	r0, r7
 8009412:	f7fd ffff 	bl	8007414 <_printf_float>
 8009416:	1c42      	adds	r2, r0, #1
 8009418:	4606      	mov	r6, r0
 800941a:	d1d6      	bne.n	80093ca <_svfiprintf_r+0x176>
 800941c:	89ab      	ldrh	r3, [r5, #12]
 800941e:	065b      	lsls	r3, r3, #25
 8009420:	f53f af2c 	bmi.w	800927c <_svfiprintf_r+0x28>
 8009424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009426:	b01d      	add	sp, #116	; 0x74
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	ab03      	add	r3, sp, #12
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	462a      	mov	r2, r5
 8009432:	4b06      	ldr	r3, [pc, #24]	; (800944c <_svfiprintf_r+0x1f8>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	4638      	mov	r0, r7
 8009438:	f7fe fa90 	bl	800795c <_printf_i>
 800943c:	e7eb      	b.n	8009416 <_svfiprintf_r+0x1c2>
 800943e:	bf00      	nop
 8009440:	0800a31c 	.word	0x0800a31c
 8009444:	0800a326 	.word	0x0800a326
 8009448:	08007415 	.word	0x08007415
 800944c:	0800919d 	.word	0x0800919d
 8009450:	0800a322 	.word	0x0800a322

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	; (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f8 fd06 	bl	8001e70 <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000688 	.word	0x20000688

08009474 <__assert_func>:
 8009474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009476:	4614      	mov	r4, r2
 8009478:	461a      	mov	r2, r3
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <__assert_func+0x2c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4605      	mov	r5, r0
 8009480:	68d8      	ldr	r0, [r3, #12]
 8009482:	b14c      	cbz	r4, 8009498 <__assert_func+0x24>
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <__assert_func+0x30>)
 8009486:	9100      	str	r1, [sp, #0]
 8009488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800948c:	4906      	ldr	r1, [pc, #24]	; (80094a8 <__assert_func+0x34>)
 800948e:	462b      	mov	r3, r5
 8009490:	f000 f80e 	bl	80094b0 <fiprintf>
 8009494:	f000 faa4 	bl	80099e0 <abort>
 8009498:	4b04      	ldr	r3, [pc, #16]	; (80094ac <__assert_func+0x38>)
 800949a:	461c      	mov	r4, r3
 800949c:	e7f3      	b.n	8009486 <__assert_func+0x12>
 800949e:	bf00      	nop
 80094a0:	20000010 	.word	0x20000010
 80094a4:	0800a32d 	.word	0x0800a32d
 80094a8:	0800a33a 	.word	0x0800a33a
 80094ac:	0800a368 	.word	0x0800a368

080094b0 <fiprintf>:
 80094b0:	b40e      	push	{r1, r2, r3}
 80094b2:	b503      	push	{r0, r1, lr}
 80094b4:	4601      	mov	r1, r0
 80094b6:	ab03      	add	r3, sp, #12
 80094b8:	4805      	ldr	r0, [pc, #20]	; (80094d0 <fiprintf+0x20>)
 80094ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80094be:	6800      	ldr	r0, [r0, #0]
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	f000 f88f 	bl	80095e4 <_vfiprintf_r>
 80094c6:	b002      	add	sp, #8
 80094c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094cc:	b003      	add	sp, #12
 80094ce:	4770      	bx	lr
 80094d0:	20000010 	.word	0x20000010

080094d4 <__ascii_mbtowc>:
 80094d4:	b082      	sub	sp, #8
 80094d6:	b901      	cbnz	r1, 80094da <__ascii_mbtowc+0x6>
 80094d8:	a901      	add	r1, sp, #4
 80094da:	b142      	cbz	r2, 80094ee <__ascii_mbtowc+0x1a>
 80094dc:	b14b      	cbz	r3, 80094f2 <__ascii_mbtowc+0x1e>
 80094de:	7813      	ldrb	r3, [r2, #0]
 80094e0:	600b      	str	r3, [r1, #0]
 80094e2:	7812      	ldrb	r2, [r2, #0]
 80094e4:	1e10      	subs	r0, r2, #0
 80094e6:	bf18      	it	ne
 80094e8:	2001      	movne	r0, #1
 80094ea:	b002      	add	sp, #8
 80094ec:	4770      	bx	lr
 80094ee:	4610      	mov	r0, r2
 80094f0:	e7fb      	b.n	80094ea <__ascii_mbtowc+0x16>
 80094f2:	f06f 0001 	mvn.w	r0, #1
 80094f6:	e7f8      	b.n	80094ea <__ascii_mbtowc+0x16>

080094f8 <memmove>:
 80094f8:	4288      	cmp	r0, r1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	eb01 0402 	add.w	r4, r1, r2
 8009500:	d902      	bls.n	8009508 <memmove+0x10>
 8009502:	4284      	cmp	r4, r0
 8009504:	4623      	mov	r3, r4
 8009506:	d807      	bhi.n	8009518 <memmove+0x20>
 8009508:	1e43      	subs	r3, r0, #1
 800950a:	42a1      	cmp	r1, r4
 800950c:	d008      	beq.n	8009520 <memmove+0x28>
 800950e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009516:	e7f8      	b.n	800950a <memmove+0x12>
 8009518:	4402      	add	r2, r0
 800951a:	4601      	mov	r1, r0
 800951c:	428a      	cmp	r2, r1
 800951e:	d100      	bne.n	8009522 <memmove+0x2a>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952a:	e7f7      	b.n	800951c <memmove+0x24>

0800952c <__malloc_lock>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__malloc_lock+0x8>)
 800952e:	f000 bc17 	b.w	8009d60 <__retarget_lock_acquire_recursive>
 8009532:	bf00      	nop
 8009534:	20000690 	.word	0x20000690

08009538 <__malloc_unlock>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__malloc_unlock+0x8>)
 800953a:	f000 bc12 	b.w	8009d62 <__retarget_lock_release_recursive>
 800953e:	bf00      	nop
 8009540:	20000690 	.word	0x20000690

08009544 <_realloc_r>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	4607      	mov	r7, r0
 8009548:	4614      	mov	r4, r2
 800954a:	460e      	mov	r6, r1
 800954c:	b921      	cbnz	r1, 8009558 <_realloc_r+0x14>
 800954e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009552:	4611      	mov	r1, r2
 8009554:	f7ff bdc8 	b.w	80090e8 <_malloc_r>
 8009558:	b922      	cbnz	r2, 8009564 <_realloc_r+0x20>
 800955a:	f7ff fd75 	bl	8009048 <_free_r>
 800955e:	4625      	mov	r5, r4
 8009560:	4628      	mov	r0, r5
 8009562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009564:	f000 fc62 	bl	8009e2c <_malloc_usable_size_r>
 8009568:	42a0      	cmp	r0, r4
 800956a:	d20f      	bcs.n	800958c <_realloc_r+0x48>
 800956c:	4621      	mov	r1, r4
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff fdba 	bl	80090e8 <_malloc_r>
 8009574:	4605      	mov	r5, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	d0f2      	beq.n	8009560 <_realloc_r+0x1c>
 800957a:	4631      	mov	r1, r6
 800957c:	4622      	mov	r2, r4
 800957e:	f7ff f9c7 	bl	8008910 <memcpy>
 8009582:	4631      	mov	r1, r6
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff fd5f 	bl	8009048 <_free_r>
 800958a:	e7e9      	b.n	8009560 <_realloc_r+0x1c>
 800958c:	4635      	mov	r5, r6
 800958e:	e7e7      	b.n	8009560 <_realloc_r+0x1c>

08009590 <__sfputc_r>:
 8009590:	6893      	ldr	r3, [r2, #8]
 8009592:	3b01      	subs	r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	b410      	push	{r4}
 8009598:	6093      	str	r3, [r2, #8]
 800959a:	da08      	bge.n	80095ae <__sfputc_r+0x1e>
 800959c:	6994      	ldr	r4, [r2, #24]
 800959e:	42a3      	cmp	r3, r4
 80095a0:	db01      	blt.n	80095a6 <__sfputc_r+0x16>
 80095a2:	290a      	cmp	r1, #10
 80095a4:	d103      	bne.n	80095ae <__sfputc_r+0x1e>
 80095a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095aa:	f000 b94b 	b.w	8009844 <__swbuf_r>
 80095ae:	6813      	ldr	r3, [r2, #0]
 80095b0:	1c58      	adds	r0, r3, #1
 80095b2:	6010      	str	r0, [r2, #0]
 80095b4:	7019      	strb	r1, [r3, #0]
 80095b6:	4608      	mov	r0, r1
 80095b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095bc:	4770      	bx	lr

080095be <__sfputs_r>:
 80095be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	4614      	mov	r4, r2
 80095c6:	18d5      	adds	r5, r2, r3
 80095c8:	42ac      	cmp	r4, r5
 80095ca:	d101      	bne.n	80095d0 <__sfputs_r+0x12>
 80095cc:	2000      	movs	r0, #0
 80095ce:	e007      	b.n	80095e0 <__sfputs_r+0x22>
 80095d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d4:	463a      	mov	r2, r7
 80095d6:	4630      	mov	r0, r6
 80095d8:	f7ff ffda 	bl	8009590 <__sfputc_r>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d1f3      	bne.n	80095c8 <__sfputs_r+0xa>
 80095e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e4 <_vfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	460d      	mov	r5, r1
 80095ea:	b09d      	sub	sp, #116	; 0x74
 80095ec:	4614      	mov	r4, r2
 80095ee:	4698      	mov	r8, r3
 80095f0:	4606      	mov	r6, r0
 80095f2:	b118      	cbz	r0, 80095fc <_vfiprintf_r+0x18>
 80095f4:	6983      	ldr	r3, [r0, #24]
 80095f6:	b90b      	cbnz	r3, 80095fc <_vfiprintf_r+0x18>
 80095f8:	f000 fb14 	bl	8009c24 <__sinit>
 80095fc:	4b89      	ldr	r3, [pc, #548]	; (8009824 <_vfiprintf_r+0x240>)
 80095fe:	429d      	cmp	r5, r3
 8009600:	d11b      	bne.n	800963a <_vfiprintf_r+0x56>
 8009602:	6875      	ldr	r5, [r6, #4]
 8009604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009606:	07d9      	lsls	r1, r3, #31
 8009608:	d405      	bmi.n	8009616 <_vfiprintf_r+0x32>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	059a      	lsls	r2, r3, #22
 800960e:	d402      	bmi.n	8009616 <_vfiprintf_r+0x32>
 8009610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009612:	f000 fba5 	bl	8009d60 <__retarget_lock_acquire_recursive>
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	071b      	lsls	r3, r3, #28
 800961a:	d501      	bpl.n	8009620 <_vfiprintf_r+0x3c>
 800961c:	692b      	ldr	r3, [r5, #16]
 800961e:	b9eb      	cbnz	r3, 800965c <_vfiprintf_r+0x78>
 8009620:	4629      	mov	r1, r5
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f96e 	bl	8009904 <__swsetup_r>
 8009628:	b1c0      	cbz	r0, 800965c <_vfiprintf_r+0x78>
 800962a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800962c:	07dc      	lsls	r4, r3, #31
 800962e:	d50e      	bpl.n	800964e <_vfiprintf_r+0x6a>
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	b01d      	add	sp, #116	; 0x74
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	4b7b      	ldr	r3, [pc, #492]	; (8009828 <_vfiprintf_r+0x244>)
 800963c:	429d      	cmp	r5, r3
 800963e:	d101      	bne.n	8009644 <_vfiprintf_r+0x60>
 8009640:	68b5      	ldr	r5, [r6, #8]
 8009642:	e7df      	b.n	8009604 <_vfiprintf_r+0x20>
 8009644:	4b79      	ldr	r3, [pc, #484]	; (800982c <_vfiprintf_r+0x248>)
 8009646:	429d      	cmp	r5, r3
 8009648:	bf08      	it	eq
 800964a:	68f5      	ldreq	r5, [r6, #12]
 800964c:	e7da      	b.n	8009604 <_vfiprintf_r+0x20>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	0598      	lsls	r0, r3, #22
 8009652:	d4ed      	bmi.n	8009630 <_vfiprintf_r+0x4c>
 8009654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009656:	f000 fb84 	bl	8009d62 <__retarget_lock_release_recursive>
 800965a:	e7e9      	b.n	8009630 <_vfiprintf_r+0x4c>
 800965c:	2300      	movs	r3, #0
 800965e:	9309      	str	r3, [sp, #36]	; 0x24
 8009660:	2320      	movs	r3, #32
 8009662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009666:	f8cd 800c 	str.w	r8, [sp, #12]
 800966a:	2330      	movs	r3, #48	; 0x30
 800966c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009830 <_vfiprintf_r+0x24c>
 8009670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009674:	f04f 0901 	mov.w	r9, #1
 8009678:	4623      	mov	r3, r4
 800967a:	469a      	mov	sl, r3
 800967c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009680:	b10a      	cbz	r2, 8009686 <_vfiprintf_r+0xa2>
 8009682:	2a25      	cmp	r2, #37	; 0x25
 8009684:	d1f9      	bne.n	800967a <_vfiprintf_r+0x96>
 8009686:	ebba 0b04 	subs.w	fp, sl, r4
 800968a:	d00b      	beq.n	80096a4 <_vfiprintf_r+0xc0>
 800968c:	465b      	mov	r3, fp
 800968e:	4622      	mov	r2, r4
 8009690:	4629      	mov	r1, r5
 8009692:	4630      	mov	r0, r6
 8009694:	f7ff ff93 	bl	80095be <__sfputs_r>
 8009698:	3001      	adds	r0, #1
 800969a:	f000 80aa 	beq.w	80097f2 <_vfiprintf_r+0x20e>
 800969e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a0:	445a      	add	r2, fp
 80096a2:	9209      	str	r2, [sp, #36]	; 0x24
 80096a4:	f89a 3000 	ldrb.w	r3, [sl]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80a2 	beq.w	80097f2 <_vfiprintf_r+0x20e>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f04f 32ff 	mov.w	r2, #4294967295
 80096b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b8:	f10a 0a01 	add.w	sl, sl, #1
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	9307      	str	r3, [sp, #28]
 80096c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c4:	931a      	str	r3, [sp, #104]	; 0x68
 80096c6:	4654      	mov	r4, sl
 80096c8:	2205      	movs	r2, #5
 80096ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ce:	4858      	ldr	r0, [pc, #352]	; (8009830 <_vfiprintf_r+0x24c>)
 80096d0:	f7f6 fd86 	bl	80001e0 <memchr>
 80096d4:	9a04      	ldr	r2, [sp, #16]
 80096d6:	b9d8      	cbnz	r0, 8009710 <_vfiprintf_r+0x12c>
 80096d8:	06d1      	lsls	r1, r2, #27
 80096da:	bf44      	itt	mi
 80096dc:	2320      	movmi	r3, #32
 80096de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e2:	0713      	lsls	r3, r2, #28
 80096e4:	bf44      	itt	mi
 80096e6:	232b      	movmi	r3, #43	; 0x2b
 80096e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ec:	f89a 3000 	ldrb.w	r3, [sl]
 80096f0:	2b2a      	cmp	r3, #42	; 0x2a
 80096f2:	d015      	beq.n	8009720 <_vfiprintf_r+0x13c>
 80096f4:	9a07      	ldr	r2, [sp, #28]
 80096f6:	4654      	mov	r4, sl
 80096f8:	2000      	movs	r0, #0
 80096fa:	f04f 0c0a 	mov.w	ip, #10
 80096fe:	4621      	mov	r1, r4
 8009700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009704:	3b30      	subs	r3, #48	; 0x30
 8009706:	2b09      	cmp	r3, #9
 8009708:	d94e      	bls.n	80097a8 <_vfiprintf_r+0x1c4>
 800970a:	b1b0      	cbz	r0, 800973a <_vfiprintf_r+0x156>
 800970c:	9207      	str	r2, [sp, #28]
 800970e:	e014      	b.n	800973a <_vfiprintf_r+0x156>
 8009710:	eba0 0308 	sub.w	r3, r0, r8
 8009714:	fa09 f303 	lsl.w	r3, r9, r3
 8009718:	4313      	orrs	r3, r2
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	46a2      	mov	sl, r4
 800971e:	e7d2      	b.n	80096c6 <_vfiprintf_r+0xe2>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	1d19      	adds	r1, r3, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	9103      	str	r1, [sp, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfbb      	ittet	lt
 800972c:	425b      	neglt	r3, r3
 800972e:	f042 0202 	orrlt.w	r2, r2, #2
 8009732:	9307      	strge	r3, [sp, #28]
 8009734:	9307      	strlt	r3, [sp, #28]
 8009736:	bfb8      	it	lt
 8009738:	9204      	strlt	r2, [sp, #16]
 800973a:	7823      	ldrb	r3, [r4, #0]
 800973c:	2b2e      	cmp	r3, #46	; 0x2e
 800973e:	d10c      	bne.n	800975a <_vfiprintf_r+0x176>
 8009740:	7863      	ldrb	r3, [r4, #1]
 8009742:	2b2a      	cmp	r3, #42	; 0x2a
 8009744:	d135      	bne.n	80097b2 <_vfiprintf_r+0x1ce>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	1d1a      	adds	r2, r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	9203      	str	r2, [sp, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfb8      	it	lt
 8009752:	f04f 33ff 	movlt.w	r3, #4294967295
 8009756:	3402      	adds	r4, #2
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009840 <_vfiprintf_r+0x25c>
 800975e:	7821      	ldrb	r1, [r4, #0]
 8009760:	2203      	movs	r2, #3
 8009762:	4650      	mov	r0, sl
 8009764:	f7f6 fd3c 	bl	80001e0 <memchr>
 8009768:	b140      	cbz	r0, 800977c <_vfiprintf_r+0x198>
 800976a:	2340      	movs	r3, #64	; 0x40
 800976c:	eba0 000a 	sub.w	r0, r0, sl
 8009770:	fa03 f000 	lsl.w	r0, r3, r0
 8009774:	9b04      	ldr	r3, [sp, #16]
 8009776:	4303      	orrs	r3, r0
 8009778:	3401      	adds	r4, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	482c      	ldr	r0, [pc, #176]	; (8009834 <_vfiprintf_r+0x250>)
 8009782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009786:	2206      	movs	r2, #6
 8009788:	f7f6 fd2a 	bl	80001e0 <memchr>
 800978c:	2800      	cmp	r0, #0
 800978e:	d03f      	beq.n	8009810 <_vfiprintf_r+0x22c>
 8009790:	4b29      	ldr	r3, [pc, #164]	; (8009838 <_vfiprintf_r+0x254>)
 8009792:	bb1b      	cbnz	r3, 80097dc <_vfiprintf_r+0x1f8>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	3307      	adds	r3, #7
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	3308      	adds	r3, #8
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	443b      	add	r3, r7
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	e767      	b.n	8009678 <_vfiprintf_r+0x94>
 80097a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ac:	460c      	mov	r4, r1
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7a5      	b.n	80096fe <_vfiprintf_r+0x11a>
 80097b2:	2300      	movs	r3, #0
 80097b4:	3401      	adds	r4, #1
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	4619      	mov	r1, r3
 80097ba:	f04f 0c0a 	mov.w	ip, #10
 80097be:	4620      	mov	r0, r4
 80097c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d903      	bls.n	80097d2 <_vfiprintf_r+0x1ee>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c5      	beq.n	800975a <_vfiprintf_r+0x176>
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	e7c3      	b.n	800975a <_vfiprintf_r+0x176>
 80097d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d6:	4604      	mov	r4, r0
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f0      	b.n	80097be <_vfiprintf_r+0x1da>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4b16      	ldr	r3, [pc, #88]	; (800983c <_vfiprintf_r+0x258>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7fd fe14 	bl	8007414 <_printf_float>
 80097ec:	4607      	mov	r7, r0
 80097ee:	1c78      	adds	r0, r7, #1
 80097f0:	d1d6      	bne.n	80097a0 <_vfiprintf_r+0x1bc>
 80097f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f4:	07d9      	lsls	r1, r3, #31
 80097f6:	d405      	bmi.n	8009804 <_vfiprintf_r+0x220>
 80097f8:	89ab      	ldrh	r3, [r5, #12]
 80097fa:	059a      	lsls	r2, r3, #22
 80097fc:	d402      	bmi.n	8009804 <_vfiprintf_r+0x220>
 80097fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009800:	f000 faaf 	bl	8009d62 <__retarget_lock_release_recursive>
 8009804:	89ab      	ldrh	r3, [r5, #12]
 8009806:	065b      	lsls	r3, r3, #25
 8009808:	f53f af12 	bmi.w	8009630 <_vfiprintf_r+0x4c>
 800980c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980e:	e711      	b.n	8009634 <_vfiprintf_r+0x50>
 8009810:	ab03      	add	r3, sp, #12
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	462a      	mov	r2, r5
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <_vfiprintf_r+0x258>)
 8009818:	a904      	add	r1, sp, #16
 800981a:	4630      	mov	r0, r6
 800981c:	f7fe f89e 	bl	800795c <_printf_i>
 8009820:	e7e4      	b.n	80097ec <_vfiprintf_r+0x208>
 8009822:	bf00      	nop
 8009824:	0800a494 	.word	0x0800a494
 8009828:	0800a4b4 	.word	0x0800a4b4
 800982c:	0800a474 	.word	0x0800a474
 8009830:	0800a31c 	.word	0x0800a31c
 8009834:	0800a326 	.word	0x0800a326
 8009838:	08007415 	.word	0x08007415
 800983c:	080095bf 	.word	0x080095bf
 8009840:	0800a322 	.word	0x0800a322

08009844 <__swbuf_r>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	460e      	mov	r6, r1
 8009848:	4614      	mov	r4, r2
 800984a:	4605      	mov	r5, r0
 800984c:	b118      	cbz	r0, 8009856 <__swbuf_r+0x12>
 800984e:	6983      	ldr	r3, [r0, #24]
 8009850:	b90b      	cbnz	r3, 8009856 <__swbuf_r+0x12>
 8009852:	f000 f9e7 	bl	8009c24 <__sinit>
 8009856:	4b21      	ldr	r3, [pc, #132]	; (80098dc <__swbuf_r+0x98>)
 8009858:	429c      	cmp	r4, r3
 800985a:	d12b      	bne.n	80098b4 <__swbuf_r+0x70>
 800985c:	686c      	ldr	r4, [r5, #4]
 800985e:	69a3      	ldr	r3, [r4, #24]
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	071a      	lsls	r2, r3, #28
 8009866:	d52f      	bpl.n	80098c8 <__swbuf_r+0x84>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	b36b      	cbz	r3, 80098c8 <__swbuf_r+0x84>
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	6820      	ldr	r0, [r4, #0]
 8009870:	1ac0      	subs	r0, r0, r3
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	b2f6      	uxtb	r6, r6
 8009876:	4283      	cmp	r3, r0
 8009878:	4637      	mov	r7, r6
 800987a:	dc04      	bgt.n	8009886 <__swbuf_r+0x42>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f93c 	bl	8009afc <_fflush_r>
 8009884:	bb30      	cbnz	r0, 80098d4 <__swbuf_r+0x90>
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	3b01      	subs	r3, #1
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	701e      	strb	r6, [r3, #0]
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	3001      	adds	r0, #1
 8009898:	4283      	cmp	r3, r0
 800989a:	d004      	beq.n	80098a6 <__swbuf_r+0x62>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d506      	bpl.n	80098b0 <__swbuf_r+0x6c>
 80098a2:	2e0a      	cmp	r6, #10
 80098a4:	d104      	bne.n	80098b0 <__swbuf_r+0x6c>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f927 	bl	8009afc <_fflush_r>
 80098ae:	b988      	cbnz	r0, 80098d4 <__swbuf_r+0x90>
 80098b0:	4638      	mov	r0, r7
 80098b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <__swbuf_r+0x9c>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <__swbuf_r+0x7a>
 80098ba:	68ac      	ldr	r4, [r5, #8]
 80098bc:	e7cf      	b.n	800985e <__swbuf_r+0x1a>
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <__swbuf_r+0xa0>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68ec      	ldreq	r4, [r5, #12]
 80098c6:	e7ca      	b.n	800985e <__swbuf_r+0x1a>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f81a 	bl	8009904 <__swsetup_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d0cb      	beq.n	800986c <__swbuf_r+0x28>
 80098d4:	f04f 37ff 	mov.w	r7, #4294967295
 80098d8:	e7ea      	b.n	80098b0 <__swbuf_r+0x6c>
 80098da:	bf00      	nop
 80098dc:	0800a494 	.word	0x0800a494
 80098e0:	0800a4b4 	.word	0x0800a4b4
 80098e4:	0800a474 	.word	0x0800a474

080098e8 <__ascii_wctomb>:
 80098e8:	b149      	cbz	r1, 80098fe <__ascii_wctomb+0x16>
 80098ea:	2aff      	cmp	r2, #255	; 0xff
 80098ec:	bf85      	ittet	hi
 80098ee:	238a      	movhi	r3, #138	; 0x8a
 80098f0:	6003      	strhi	r3, [r0, #0]
 80098f2:	700a      	strbls	r2, [r1, #0]
 80098f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80098f8:	bf98      	it	ls
 80098fa:	2001      	movls	r0, #1
 80098fc:	4770      	bx	lr
 80098fe:	4608      	mov	r0, r1
 8009900:	4770      	bx	lr
	...

08009904 <__swsetup_r>:
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <__swsetup_r+0xcc>)
 8009906:	b570      	push	{r4, r5, r6, lr}
 8009908:	681d      	ldr	r5, [r3, #0]
 800990a:	4606      	mov	r6, r0
 800990c:	460c      	mov	r4, r1
 800990e:	b125      	cbz	r5, 800991a <__swsetup_r+0x16>
 8009910:	69ab      	ldr	r3, [r5, #24]
 8009912:	b913      	cbnz	r3, 800991a <__swsetup_r+0x16>
 8009914:	4628      	mov	r0, r5
 8009916:	f000 f985 	bl	8009c24 <__sinit>
 800991a:	4b2e      	ldr	r3, [pc, #184]	; (80099d4 <__swsetup_r+0xd0>)
 800991c:	429c      	cmp	r4, r3
 800991e:	d10f      	bne.n	8009940 <__swsetup_r+0x3c>
 8009920:	686c      	ldr	r4, [r5, #4]
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009928:	0719      	lsls	r1, r3, #28
 800992a:	d42c      	bmi.n	8009986 <__swsetup_r+0x82>
 800992c:	06dd      	lsls	r5, r3, #27
 800992e:	d411      	bmi.n	8009954 <__swsetup_r+0x50>
 8009930:	2309      	movs	r3, #9
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	f04f 30ff 	mov.w	r0, #4294967295
 800993e:	e03e      	b.n	80099be <__swsetup_r+0xba>
 8009940:	4b25      	ldr	r3, [pc, #148]	; (80099d8 <__swsetup_r+0xd4>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d101      	bne.n	800994a <__swsetup_r+0x46>
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	e7eb      	b.n	8009922 <__swsetup_r+0x1e>
 800994a:	4b24      	ldr	r3, [pc, #144]	; (80099dc <__swsetup_r+0xd8>)
 800994c:	429c      	cmp	r4, r3
 800994e:	bf08      	it	eq
 8009950:	68ec      	ldreq	r4, [r5, #12]
 8009952:	e7e6      	b.n	8009922 <__swsetup_r+0x1e>
 8009954:	0758      	lsls	r0, r3, #29
 8009956:	d512      	bpl.n	800997e <__swsetup_r+0x7a>
 8009958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800995a:	b141      	cbz	r1, 800996e <__swsetup_r+0x6a>
 800995c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009960:	4299      	cmp	r1, r3
 8009962:	d002      	beq.n	800996a <__swsetup_r+0x66>
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff fb6f 	bl	8009048 <_free_r>
 800996a:	2300      	movs	r3, #0
 800996c:	6363      	str	r3, [r4, #52]	; 0x34
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	2300      	movs	r3, #0
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f043 0308 	orr.w	r3, r3, #8
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	b94b      	cbnz	r3, 800999e <__swsetup_r+0x9a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009994:	d003      	beq.n	800999e <__swsetup_r+0x9a>
 8009996:	4621      	mov	r1, r4
 8009998:	4630      	mov	r0, r6
 800999a:	f000 fa07 	bl	8009dac <__smakebuf_r>
 800999e:	89a0      	ldrh	r0, [r4, #12]
 80099a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a4:	f010 0301 	ands.w	r3, r0, #1
 80099a8:	d00a      	beq.n	80099c0 <__swsetup_r+0xbc>
 80099aa:	2300      	movs	r3, #0
 80099ac:	60a3      	str	r3, [r4, #8]
 80099ae:	6963      	ldr	r3, [r4, #20]
 80099b0:	425b      	negs	r3, r3
 80099b2:	61a3      	str	r3, [r4, #24]
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	b943      	cbnz	r3, 80099ca <__swsetup_r+0xc6>
 80099b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099bc:	d1ba      	bne.n	8009934 <__swsetup_r+0x30>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	0781      	lsls	r1, r0, #30
 80099c2:	bf58      	it	pl
 80099c4:	6963      	ldrpl	r3, [r4, #20]
 80099c6:	60a3      	str	r3, [r4, #8]
 80099c8:	e7f4      	b.n	80099b4 <__swsetup_r+0xb0>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e7f7      	b.n	80099be <__swsetup_r+0xba>
 80099ce:	bf00      	nop
 80099d0:	20000010 	.word	0x20000010
 80099d4:	0800a494 	.word	0x0800a494
 80099d8:	0800a4b4 	.word	0x0800a4b4
 80099dc:	0800a474 	.word	0x0800a474

080099e0 <abort>:
 80099e0:	b508      	push	{r3, lr}
 80099e2:	2006      	movs	r0, #6
 80099e4:	f000 fa52 	bl	8009e8c <raise>
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7f8 f9c9 	bl	8001d80 <_exit>
	...

080099f0 <__sflush_r>:
 80099f0:	898a      	ldrh	r2, [r1, #12]
 80099f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	4605      	mov	r5, r0
 80099f8:	0710      	lsls	r0, r2, #28
 80099fa:	460c      	mov	r4, r1
 80099fc:	d458      	bmi.n	8009ab0 <__sflush_r+0xc0>
 80099fe:	684b      	ldr	r3, [r1, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dc05      	bgt.n	8009a10 <__sflush_r+0x20>
 8009a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dc02      	bgt.n	8009a10 <__sflush_r+0x20>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	d0f9      	beq.n	8009a0a <__sflush_r+0x1a>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a1c:	682f      	ldr	r7, [r5, #0]
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	d032      	beq.n	8009a88 <__sflush_r+0x98>
 8009a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	075a      	lsls	r2, r3, #29
 8009a28:	d505      	bpl.n	8009a36 <__sflush_r+0x46>
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	1ac0      	subs	r0, r0, r3
 8009a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a30:	b10b      	cbz	r3, 8009a36 <__sflush_r+0x46>
 8009a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a34:	1ac0      	subs	r0, r0, r3
 8009a36:	2300      	movs	r3, #0
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a3c:	6a21      	ldr	r1, [r4, #32]
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b0      	blx	r6
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	d106      	bne.n	8009a56 <__sflush_r+0x66>
 8009a48:	6829      	ldr	r1, [r5, #0]
 8009a4a:	291d      	cmp	r1, #29
 8009a4c:	d82c      	bhi.n	8009aa8 <__sflush_r+0xb8>
 8009a4e:	4a2a      	ldr	r2, [pc, #168]	; (8009af8 <__sflush_r+0x108>)
 8009a50:	40ca      	lsrs	r2, r1
 8009a52:	07d6      	lsls	r6, r2, #31
 8009a54:	d528      	bpl.n	8009aa8 <__sflush_r+0xb8>
 8009a56:	2200      	movs	r2, #0
 8009a58:	6062      	str	r2, [r4, #4]
 8009a5a:	04d9      	lsls	r1, r3, #19
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	d504      	bpl.n	8009a6c <__sflush_r+0x7c>
 8009a62:	1c42      	adds	r2, r0, #1
 8009a64:	d101      	bne.n	8009a6a <__sflush_r+0x7a>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	b903      	cbnz	r3, 8009a6c <__sflush_r+0x7c>
 8009a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a6e:	602f      	str	r7, [r5, #0]
 8009a70:	2900      	cmp	r1, #0
 8009a72:	d0ca      	beq.n	8009a0a <__sflush_r+0x1a>
 8009a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	d002      	beq.n	8009a82 <__sflush_r+0x92>
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f7ff fae3 	bl	8009048 <_free_r>
 8009a82:	2000      	movs	r0, #0
 8009a84:	6360      	str	r0, [r4, #52]	; 0x34
 8009a86:	e7c1      	b.n	8009a0c <__sflush_r+0x1c>
 8009a88:	6a21      	ldr	r1, [r4, #32]
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b0      	blx	r6
 8009a90:	1c41      	adds	r1, r0, #1
 8009a92:	d1c7      	bne.n	8009a24 <__sflush_r+0x34>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0c4      	beq.n	8009a24 <__sflush_r+0x34>
 8009a9a:	2b1d      	cmp	r3, #29
 8009a9c:	d001      	beq.n	8009aa2 <__sflush_r+0xb2>
 8009a9e:	2b16      	cmp	r3, #22
 8009aa0:	d101      	bne.n	8009aa6 <__sflush_r+0xb6>
 8009aa2:	602f      	str	r7, [r5, #0]
 8009aa4:	e7b1      	b.n	8009a0a <__sflush_r+0x1a>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	e7ad      	b.n	8009a0c <__sflush_r+0x1c>
 8009ab0:	690f      	ldr	r7, [r1, #16]
 8009ab2:	2f00      	cmp	r7, #0
 8009ab4:	d0a9      	beq.n	8009a0a <__sflush_r+0x1a>
 8009ab6:	0793      	lsls	r3, r2, #30
 8009ab8:	680e      	ldr	r6, [r1, #0]
 8009aba:	bf08      	it	eq
 8009abc:	694b      	ldreq	r3, [r1, #20]
 8009abe:	600f      	str	r7, [r1, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	eba6 0807 	sub.w	r8, r6, r7
 8009ac8:	608b      	str	r3, [r1, #8]
 8009aca:	f1b8 0f00 	cmp.w	r8, #0
 8009ace:	dd9c      	ble.n	8009a0a <__sflush_r+0x1a>
 8009ad0:	6a21      	ldr	r1, [r4, #32]
 8009ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ad4:	4643      	mov	r3, r8
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b0      	blx	r6
 8009adc:	2800      	cmp	r0, #0
 8009ade:	dc06      	bgt.n	8009aee <__sflush_r+0xfe>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae6:	81a3      	strh	r3, [r4, #12]
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	e78e      	b.n	8009a0c <__sflush_r+0x1c>
 8009aee:	4407      	add	r7, r0
 8009af0:	eba8 0800 	sub.w	r8, r8, r0
 8009af4:	e7e9      	b.n	8009aca <__sflush_r+0xda>
 8009af6:	bf00      	nop
 8009af8:	20400001 	.word	0x20400001

08009afc <_fflush_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	690b      	ldr	r3, [r1, #16]
 8009b00:	4605      	mov	r5, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	b913      	cbnz	r3, 8009b0c <_fflush_r+0x10>
 8009b06:	2500      	movs	r5, #0
 8009b08:	4628      	mov	r0, r5
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	b118      	cbz	r0, 8009b16 <_fflush_r+0x1a>
 8009b0e:	6983      	ldr	r3, [r0, #24]
 8009b10:	b90b      	cbnz	r3, 8009b16 <_fflush_r+0x1a>
 8009b12:	f000 f887 	bl	8009c24 <__sinit>
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <_fflush_r+0x6c>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	d11b      	bne.n	8009b54 <_fflush_r+0x58>
 8009b1c:	686c      	ldr	r4, [r5, #4]
 8009b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0ef      	beq.n	8009b06 <_fflush_r+0xa>
 8009b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b28:	07d0      	lsls	r0, r2, #31
 8009b2a:	d404      	bmi.n	8009b36 <_fflush_r+0x3a>
 8009b2c:	0599      	lsls	r1, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_fflush_r+0x3a>
 8009b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b32:	f000 f915 	bl	8009d60 <__retarget_lock_acquire_recursive>
 8009b36:	4628      	mov	r0, r5
 8009b38:	4621      	mov	r1, r4
 8009b3a:	f7ff ff59 	bl	80099f0 <__sflush_r>
 8009b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b40:	07da      	lsls	r2, r3, #31
 8009b42:	4605      	mov	r5, r0
 8009b44:	d4e0      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	059b      	lsls	r3, r3, #22
 8009b4a:	d4dd      	bmi.n	8009b08 <_fflush_r+0xc>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4e:	f000 f908 	bl	8009d62 <__retarget_lock_release_recursive>
 8009b52:	e7d9      	b.n	8009b08 <_fflush_r+0xc>
 8009b54:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <_fflush_r+0x70>)
 8009b56:	429c      	cmp	r4, r3
 8009b58:	d101      	bne.n	8009b5e <_fflush_r+0x62>
 8009b5a:	68ac      	ldr	r4, [r5, #8]
 8009b5c:	e7df      	b.n	8009b1e <_fflush_r+0x22>
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <_fflush_r+0x74>)
 8009b60:	429c      	cmp	r4, r3
 8009b62:	bf08      	it	eq
 8009b64:	68ec      	ldreq	r4, [r5, #12]
 8009b66:	e7da      	b.n	8009b1e <_fflush_r+0x22>
 8009b68:	0800a494 	.word	0x0800a494
 8009b6c:	0800a4b4 	.word	0x0800a4b4
 8009b70:	0800a474 	.word	0x0800a474

08009b74 <std>:
 8009b74:	2300      	movs	r3, #0
 8009b76:	b510      	push	{r4, lr}
 8009b78:	4604      	mov	r4, r0
 8009b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b82:	6083      	str	r3, [r0, #8]
 8009b84:	8181      	strh	r1, [r0, #12]
 8009b86:	6643      	str	r3, [r0, #100]	; 0x64
 8009b88:	81c2      	strh	r2, [r0, #14]
 8009b8a:	6183      	str	r3, [r0, #24]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	2208      	movs	r2, #8
 8009b90:	305c      	adds	r0, #92	; 0x5c
 8009b92:	f7fd fb97 	bl	80072c4 <memset>
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <std+0x38>)
 8009b98:	6263      	str	r3, [r4, #36]	; 0x24
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x3c>)
 8009b9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <std+0x40>)
 8009ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <std+0x44>)
 8009ba4:	6224      	str	r4, [r4, #32]
 8009ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ba8:	bd10      	pop	{r4, pc}
 8009baa:	bf00      	nop
 8009bac:	08009ec5 	.word	0x08009ec5
 8009bb0:	08009ee7 	.word	0x08009ee7
 8009bb4:	08009f1f 	.word	0x08009f1f
 8009bb8:	08009f43 	.word	0x08009f43

08009bbc <_cleanup_r>:
 8009bbc:	4901      	ldr	r1, [pc, #4]	; (8009bc4 <_cleanup_r+0x8>)
 8009bbe:	f000 b8af 	b.w	8009d20 <_fwalk_reent>
 8009bc2:	bf00      	nop
 8009bc4:	08009afd 	.word	0x08009afd

08009bc8 <__sfmoreglue>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	1e4a      	subs	r2, r1, #1
 8009bcc:	2568      	movs	r5, #104	; 0x68
 8009bce:	4355      	muls	r5, r2
 8009bd0:	460e      	mov	r6, r1
 8009bd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bd6:	f7ff fa87 	bl	80090e8 <_malloc_r>
 8009bda:	4604      	mov	r4, r0
 8009bdc:	b140      	cbz	r0, 8009bf0 <__sfmoreglue+0x28>
 8009bde:	2100      	movs	r1, #0
 8009be0:	e9c0 1600 	strd	r1, r6, [r0]
 8009be4:	300c      	adds	r0, #12
 8009be6:	60a0      	str	r0, [r4, #8]
 8009be8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bec:	f7fd fb6a 	bl	80072c4 <memset>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}

08009bf4 <__sfp_lock_acquire>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__sfp_lock_acquire+0x8>)
 8009bf6:	f000 b8b3 	b.w	8009d60 <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20000694 	.word	0x20000694

08009c00 <__sfp_lock_release>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sfp_lock_release+0x8>)
 8009c02:	f000 b8ae 	b.w	8009d62 <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20000694 	.word	0x20000694

08009c0c <__sinit_lock_acquire>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__sinit_lock_acquire+0x8>)
 8009c0e:	f000 b8a7 	b.w	8009d60 <__retarget_lock_acquire_recursive>
 8009c12:	bf00      	nop
 8009c14:	2000068f 	.word	0x2000068f

08009c18 <__sinit_lock_release>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__sinit_lock_release+0x8>)
 8009c1a:	f000 b8a2 	b.w	8009d62 <__retarget_lock_release_recursive>
 8009c1e:	bf00      	nop
 8009c20:	2000068f 	.word	0x2000068f

08009c24 <__sinit>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	4604      	mov	r4, r0
 8009c28:	f7ff fff0 	bl	8009c0c <__sinit_lock_acquire>
 8009c2c:	69a3      	ldr	r3, [r4, #24]
 8009c2e:	b11b      	cbz	r3, 8009c38 <__sinit+0x14>
 8009c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c34:	f7ff bff0 	b.w	8009c18 <__sinit_lock_release>
 8009c38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c3c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <__sinit+0x68>)
 8009c40:	4a13      	ldr	r2, [pc, #76]	; (8009c90 <__sinit+0x6c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	bf04      	itt	eq
 8009c4a:	2301      	moveq	r3, #1
 8009c4c:	61a3      	streq	r3, [r4, #24]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 f820 	bl	8009c94 <__sfp>
 8009c54:	6060      	str	r0, [r4, #4]
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f81c 	bl	8009c94 <__sfp>
 8009c5c:	60a0      	str	r0, [r4, #8]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 f818 	bl	8009c94 <__sfp>
 8009c64:	2200      	movs	r2, #0
 8009c66:	60e0      	str	r0, [r4, #12]
 8009c68:	2104      	movs	r1, #4
 8009c6a:	6860      	ldr	r0, [r4, #4]
 8009c6c:	f7ff ff82 	bl	8009b74 <std>
 8009c70:	68a0      	ldr	r0, [r4, #8]
 8009c72:	2201      	movs	r2, #1
 8009c74:	2109      	movs	r1, #9
 8009c76:	f7ff ff7d 	bl	8009b74 <std>
 8009c7a:	68e0      	ldr	r0, [r4, #12]
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	2112      	movs	r1, #18
 8009c80:	f7ff ff78 	bl	8009b74 <std>
 8009c84:	2301      	movs	r3, #1
 8009c86:	61a3      	str	r3, [r4, #24]
 8009c88:	e7d2      	b.n	8009c30 <__sinit+0xc>
 8009c8a:	bf00      	nop
 8009c8c:	0800a0f4 	.word	0x0800a0f4
 8009c90:	08009bbd 	.word	0x08009bbd

08009c94 <__sfp>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	4607      	mov	r7, r0
 8009c98:	f7ff ffac 	bl	8009bf4 <__sfp_lock_acquire>
 8009c9c:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <__sfp+0x84>)
 8009c9e:	681e      	ldr	r6, [r3, #0]
 8009ca0:	69b3      	ldr	r3, [r6, #24]
 8009ca2:	b913      	cbnz	r3, 8009caa <__sfp+0x16>
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7ff ffbd 	bl	8009c24 <__sinit>
 8009caa:	3648      	adds	r6, #72	; 0x48
 8009cac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	d503      	bpl.n	8009cbc <__sfp+0x28>
 8009cb4:	6833      	ldr	r3, [r6, #0]
 8009cb6:	b30b      	cbz	r3, 8009cfc <__sfp+0x68>
 8009cb8:	6836      	ldr	r6, [r6, #0]
 8009cba:	e7f7      	b.n	8009cac <__sfp+0x18>
 8009cbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cc0:	b9d5      	cbnz	r5, 8009cf8 <__sfp+0x64>
 8009cc2:	4b16      	ldr	r3, [pc, #88]	; (8009d1c <__sfp+0x88>)
 8009cc4:	60e3      	str	r3, [r4, #12]
 8009cc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cca:	6665      	str	r5, [r4, #100]	; 0x64
 8009ccc:	f000 f847 	bl	8009d5e <__retarget_lock_init_recursive>
 8009cd0:	f7ff ff96 	bl	8009c00 <__sfp_lock_release>
 8009cd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cdc:	6025      	str	r5, [r4, #0]
 8009cde:	61a5      	str	r5, [r4, #24]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ce8:	f7fd faec 	bl	80072c4 <memset>
 8009cec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	3468      	adds	r4, #104	; 0x68
 8009cfa:	e7d9      	b.n	8009cb0 <__sfp+0x1c>
 8009cfc:	2104      	movs	r1, #4
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f7ff ff62 	bl	8009bc8 <__sfmoreglue>
 8009d04:	4604      	mov	r4, r0
 8009d06:	6030      	str	r0, [r6, #0]
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d1d5      	bne.n	8009cb8 <__sfp+0x24>
 8009d0c:	f7ff ff78 	bl	8009c00 <__sfp_lock_release>
 8009d10:	230c      	movs	r3, #12
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	e7ee      	b.n	8009cf4 <__sfp+0x60>
 8009d16:	bf00      	nop
 8009d18:	0800a0f4 	.word	0x0800a0f4
 8009d1c:	ffff0001 	.word	0xffff0001

08009d20 <_fwalk_reent>:
 8009d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d24:	4606      	mov	r6, r0
 8009d26:	4688      	mov	r8, r1
 8009d28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d2c:	2700      	movs	r7, #0
 8009d2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d32:	f1b9 0901 	subs.w	r9, r9, #1
 8009d36:	d505      	bpl.n	8009d44 <_fwalk_reent+0x24>
 8009d38:	6824      	ldr	r4, [r4, #0]
 8009d3a:	2c00      	cmp	r4, #0
 8009d3c:	d1f7      	bne.n	8009d2e <_fwalk_reent+0xe>
 8009d3e:	4638      	mov	r0, r7
 8009d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d44:	89ab      	ldrh	r3, [r5, #12]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d907      	bls.n	8009d5a <_fwalk_reent+0x3a>
 8009d4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	d003      	beq.n	8009d5a <_fwalk_reent+0x3a>
 8009d52:	4629      	mov	r1, r5
 8009d54:	4630      	mov	r0, r6
 8009d56:	47c0      	blx	r8
 8009d58:	4307      	orrs	r7, r0
 8009d5a:	3568      	adds	r5, #104	; 0x68
 8009d5c:	e7e9      	b.n	8009d32 <_fwalk_reent+0x12>

08009d5e <__retarget_lock_init_recursive>:
 8009d5e:	4770      	bx	lr

08009d60 <__retarget_lock_acquire_recursive>:
 8009d60:	4770      	bx	lr

08009d62 <__retarget_lock_release_recursive>:
 8009d62:	4770      	bx	lr

08009d64 <__swhatbuf_r>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	460e      	mov	r6, r1
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	b096      	sub	sp, #88	; 0x58
 8009d70:	4614      	mov	r4, r2
 8009d72:	461d      	mov	r5, r3
 8009d74:	da07      	bge.n	8009d86 <__swhatbuf_r+0x22>
 8009d76:	2300      	movs	r3, #0
 8009d78:	602b      	str	r3, [r5, #0]
 8009d7a:	89b3      	ldrh	r3, [r6, #12]
 8009d7c:	061a      	lsls	r2, r3, #24
 8009d7e:	d410      	bmi.n	8009da2 <__swhatbuf_r+0x3e>
 8009d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d84:	e00e      	b.n	8009da4 <__swhatbuf_r+0x40>
 8009d86:	466a      	mov	r2, sp
 8009d88:	f000 f902 	bl	8009f90 <_fstat_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	dbf2      	blt.n	8009d76 <__swhatbuf_r+0x12>
 8009d90:	9a01      	ldr	r2, [sp, #4]
 8009d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d9a:	425a      	negs	r2, r3
 8009d9c:	415a      	adcs	r2, r3
 8009d9e:	602a      	str	r2, [r5, #0]
 8009da0:	e7ee      	b.n	8009d80 <__swhatbuf_r+0x1c>
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	2000      	movs	r0, #0
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	b016      	add	sp, #88	; 0x58
 8009daa:	bd70      	pop	{r4, r5, r6, pc}

08009dac <__smakebuf_r>:
 8009dac:	898b      	ldrh	r3, [r1, #12]
 8009dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009db0:	079d      	lsls	r5, r3, #30
 8009db2:	4606      	mov	r6, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	d507      	bpl.n	8009dc8 <__smakebuf_r+0x1c>
 8009db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	ab01      	add	r3, sp, #4
 8009dca:	466a      	mov	r2, sp
 8009dcc:	f7ff ffca 	bl	8009d64 <__swhatbuf_r>
 8009dd0:	9900      	ldr	r1, [sp, #0]
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff f987 	bl	80090e8 <_malloc_r>
 8009dda:	b948      	cbnz	r0, 8009df0 <__smakebuf_r+0x44>
 8009ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de0:	059a      	lsls	r2, r3, #22
 8009de2:	d4ef      	bmi.n	8009dc4 <__smakebuf_r+0x18>
 8009de4:	f023 0303 	bic.w	r3, r3, #3
 8009de8:	f043 0302 	orr.w	r3, r3, #2
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	e7e3      	b.n	8009db8 <__smakebuf_r+0xc>
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <__smakebuf_r+0x7c>)
 8009df2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfc:	81a3      	strh	r3, [r4, #12]
 8009dfe:	9b00      	ldr	r3, [sp, #0]
 8009e00:	6163      	str	r3, [r4, #20]
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	6120      	str	r0, [r4, #16]
 8009e06:	b15b      	cbz	r3, 8009e20 <__smakebuf_r+0x74>
 8009e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f8d1 	bl	8009fb4 <_isatty_r>
 8009e12:	b128      	cbz	r0, 8009e20 <__smakebuf_r+0x74>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	89a0      	ldrh	r0, [r4, #12]
 8009e22:	4305      	orrs	r5, r0
 8009e24:	81a5      	strh	r5, [r4, #12]
 8009e26:	e7cd      	b.n	8009dc4 <__smakebuf_r+0x18>
 8009e28:	08009bbd 	.word	0x08009bbd

08009e2c <_malloc_usable_size_r>:
 8009e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e30:	1f18      	subs	r0, r3, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfbc      	itt	lt
 8009e36:	580b      	ldrlt	r3, [r1, r0]
 8009e38:	18c0      	addlt	r0, r0, r3
 8009e3a:	4770      	bx	lr

08009e3c <_raise_r>:
 8009e3c:	291f      	cmp	r1, #31
 8009e3e:	b538      	push	{r3, r4, r5, lr}
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	d904      	bls.n	8009e50 <_raise_r+0x14>
 8009e46:	2316      	movs	r3, #22
 8009e48:	6003      	str	r3, [r0, #0]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e52:	b112      	cbz	r2, 8009e5a <_raise_r+0x1e>
 8009e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e58:	b94b      	cbnz	r3, 8009e6e <_raise_r+0x32>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f830 	bl	8009ec0 <_getpid_r>
 8009e60:	462a      	mov	r2, r5
 8009e62:	4601      	mov	r1, r0
 8009e64:	4620      	mov	r0, r4
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f000 b817 	b.w	8009e9c <_kill_r>
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d00a      	beq.n	8009e88 <_raise_r+0x4c>
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	d103      	bne.n	8009e7e <_raise_r+0x42>
 8009e76:	2316      	movs	r3, #22
 8009e78:	6003      	str	r3, [r0, #0]
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	e7e7      	b.n	8009e4e <_raise_r+0x12>
 8009e7e:	2400      	movs	r4, #0
 8009e80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e84:	4628      	mov	r0, r5
 8009e86:	4798      	blx	r3
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7e0      	b.n	8009e4e <_raise_r+0x12>

08009e8c <raise>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <raise+0xc>)
 8009e8e:	4601      	mov	r1, r0
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f7ff bfd3 	b.w	8009e3c <_raise_r>
 8009e96:	bf00      	nop
 8009e98:	20000010 	.word	0x20000010

08009e9c <_kill_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	; (8009ebc <_kill_r+0x20>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f7f7 ff59 	bl	8001d60 <_kill>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d102      	bne.n	8009eb8 <_kill_r+0x1c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b103      	cbz	r3, 8009eb8 <_kill_r+0x1c>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000688 	.word	0x20000688

08009ec0 <_getpid_r>:
 8009ec0:	f7f7 bf46 	b.w	8001d50 <_getpid>

08009ec4 <__sread>:
 8009ec4:	b510      	push	{r4, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ecc:	f000 f894 	bl	8009ff8 <_read_r>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	bfab      	itete	ge
 8009ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed8:	181b      	addge	r3, r3, r0
 8009eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ede:	bfac      	ite	ge
 8009ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ee2:	81a3      	strhlt	r3, [r4, #12]
 8009ee4:	bd10      	pop	{r4, pc}

08009ee6 <__swrite>:
 8009ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eea:	461f      	mov	r7, r3
 8009eec:	898b      	ldrh	r3, [r1, #12]
 8009eee:	05db      	lsls	r3, r3, #23
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4616      	mov	r6, r2
 8009ef6:	d505      	bpl.n	8009f04 <__swrite+0x1e>
 8009ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efc:	2302      	movs	r3, #2
 8009efe:	2200      	movs	r2, #0
 8009f00:	f000 f868 	bl	8009fd4 <_lseek_r>
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	4632      	mov	r2, r6
 8009f12:	463b      	mov	r3, r7
 8009f14:	4628      	mov	r0, r5
 8009f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	f000 b817 	b.w	8009f4c <_write_r>

08009f1e <__sseek>:
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	460c      	mov	r4, r1
 8009f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f26:	f000 f855 	bl	8009fd4 <_lseek_r>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	bf15      	itete	ne
 8009f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f3a:	81a3      	strheq	r3, [r4, #12]
 8009f3c:	bf18      	it	ne
 8009f3e:	81a3      	strhne	r3, [r4, #12]
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <__sclose>:
 8009f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f46:	f000 b813 	b.w	8009f70 <_close_r>
	...

08009f4c <_write_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_write_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f7 ff37 	bl	8001dce <_write>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_write_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_write_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000688 	.word	0x20000688

08009f70 <_close_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d06      	ldr	r5, [pc, #24]	; (8009f8c <_close_r+0x1c>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	602b      	str	r3, [r5, #0]
 8009f7c:	f7f7 ff43 	bl	8001e06 <_close>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_close_r+0x1a>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_close_r+0x1a>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000688 	.word	0x20000688

08009f90 <_fstat_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_fstat_r+0x20>)
 8009f94:	2300      	movs	r3, #0
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	f7f7 ff3e 	bl	8001e1e <_fstat>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d102      	bne.n	8009fac <_fstat_r+0x1c>
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	b103      	cbz	r3, 8009fac <_fstat_r+0x1c>
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	bd38      	pop	{r3, r4, r5, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000688 	.word	0x20000688

08009fb4 <_isatty_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d06      	ldr	r5, [pc, #24]	; (8009fd0 <_isatty_r+0x1c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	602b      	str	r3, [r5, #0]
 8009fc0:	f7f7 ff3d 	bl	8001e3e <_isatty>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_isatty_r+0x1a>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_isatty_r+0x1a>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	20000688 	.word	0x20000688

08009fd4 <_lseek_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d07      	ldr	r5, [pc, #28]	; (8009ff4 <_lseek_r+0x20>)
 8009fd8:	4604      	mov	r4, r0
 8009fda:	4608      	mov	r0, r1
 8009fdc:	4611      	mov	r1, r2
 8009fde:	2200      	movs	r2, #0
 8009fe0:	602a      	str	r2, [r5, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f7f7 ff36 	bl	8001e54 <_lseek>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_lseek_r+0x1e>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_lseek_r+0x1e>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	20000688 	.word	0x20000688

08009ff8 <_read_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	; (800a018 <_read_r+0x20>)
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	4608      	mov	r0, r1
 800a000:	4611      	mov	r1, r2
 800a002:	2200      	movs	r2, #0
 800a004:	602a      	str	r2, [r5, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	f7f7 fec4 	bl	8001d94 <_read>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_read_r+0x1e>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_read_r+0x1e>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	20000688 	.word	0x20000688

0800a01c <_init>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr

0800a028 <_fini>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr
