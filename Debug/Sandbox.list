
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005364  08005364  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005364  08005364  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000074  080053e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080053e4  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ca8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f3  00000000  00000000  00030d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00033540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00034338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c83a  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad3  00000000  00000000  00051862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a62a0  00000000  00000000  00062335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001085d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  00108628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052d0 	.word	0x080052d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080052d0 	.word	0x080052d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <serial_add_char>:

static Buffer BufferSerialInstance;


void serial_add_char(unsigned char c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	BufferSerialInstance.AddChar(c);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4619      	mov	r1, r3
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <serial_add_char+0x1c>)
 8000290:	f000 f81e 	bl	80002d0 <_ZN6Buffer7AddCharEh>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000090 	.word	0x20000090

080002a0 <_ZN6BufferC1Ev>:


Buffer::Buffer()
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4618      	mov	r0, r3
 80002ac:	23ff      	movs	r3, #255	; 0xff
 80002ae:	461a      	mov	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f004 fbd7 	bl	8004a64 <memset>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
{}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZN6Buffer7AddCharEh>:

void Buffer::AddChar(unsigned char c)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	buf[index_in] = c;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	78f9      	ldrb	r1, [r7, #3]
 80002e6:	54d1      	strb	r1, [r2, r3]
	index_in++;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	index_in = index_in % BUFF_SIZE;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <_ZN6Buffer7AddCharEh+0x50>)
 80002fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000302:	09da      	lsrs	r2, r3, #7
 8000304:	4613      	mov	r3, r2
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	1a9b      	subs	r3, r3, r2
 800030a:	1aca      	subs	r2, r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	80808081 	.word	0x80808081

08000324 <_Z41__static_initialization_and_destruction_0ii>:
	{
		c = ReadChar();
		str[i] = c;
		i++;
	}
}
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d107      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033a:	4293      	cmp	r3, r2
 800033c:	d102      	bne.n	8000344 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Buffer BufferSerialInstance;
 800033e:	4803      	ldr	r0, [pc, #12]	; (800034c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000340:	f7ff ffae 	bl	80002a0 <_ZN6BufferC1Ev>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090

08000350 <_GLOBAL__sub_I_serial_add_char>:
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
 8000354:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ffe3 	bl	8000324 <_Z41__static_initialization_and_destruction_0ii>
 800035e:	bd80      	pop	{r7, pc}

08000360 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(huart, UART3_rxBuffer, 1, 100);
 8000368:	2364      	movs	r3, #100	; 0x64
 800036a:	2201      	movs	r2, #1
 800036c:	4908      	ldr	r1, [pc, #32]	; (8000390 <HAL_UART_RxCpltCallback+0x30>)
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f003 fbfa 	bl	8003b68 <HAL_UART_Transmit>
    serial_add_char(UART3_rxBuffer[0]);
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_UART_RxCpltCallback+0x30>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff81 	bl	8000280 <serial_add_char>
    HAL_UART_Receive_IT(huart, UART3_rxBuffer, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	4903      	ldr	r1, [pc, #12]	; (8000390 <HAL_UART_RxCpltCallback+0x30>)
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f003 fc84 	bl	8003c90 <HAL_UART_Receive_IT>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000274 	.word	0x20000274

08000394 <printVal>:

void printVal(int out, int a, int b, int c, int d)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b096      	sub	sp, #88	; 0x58
 8000398:	af04      	add	r7, sp, #16
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
 80003a0:	603b      	str	r3, [r7, #0]
    char buffer [50];
    sprintf (buffer, "%d %d %d %d %d\n", out, a, b, c, d);
 80003a2:	f107 0014 	add.w	r0, r7, #20
 80003a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80003a8:	9302      	str	r3, [sp, #8]
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	490a      	ldr	r1, [pc, #40]	; (80003e0 <printVal+0x4c>)
 80003b8:	f004 fb5c 	bl	8004a74 <siprintf>
    HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 100);
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff05 	bl	80001d0 <strlen>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	f107 0114 	add.w	r1, r7, #20
 80003ce:	2364      	movs	r3, #100	; 0x64
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <printVal+0x50>)
 80003d2:	f003 fbc9 	bl	8003b68 <HAL_UART_Transmit>
}
 80003d6:	bf00      	nop
 80003d8:	3748      	adds	r7, #72	; 0x48
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	080052e8 	.word	0x080052e8
 80003e4:	200001a4 	.word	0x200001a4

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ee:	f000 fc8f 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f2:	f000 f847 	bl	8000484 <SystemClock_Config>
  // +++ Comment HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); --> No interrupt required

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f6:	f000 f9d9 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003fa:	f000 f95d 	bl	80006b8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80003fe:	f000 f9bb 	bl	8000778 <MX_DMA_Init>
  MX_ADC1_Init();
 8000402:	f000 f89f 	bl	8000544 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000406:	f000 f987 	bl	8000718 <MX_USART3_UART_Init>
  MX_DAC_Init();
 800040a:	f000 f921 	bl	8000650 <MX_DAC_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // !!! Start UART before ADC  !!! ////////
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 800040e:	2201      	movs	r2, #1
 8000410:	4916      	ldr	r1, [pc, #88]	; (800046c <main+0x84>)
 8000412:	4817      	ldr	r0, [pc, #92]	; (8000470 <main+0x88>)
 8000414:	f003 fc3c 	bl	8003c90 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000418:	2204      	movs	r2, #4
 800041a:	4916      	ldr	r1, [pc, #88]	; (8000474 <main+0x8c>)
 800041c:	4816      	ldr	r0, [pc, #88]	; (8000478 <main+0x90>)
 800041e:	f000 fea5 	bl	800116c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(10);
 8000422:	200a      	movs	r0, #10
 8000424:	f000 fcda 	bl	8000ddc <HAL_Delay>

	  cmd_target += 10;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <main+0x94>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	330a      	adds	r3, #10
 800042e:	4a13      	ldr	r2, [pc, #76]	; (800047c <main+0x94>)
 8000430:	6013      	str	r3, [r2, #0]
	  cmd_target = cmd_target % 4096;
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <main+0x94>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800043a:	4a10      	ldr	r2, [pc, #64]	; (800047c <main+0x94>)
 800043c:	6013      	str	r3, [r2, #0]
	  DAC1->DHR12R1 = cmd_target;
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <main+0x98>)
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <main+0x94>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6093      	str	r3, [r2, #8]

	  printVal(cmd_target, adc_buf[0], adc_buf[1], adc_buf[2], adc_buf[3]);
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <main+0x94>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <main+0x8c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <main+0x8c>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	461a      	mov	r2, r3
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <main+0x8c>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	461c      	mov	r4, r3
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <main+0x8c>)
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	4623      	mov	r3, r4
 8000466:	f7ff ff95 	bl	8000394 <printVal>
	  HAL_Delay(10);
 800046a:	e7da      	b.n	8000422 <main+0x3a>
 800046c:	20000274 	.word	0x20000274
 8000470:	200001a4 	.word	0x200001a4
 8000474:	2000041c 	.word	0x2000041c
 8000478:	20000374 	.word	0x20000374
 800047c:	20000000 	.word	0x20000000
 8000480:	40007400 	.word	0x40007400

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	; 0x70
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800048e:	2228      	movs	r2, #40	; 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f004 fae6 	bl	8004a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f004 fad8 	bl	8004a64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004b4:	2303      	movs	r3, #3
 80004b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c2:	2301      	movs	r3, #1
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c6:	2310      	movs	r3, #16
 80004c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ca:	2302      	movs	r3, #2
 80004cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 f824 	bl	800252c <HAL_RCC_OscConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004ea:	f000 f9db 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	230f      	movs	r3, #15
 80004f0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f2:	2302      	movs	r3, #2
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000504:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000508:	2102      	movs	r1, #2
 800050a:	4618      	mov	r0, r3
 800050c:	f002 ff16 	bl	800333c <HAL_RCC_ClockConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000516:	f000 f9c5 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	4618      	mov	r0, r3
 800052c:	f003 f93c 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000536:	f000 f9b5 	bl	80008a4 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3770      	adds	r7, #112	; 0x70
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <MX_ADC1_Init+0x108>)
 800055c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000560:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_ADC1_Init+0x108>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <MX_ADC1_Init+0x108>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800056e:	4b37      	ldr	r3, [pc, #220]	; (800064c <MX_ADC1_Init+0x108>)
 8000570:	2201      	movs	r2, #1
 8000572:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <MX_ADC1_Init+0x108>)
 8000576:	2201      	movs	r2, #1
 8000578:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <MX_ADC1_Init+0x108>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <MX_ADC1_Init+0x108>)
 8000584:	2200      	movs	r2, #0
 8000586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_ADC1_Init+0x108>)
 800058a:	2201      	movs	r2, #1
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <MX_ADC1_Init+0x108>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <MX_ADC1_Init+0x108>)
 8000596:	2204      	movs	r2, #4
 8000598:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <MX_ADC1_Init+0x108>)
 800059c:	2201      	movs	r2, #1
 800059e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <MX_ADC1_Init+0x108>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_ADC1_Init+0x108>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b4:	4825      	ldr	r0, [pc, #148]	; (800064c <MX_ADC1_Init+0x108>)
 80005b6:	f000 fc53 	bl	8000e60 <HAL_ADC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005c0:	f000 f970 	bl	80008a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005d0:	2303      	movs	r3, #3
 80005d2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <MX_ADC1_Init+0x108>)
 80005e2:	f000 fe5f 	bl	80012a4 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005ec:	f000 f95a 	bl	80008a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <MX_ADC1_Init+0x108>)
 80005fe:	f000 fe51 	bl	80012a4 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000608:	f000 f94c 	bl	80008a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800060c:	2306      	movs	r3, #6
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <MX_ADC1_Init+0x108>)
 800061a:	f000 fe43 	bl	80012a4 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000624:	f000 f93e 	bl	80008a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000628:	2307      	movs	r3, #7
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800062c:	2304      	movs	r3, #4
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x108>)
 8000636:	f000 fe35 	bl	80012a4 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000640:	f000 f930 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000374 	.word	0x20000374

08000650 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_DAC_Init+0x5c>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_DAC_Init+0x60>)
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <MX_DAC_Init+0x5c>)
 8000668:	f001 fb07 	bl	8001c7a <HAL_DAC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000672:	f000 f917 	bl	80008a4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <MX_DAC_Init+0x5c>)
 8000686:	f001 fb51 	bl	8001d2c <HAL_DAC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000690:	f000 f908 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = cmd_target;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <MX_DAC_Init+0x60>)
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_DAC_Init+0x64>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6093      	str	r3, [r2, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800069c:	2100      	movs	r1, #0
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <MX_DAC_Init+0x5c>)
 80006a0:	f001 fb0d 	bl	8001cbe <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200003c4 	.word	0x200003c4
 80006b0:	40007400 	.word	0x40007400
 80006b4:	20000000 	.word	0x20000000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART2_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006fc:	f003 f9e6 	bl	8003acc <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f8cd 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000042c 	.word	0x2000042c
 8000714:	40004400 	.word	0x40004400

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f003 f9b6 	bl	8003acc <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f89d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200001a4 	.word	0x200001a4
 8000774:	40004800 	.word	0x40004800

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_DMA_Init+0x30>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <MX_DMA_Init+0x30>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_DMA_Init+0x30>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200b      	movs	r0, #11
 800079c:	f001 fa37 	bl	8001c0e <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a27      	ldr	r2, [pc, #156]	; (8000894 <MX_GPIO_Init+0xe8>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xe8>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xe8>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_GPIO_Init+0xe8>)
 8000810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xe8>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_GPIO_Init+0xec>)
 800082a:	f001 fe4d 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <MX_GPIO_Init+0xf0>)
 8000834:	f001 fe48 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xf4>)
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <MX_GPIO_Init+0xf0>)
 800084e:	f001 fcc9 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0xec>)
 800086c:	f001 fcba 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0xf0>)
 8000888:	f001 fcac 	bl	80021e4 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400
 800089c:	48000800 	.word	0x48000800
 80008a0:	10210000 	.word	0x10210000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f001 f986 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000918:	d165      	bne.n	80009e6 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a34      	ldr	r2, [pc, #208]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_ADC_MspInit+0xf8>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000962:	2303      	movs	r3, #3
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <HAL_ADC_MspInit+0xfc>)
 8000976:	f001 fc35 	bl	80021e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800097a:	2303      	movs	r3, #3
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f001 fc28 	bl	80021e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0x104>)
 8000998:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009be:	2220      	movs	r2, #32
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009ca:	480b      	ldr	r0, [pc, #44]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009cc:	f001 f9fb 	bl	8001dc6 <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80009d6:	f7ff ff65 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000800 	.word	0x48000800
 80009f8:	200003d8 	.word	0x200003d8
 80009fc:	40020008 	.word	0x40020008

08000a00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <HAL_DAC_MspInit+0x74>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d124      	bne.n	8000a6c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_DAC_MspInit+0x78>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f001 fbbc 	bl	80021e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40007400 	.word	0x40007400
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <HAL_UART_MspInit+0xfc>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d131      	bne.n	8000b02 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 fb7a 	bl	80021e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2026      	movs	r0, #38	; 0x26
 8000af6:	f001 f88a 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afa:	2026      	movs	r0, #38	; 0x26
 8000afc:	f001 f8a3 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b00:	e035      	b.n	8000b6e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <HAL_UART_MspInit+0x104>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d130      	bne.n	8000b6e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b16:	61d3      	str	r3, [r2, #28]
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2e:	6153      	str	r3, [r2, #20]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_UART_MspInit+0x100>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_UART_MspInit+0x108>)
 8000b5a:	f001 fb43 	bl	80021e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2027      	movs	r0, #39	; 0x27
 8000b64:	f001 f853 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b68:	2027      	movs	r0, #39	; 0x27
 8000b6a:	f001 f86c 	bl	8001c46 <HAL_NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3730      	adds	r7, #48	; 0x30
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40004800 	.word	0x40004800
 8000b84:	48000400 	.word	0x48000400

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8e2 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA1_Channel1_IRQHandler+0x10>)
 8000be2:	f001 fa0d 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200003d8 	.word	0x200003d8

08000bf0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <I2C1_EV_IRQHandler+0x10>)
 8000bf6:	f001 fc7f 	bl	80024f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000228 	.word	0x20000228

08000c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART2_IRQHandler+0x10>)
 8000c0a:	f003 f87f 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000042c 	.word	0x2000042c

08000c18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART3_IRQHandler+0x10>)
 8000c1e:	f003 f875 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001a4 	.word	0x200001a4

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f003 fed8 	bl	8004a10 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20004000 	.word	0x20004000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000198 	.word	0x20000198
 8000c94:	200004c8 	.word	0x200004c8

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 fe97 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fb7b 	bl	80003e8 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d00:	08005370 	.word	0x08005370
  ldr r2, =_sbss
 8000d04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d08:	200004c4 	.word	0x200004c4

08000d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x28>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x28>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 ff69 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fdc0 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 ff81 	bl	8001c62 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 ff49 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000004 	.word	0x20000004
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	200004b0 	.word	0x200004b0

08000dc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200004b0 	.word	0x200004b0

08000ddc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c

08000e24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09a      	sub	sp, #104	; 0x68
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e169      	b.n	8001154 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d176      	bne.n	8000f80 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d152      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fd1f 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d13b      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fd65 	bl	8001998 <ADC_Disable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d12f      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
 8000ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d12b      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef0:	f023 0302 	bic.w	r3, r3, #2
 8000ef4:	f043 0202 	orr.w	r2, r3, #2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f0a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1c:	4b8f      	ldr	r3, [pc, #572]	; (800115c <HAL_ADC_Init+0x2fc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a8f      	ldr	r2, [pc, #572]	; (8001160 <HAL_ADC_Init+0x300>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9a      	lsrs	r2, r3, #18
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f32:	e002      	b.n	8000f3a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f9      	bne.n	8000f34 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f5c:	d110      	bne.n	8000f80 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f023 0312 	bic.w	r3, r3, #18
 8000f66:	f043 0210 	orr.w	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 80d6 	bne.w	800113a <HAL_ADC_Init+0x2da>
 8000f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 80d1 	bne.w	800113a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 80c9 	bne.w	800113a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fb0:	f043 0202 	orr.w	r2, r3, #2
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fb8:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <HAL_ADC_Init+0x304>)
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_ADC_Init+0x180>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_Init+0x180>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_ADC_Init+0x182>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11c      	bne.n	8001020 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d010      	beq.n	800100e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_ADC_Init+0x1a8>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_ADC_Init+0x1a8>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_ADC_Init+0x1aa>
 8001008:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800100a:	2b00      	cmp	r3, #0
 800100c:	d108      	bne.n	8001020 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800100e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	431a      	orrs	r2, r3
 800101c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800101e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e5b      	ldrb	r3, [r3, #25]
 8001024:	035b      	lsls	r3, r3, #13
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800102a:	2a01      	cmp	r2, #1
 800102c:	d002      	beq.n	8001034 <HAL_ADC_Init+0x1d4>
 800102e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001032:	e000      	b.n	8001036 <HAL_ADC_Init+0x1d6>
 8001034:	2200      	movs	r2, #0
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4313      	orrs	r3, r2
 8001044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001046:	4313      	orrs	r3, r2
 8001048:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d11b      	bne.n	800108c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7e5b      	ldrb	r3, [r3, #25]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	3b01      	subs	r3, #1
 8001062:	045a      	lsls	r2, r3, #17
 8001064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001066:	4313      	orrs	r3, r2
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
 800106e:	e00d      	b.n	800108c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001078:	f043 0220 	orr.w	r2, r3, #32
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	f043 0201 	orr.w	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	2b01      	cmp	r3, #1
 8001092:	d007      	beq.n	80010a4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	4313      	orrs	r3, r2
 800109e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010a0:	4313      	orrs	r3, r2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d114      	bne.n	80010dc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010c0:	f023 0302 	bic.w	r3, r3, #2
 80010c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e1b      	ldrb	r3, [r3, #24]
 80010ca:	039a      	lsls	r2, r3, #14
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010d8:	4313      	orrs	r3, r2
 80010da:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_ADC_Init+0x308>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010ec:	430b      	orrs	r3, r1
 80010ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10c      	bne.n	8001112 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f023 010f 	bic.w	r1, r3, #15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
 8001110:	e007      	b.n	8001122 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 020f 	bic.w	r2, r2, #15
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f023 0303 	bic.w	r3, r3, #3
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
 8001138:	e00a      	b.n	8001150 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f023 0312 	bic.w	r3, r3, #18
 8001142:	f043 0210 	orr.w	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800114a:	2301      	movs	r3, #1
 800114c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001150:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001154:	4618      	mov	r0, r3
 8001156:	3768      	adds	r7, #104	; 0x68
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000004 	.word	0x20000004
 8001160:	431bde83 	.word	0x431bde83
 8001164:	50000300 	.word	0x50000300
 8001168:	fff0c007 	.word	0xfff0c007

0800116c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	d17e      	bne.n	8001288 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_ADC_Start_DMA+0x2c>
 8001194:	2302      	movs	r3, #2
 8001196:	e07a      	b.n	800128e <HAL_ADC_Start_DMA+0x122>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 fb9b 	bl	80018dc <ADC_Enable>
 80011a6:	4603      	mov	r3, r0
 80011a8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d166      	bne.n	800127e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fa:	d106      	bne.n	800120a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f023 0206 	bic.w	r2, r3, #6
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
 8001208:	e002      	b.n	8001210 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_ADC_Start_DMA+0x12c>)
 800121e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_ADC_Start_DMA+0x130>)
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_ADC_Start_DMA+0x134>)
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	221c      	movs	r2, #28
 8001236:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0210 	orr.w	r2, r2, #16
 8001246:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3340      	adds	r3, #64	; 0x40
 8001262:	4619      	mov	r1, r3
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f000 fdf4 	bl	8001e54 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0204 	orr.w	r2, r2, #4
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	e006      	b.n	800128c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001286:	e001      	b.n	800128c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001288:	2302      	movs	r3, #2
 800128a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800128c:	7dfb      	ldrb	r3, [r7, #23]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08001811 	.word	0x08001811
 800129c:	0800188b 	.word	0x0800188b
 80012a0:	080018a7 	.word	0x080018a7

080012a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b09b      	sub	sp, #108	; 0x6c
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x22>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e299      	b.n	80017fa <HAL_ADC_ConfigChannel+0x556>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f040 827d 	bne.w	80017d8 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d81c      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	461a      	mov	r2, r3
 80012fa:	231f      	movs	r3, #31
 80012fc:	4093      	lsls	r3, r2
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	e063      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d81e      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	3b1e      	subs	r3, #30
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	4019      	ands	r1, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	3b1e      	subs	r3, #30
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
 8001364:	e040      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b0e      	cmp	r3, #14
 800136c:	d81e      	bhi.n	80013ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	3b3c      	subs	r3, #60	; 0x3c
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	3b3c      	subs	r3, #60	; 0x3c
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
 80013aa:	e01d      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	3b5a      	subs	r3, #90	; 0x5a
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4019      	ands	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	3b5a      	subs	r3, #90	; 0x5a
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 80e5 	bne.w	80015c2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d91c      	bls.n	800143a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6999      	ldr	r1, [r3, #24]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	3b1e      	subs	r3, #30
 8001412:	2207      	movs	r2, #7
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	4019      	ands	r1, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	3b1e      	subs	r3, #30
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	e019      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6959      	ldr	r1, [r3, #20]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6898      	ldr	r0, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	3b01      	subs	r3, #1
 800148c:	2b03      	cmp	r3, #3
 800148e:	d84f      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x28c>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <HAL_ADC_ConfigChannel+0x1f4>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014cb 	.word	0x080014cb
 80014a0:	080014ed 	.word	0x080014ed
 80014a4:	0800150f 	.word	0x0800150f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ae:	4b99      	ldr	r3, [pc, #612]	; (8001714 <HAL_ADC_ConfigChannel+0x470>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	0691      	lsls	r1, r2, #26
 80014b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014ba:	430a      	orrs	r2, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014c8:	e07e      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014d0:	4b90      	ldr	r3, [pc, #576]	; (8001714 <HAL_ADC_ConfigChannel+0x470>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	0691      	lsls	r1, r2, #26
 80014da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014dc:	430a      	orrs	r2, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014e8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ea:	e06d      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_ADC_ConfigChannel+0x470>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	0691      	lsls	r1, r2, #26
 80014fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014fe:	430a      	orrs	r2, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800150c:	e05c      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001514:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <HAL_ADC_ConfigChannel+0x470>)
 8001516:	4013      	ands	r3, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	0691      	lsls	r1, r2, #26
 800151e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001520:	430a      	orrs	r2, r1
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800152c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800152e:	e04b      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	069b      	lsls	r3, r3, #26
 8001540:	429a      	cmp	r2, r3
 8001542:	d107      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001552:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800155a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	069b      	lsls	r3, r3, #26
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001576:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800157e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	069b      	lsls	r3, r3, #26
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800159a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	069b      	lsls	r3, r3, #26
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d10a      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015c0:	e001      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80015c2:	bf00      	nop
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80015c6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x344>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x344>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_ADC_ConfigChannel+0x346>
 80015e8:	2300      	movs	r3, #0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 80ff 	bne.w	80017ee <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d00f      	beq.n	8001618 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001616:	e049      	b.n	80016ac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d91c      	bls.n	8001674 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6999      	ldr	r1, [r3, #24]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	3b1b      	subs	r3, #27
 800164c:	2207      	movs	r2, #7
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	4019      	ands	r1, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6898      	ldr	r0, [r3, #8]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	3b1b      	subs	r3, #27
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	e01b      	b.n	80016ac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6959      	ldr	r1, [r3, #20]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	2207      	movs	r2, #7
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6898      	ldr	r0, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_ADC_ConfigChannel+0x474>)
 80016ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d105      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016c8:	2b11      	cmp	r3, #17
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00a      	beq.n	80016ee <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016dc:	2b12      	cmp	r3, #18
 80016de:	f040 8086 	bne.w	80017ee <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d17f      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10d      	bne.n	800171c <HAL_ADC_ConfigChannel+0x478>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d106      	bne.n	800171c <HAL_ADC_ConfigChannel+0x478>
 800170e:	2301      	movs	r3, #1
 8001710:	e005      	b.n	800171e <HAL_ADC_ConfigChannel+0x47a>
 8001712:	bf00      	nop
 8001714:	83fff000 	.word	0x83fff000
 8001718:	50000300 	.word	0x50000300
 800171c:	2300      	movs	r3, #0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d150      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001722:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001724:	2b00      	cmp	r3, #0
 8001726:	d010      	beq.n	800174a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x4a0>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x4a0>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_ADC_ConfigChannel+0x4a2>
 8001744:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001746:	2b00      	cmp	r3, #0
 8001748:	d13c      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d11d      	bne.n	800178e <HAL_ADC_ConfigChannel+0x4ea>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175a:	d118      	bne.n	800178e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001766:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_ADC_ConfigChannel+0x564>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <HAL_ADC_ConfigChannel+0x568>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9a      	lsrs	r2, r3, #18
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177e:	e002      	b.n	8001786 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3b01      	subs	r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f9      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800178c:	e02e      	b.n	80017ec <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b11      	cmp	r3, #17
 8001794:	d10b      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x50a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179e:	d106      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ac:	e01e      	b.n	80017ec <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d11a      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017c2:	e013      	b.n	80017ec <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017d6:	e00a      	b.n	80017ee <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017ea:	e000      	b.n	80017ee <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	376c      	adds	r7, #108	; 0x6c
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000004 	.word	0x20000004
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001826:	2b00      	cmp	r3, #0
 8001828:	d126      	bne.n	8001878 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001840:	2b00      	cmp	r3, #0
 8001842:	d115      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fad7 	bl	8000e24 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001876:	e004      	b.n	8001882 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff facd 	bl	8000e38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7ff fabd 	bl	8000e4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <ADC_Enable+0x2c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <ADC_Enable+0x2c>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <ADC_Enable+0x2e>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13c      	bne.n	8001988 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <ADC_Enable+0xb8>)
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e028      	b.n	800198a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001948:	f7ff fa3c 	bl	8000dc4 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800194e:	e014      	b.n	800197a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001950:	f7ff fa38 	bl	8000dc4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d90d      	bls.n	800197a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e007      	b.n	800198a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d1e3      	bne.n	8001950 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	8000003f 	.word	0x8000003f

08001998 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <ADC_Disable+0x2c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <ADC_Disable+0x2c>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <ADC_Disable+0x2e>
 80019c4:	2300      	movs	r3, #0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030d 	and.w	r3, r3, #13
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10f      	bne.n	80019f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0202 	orr.w	r2, r2, #2
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2203      	movs	r2, #3
 80019ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f9e8 	bl	8000dc4 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019f6:	e022      	b.n	8001a3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 0210 	orr.w	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e01c      	b.n	8001a4e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a14:	f7ff f9d6 	bl	8000dc4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d90d      	bls.n	8001a3e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e007      	b.n	8001a4e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d0e3      	beq.n	8001a14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff3e 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff31 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e014      	b.n	8001cb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7fe feaf 	bl	8000a00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DAC_Start+0x16>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e025      	b.n	8001d20 <HAL_DAC_Start+0x62>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	409a      	lsls	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001cfe:	2b3c      	cmp	r3, #60	; 0x3c
 8001d00:	d107      	bne.n	8001d12 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_DAC_ConfigChannel+0x20>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e036      	b.n	8001dba <HAL_DAC_ConfigChannel+0x8e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d60:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	22c0      	movs	r2, #192	; 0xc0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e037      	b.n	8001e4c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f9b8 	bl	80021a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}  
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Start_IT+0x20>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e04a      	b.n	8001f0a <HAL_DMA_Start_IT+0xb6>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d13a      	bne.n	8001efc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f94b 	bl	8002146 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 020e 	orr.w	r2, r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 020a 	orr.w	r2, r2, #10
 8001ed8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0204 	bic.w	r2, r2, #4
 8001ee8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e005      	b.n	8001f08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2204      	movs	r2, #4
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e020      	b.n	8001f78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 020e 	bic.w	r2, r2, #14
 8001f44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e027      	b.n	8001ff6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0201 	bic.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	2101      	movs	r1, #1
 8001fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
    } 
  }
  return status;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d024      	beq.n	8002072 <HAL_DMA_IRQHandler+0x72>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01f      	beq.n	8002072 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2104      	movs	r1, #4
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d06a      	beq.n	800213e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002070:	e065      	b.n	800213e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2202      	movs	r2, #2
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02c      	beq.n	80020dc <HAL_DMA_IRQHandler+0xdc>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d027      	beq.n	80020dc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 020a 	bic.w	r2, r2, #10
 80020a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2102      	movs	r1, #2
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d035      	beq.n	800213e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80020da:	e030      	b.n	800213e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2208      	movs	r2, #8
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d028      	beq.n	800213e <HAL_DMA_IRQHandler+0x13e>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d023      	beq.n	800213e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020e 	bic.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
    }
  }
}  
 800213c:	e7ff      	b.n	800213e <HAL_DMA_IRQHandler+0x13e>
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d108      	bne.n	8002186 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002184:	e007      	b.n	8002196 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	60da      	str	r2, [r3, #12]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <DMA_CalcBaseAndBitshift+0x34>)
 80021b4:	4413      	add	r3, r2
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <DMA_CalcBaseAndBitshift+0x38>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	bffdfff8 	.word	0xbffdfff8
 80021dc:	cccccccd 	.word	0xcccccccd
 80021e0:	40020000 	.word	0x40020000

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e14e      	b.n	8002492 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8140 	beq.w	800248c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d00b      	beq.n	800222c <HAL_GPIO_Init+0x48>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002220:	2b11      	cmp	r3, #17
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b12      	cmp	r3, #18
 800222a:	d130      	bne.n	800228e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002262:	2201      	movs	r2, #1
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0201 	and.w	r2, r3, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0xea>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d123      	bne.n	8002316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	08da      	lsrs	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3208      	adds	r2, #8
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 809a 	beq.w	800248c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x2cc>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x2d0>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1e0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2d4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1dc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a45      	ldr	r2, [pc, #276]	; (80024bc <HAL_GPIO_Init+0x2d8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1d8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <HAL_GPIO_Init+0x2dc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1d4>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023b8:	2305      	movs	r3, #5
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1e2>
 80023c4:	2300      	movs	r3, #0
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d6:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_GPIO_Init+0x2d0>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002408:	4a2e      	ldr	r2, [pc, #184]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002432:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_GPIO_Init+0x2e0>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3301      	adds	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f aea9 	bne.w	80021f4 <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
  }
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002532:	af00      	add	r7, sp, #0
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f000 bef4 	b.w	800332e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 816a 	beq.w	800282a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002556:	4bb3      	ldr	r3, [pc, #716]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d00c      	beq.n	800257c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002562:	4bb0      	ldr	r3, [pc, #704]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d159      	bne.n	8002622 <HAL_RCC_OscConfig+0xf6>
 800256e:	4bad      	ldr	r3, [pc, #692]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d152      	bne.n	8002622 <HAL_RCC_OscConfig+0xf6>
 800257c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002580:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002590:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_OscConfig+0x82>
 80025a8:	4b9e      	ldr	r3, [pc, #632]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0xae>
 80025ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025d6:	4b93      	ldr	r3, [pc, #588]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025e6:	fa92 f2a2 	rbit	r2, r2
 80025ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025f2:	fab2 f282 	clz	r2, r2
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f042 0220 	orr.w	r2, r2, #32
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f002 021f 	and.w	r2, r2, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 810c 	beq.w	8002828 <HAL_RCC_OscConfig+0x2fc>
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8106 	bne.w	8002828 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f000 be86 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x110>
 800262e:	4b7d      	ldr	r3, [pc, #500]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7c      	ldr	r2, [pc, #496]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e030      	b.n	800269e <HAL_RCC_OscConfig+0x172>
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x134>
 8002646:	4b77      	ldr	r3, [pc, #476]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a76      	ldr	r2, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800264c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b74      	ldr	r3, [pc, #464]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a73      	ldr	r2, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01e      	b.n	800269e <HAL_RCC_OscConfig+0x172>
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x15a>
 800266c:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a69      	ldr	r2, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800267e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x172>
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b64      	ldr	r3, [pc, #400]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a63      	ldr	r2, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f023 020f 	bic.w	r2, r3, #15
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	495d      	ldr	r1, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d059      	beq.n	8002770 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fb82 	bl	8000dc4 <HAL_GetTick>
 80026c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe fb7d 	bl	8000dc4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d902      	bls.n	80026dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f000 be29 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
 80026dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d102      	bne.n	800270e <HAL_RCC_OscConfig+0x1e2>
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x20e>
 800270e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002712:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002726:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800272a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800273e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002742:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800274e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0220 	orr.w	r2, r2, #32
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ab      	beq.n	80026c6 <HAL_RCC_OscConfig+0x19a>
 800276e:	e05c      	b.n	800282a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fb28 	bl	8000dc4 <HAL_GetTick>
 8002774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277a:	f7fe fb23 	bl	8000dc4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d902      	bls.n	8002790 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	f000 bdcf 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
 8002790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002794:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x296>
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x2c2>
 80027c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_OscConfig+0x2f8>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80027f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002802:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002806:	fab2 f282 	clz	r2, r2
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 021f 	and.w	r2, r2, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ab      	bne.n	800277a <HAL_RCC_OscConfig+0x24e>
 8002822:	e002      	b.n	800282a <HAL_RCC_OscConfig+0x2fe>
 8002824:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 816f 	beq.w	8002b18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800283a:	4bd0      	ldr	r3, [pc, #832]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002846:	4bcd      	ldr	r3, [pc, #820]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d16c      	bne.n	800292c <HAL_RCC_OscConfig+0x400>
 8002852:	4bca      	ldr	r3, [pc, #808]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d166      	bne.n	800292c <HAL_RCC_OscConfig+0x400>
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002870:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0x362>
 8002888:	4bbc      	ldr	r3, [pc, #752]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e013      	b.n	80028b6 <HAL_RCC_OscConfig+0x38a>
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028b2:	4bb2      	ldr	r3, [pc, #712]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2202      	movs	r2, #2
 80028b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f000 bd1b 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4ba0      	ldr	r3, [pc, #640]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	21f8      	movs	r1, #248	; 0xf8
 8002908:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002910:	fa91 f1a1 	rbit	r1, r1
 8002914:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002918:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800291c:	fab1 f181 	clz	r1, r1
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	408b      	lsls	r3, r1
 8002924:	4995      	ldr	r1, [pc, #596]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e0f5      	b.n	8002b18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8085 	beq.w	8002a42 <HAL_RCC_OscConfig+0x516>
 8002938:	2301      	movs	r3, #1
 800293a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800294a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	461a      	mov	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fa2e 	bl	8000dc4 <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fa29 	bl	8000dc4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	f000 bcd5 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
 8002984:	2302      	movs	r3, #2
 8002986:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002996:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x488>
 80029ae:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0x4b0>
 80029b4:	2302      	movs	r3, #2
 80029b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2202      	movs	r2, #2
 80029de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80029e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80029ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80029f2:	fab2 f282 	clz	r2, r2
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f042 0220 	orr.w	r2, r2, #32
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f002 021f 	and.w	r2, r2, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0af      	beq.n	800296e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	21f8      	movs	r1, #248	; 0xf8
 8002a1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a26:	fa91 f1a1 	rbit	r1, r1
 8002a2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a32:	fab1 f181 	clz	r1, r1
 8002a36:	b2c9      	uxtb	r1, r1
 8002a38:	408b      	lsls	r3, r1
 8002a3a:	4950      	ldr	r1, [pc, #320]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e06a      	b.n	8002b18 <HAL_RCC_OscConfig+0x5ec>
 8002a42:	2301      	movs	r3, #1
 8002a44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f9a9 	bl	8000dc4 <HAL_GetTick>
 8002a72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fe f9a4 	bl	8000dc4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d902      	bls.n	8002a8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f000 bc50 	b.w	800332e <HAL_RCC_OscConfig+0xe02>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_OscConfig+0x592>
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	e013      	b.n	8002ae6 <HAL_RCC_OscConfig+0x5ba>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCC_OscConfig+0x650>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002aec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002af0:	fa92 f2a2 	rbit	r2, r2
 8002af4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002af8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1af      	bne.n	8002a78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80da 	beq.w	8002cdc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d069      	beq.n	8002c06 <HAL_RCC_OscConfig+0x6da>
 8002b32:	2301      	movs	r3, #1
 8002b34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_OscConfig+0x654>)
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	461a      	mov	r2, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fe f932 	bl	8000dc4 <HAL_GetTick>
 8002b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b64:	e00e      	b.n	8002b84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe f92d 	bl	8000dc4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d906      	bls.n	8002b84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e3d9      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	10908120 	.word	0x10908120
 8002b84:	2302      	movs	r3, #2
 8002b86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	4ba5      	ldr	r3, [pc, #660]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bce:	2102      	movs	r1, #2
 8002bd0:	6019      	str	r1, [r3, #0]
 8002bd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f1a3 	rbit	r1, r3
 8002bdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002be0:	6019      	str	r1, [r3, #0]
  return result;
 8002be2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0b0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x63a>
 8002c04:	e06a      	b.n	8002cdc <HAL_RCC_OscConfig+0x7b0>
 8002c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fa93 f2a3 	rbit	r2, r3
 8002c18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c1c:	601a      	str	r2, [r3, #0]
  return result;
 8002c1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <HAL_RCC_OscConfig+0x934>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	2300      	movs	r3, #0
 8002c36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe f8c4 	bl	8000dc4 <HAL_GetTick>
 8002c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c42:	f7fe f8bf 	bl	8000dc4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e36b      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8002c56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9e:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	6019      	str	r1, [r3, #0]
 8002caa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f1a3 	rbit	r1, r3
 8002cb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cb8:	6019      	str	r1, [r3, #0]
  return result;
 8002cba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1b2      	bne.n	8002c42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8158 	beq.w	8002f9c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b5a      	ldr	r3, [pc, #360]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d112      	bne.n	8002d24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b4f      	ldr	r3, [pc, #316]	; (8002e64 <HAL_RCC_OscConfig+0x938>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d11a      	bne.n	8002d66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCC_OscConfig+0x938>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	; (8002e64 <HAL_RCC_OscConfig+0x938>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f842 	bl	8000dc4 <HAL_GetTick>
 8002d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe f83d 	bl	8000dc4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e2e9      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_RCC_OscConfig+0x938>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ef      	beq.n	8002d46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCC_OscConfig+0x852>
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e02f      	b.n	8002dde <HAL_RCC_OscConfig+0x8b2>
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCC_OscConfig+0x876>
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	6213      	str	r3, [r2, #32]
 8002da0:	e01d      	b.n	8002dde <HAL_RCC_OscConfig+0x8b2>
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x89a>
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x8b2>
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d06b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fd ffec 	bl	8000dc4 <HAL_GetTick>
 8002dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fd ffe7 	bl	8000dc4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e291      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8002e0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e38:	601a      	str	r2, [r3, #0]
  return result;
 8002e3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d109      	bne.n	8002e68 <HAL_RCC_OscConfig+0x93c>
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <HAL_RCC_OscConfig+0x930>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e014      	b.n	8002e84 <HAL_RCC_OscConfig+0x958>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	10908120 	.word	0x10908120
 8002e64:	40007000 	.word	0x40007000
 8002e68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4bbb      	ldr	r3, [pc, #748]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e88:	2102      	movs	r1, #2
 8002e8a:	6011      	str	r1, [r2, #0]
 8002e8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fa92 f1a2 	rbit	r1, r2
 8002e96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002e9a:	6011      	str	r1, [r2, #0]
  return result;
 8002e9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	fab2 f282 	clz	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f002 021f 	and.w	r2, r2, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d099      	beq.n	8002df2 <HAL_RCC_OscConfig+0x8c6>
 8002ebe:	e063      	b.n	8002f88 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fd ff80 	bl	8000dc4 <HAL_GetTick>
 8002ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fd ff7b 	bl	8000dc4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e225      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8002ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f2a3 	rbit	r2, r3
 8002ef4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002efe:	2202      	movs	r2, #2
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f10:	601a      	str	r2, [r3, #0]
  return result;
 8002f12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_OscConfig+0xa06>
 8002f2c:	4b90      	ldr	r3, [pc, #576]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	e00d      	b.n	8002f4e <HAL_RCC_OscConfig+0xa22>
 8002f32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f36:	2202      	movs	r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f52:	2102      	movs	r1, #2
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fa92 f1a2 	rbit	r1, r2
 8002f60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f64:	6011      	str	r1, [r2, #0]
  return result;
 8002f66:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1a0      	bne.n	8002eca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b77      	ldr	r3, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a76      	ldr	r2, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 81c2 	beq.w	800332c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b71      	ldr	r3, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	f000 819c 	beq.w	80032ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f040 8114 	bne.w	80031ea <HAL_RCC_OscConfig+0xcbe>
 8002fc2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fda:	601a      	str	r2, [r3, #0]
  return result;
 8002fdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fe0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fee4 	bl	8000dc4 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003000:	e009      	b.n	8003016 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fd fedf 	bl	8000dc4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e18b      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8003016:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800301a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003034:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <HAL_RCC_OscConfig+0xb24>
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	e01b      	b.n	8003088 <HAL_RCC_OscConfig+0xb5c>
 8003050:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800306e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800308c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003090:	6011      	str	r1, [r2, #0]
 8003092:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	fa92 f1a2 	rbit	r1, r2
 800309c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030a0:	6011      	str	r1, [r2, #0]
  return result;
 80030a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d19e      	bne.n	8003002 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	430b      	orrs	r3, r1
 80030da:	4925      	ldr	r1, [pc, #148]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f8:	601a      	str	r2, [r3, #0]
  return result;
 80030fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800310a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	2301      	movs	r3, #1
 8003114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fd fe55 	bl	8000dc4 <HAL_GetTick>
 800311a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311e:	e009      	b.n	8003134 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7fd fe50 	bl	8000dc4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0fc      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 8003134:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800314c:	601a      	str	r2, [r3, #0]
  return result;
 800314e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003152:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0xc48>
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <HAL_RCC_OscConfig+0xc44>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	e01e      	b.n	80031ac <HAL_RCC_OscConfig+0xc80>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	fa93 f2a3 	rbit	r2, r3
 80031a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	4b63      	ldr	r3, [pc, #396]	; (8003338 <HAL_RCC_OscConfig+0xe0c>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031b4:	6011      	str	r1, [r2, #0]
 80031b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	fa92 f1a2 	rbit	r1, r2
 80031c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031c4:	6011      	str	r1, [r2, #0]
  return result;
 80031c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f002 021f 	and.w	r2, r2, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d09b      	beq.n	8003120 <HAL_RCC_OscConfig+0xbf4>
 80031e8:	e0a0      	b.n	800332c <HAL_RCC_OscConfig+0xe00>
 80031ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	fa93 f2a3 	rbit	r2, r3
 80031fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003202:	601a      	str	r2, [r3, #0]
  return result;
 8003204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003208:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003214:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	461a      	mov	r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fd fdd0 	bl	8000dc4 <HAL_GetTick>
 8003224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	e009      	b.n	800323e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322a:	f7fd fdcb 	bl	8000dc4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e077      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
 800323e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003242:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	601a      	str	r2, [r3, #0]
  return result;
 8003258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_RCC_OscConfig+0xd4c>
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_RCC_OscConfig+0xe0c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	e01b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd84>
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f107 0318 	add.w	r3, r7, #24
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0xe0c>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f107 0210 	add.w	r2, r7, #16
 80032b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b8:	6011      	str	r1, [r2, #0]
 80032ba:	f107 0210 	add.w	r2, r7, #16
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	fa92 f1a2 	rbit	r1, r2
 80032c4:	f107 020c 	add.w	r2, r7, #12
 80032c8:	6011      	str	r1, [r2, #0]
  return result;
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	fab2 f282 	clz	r2, r2
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f042 0220 	orr.w	r2, r2, #32
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f002 021f 	and.w	r2, r2, #31
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d19e      	bne.n	800322a <HAL_RCC_OscConfig+0xcfe>
 80032ec:	e01e      	b.n	800332c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e018      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_RCC_OscConfig+0xe0c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003304:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	429a      	cmp	r2, r3
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003316:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800331a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000

0800333c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b09e      	sub	sp, #120	; 0x78
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e162      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003354:	4b90      	ldr	r3, [pc, #576]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d910      	bls.n	8003384 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 0207 	bic.w	r2, r3, #7
 800336a:	498b      	ldr	r1, [pc, #556]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b89      	ldr	r3, [pc, #548]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e14a      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003390:	4b82      	ldr	r3, [pc, #520]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	497f      	ldr	r1, [pc, #508]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80dc 	beq.w	8003568 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d13c      	bne.n	8003432 <HAL_RCC_ClockConfig+0xf6>
 80033b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xa6>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e00f      	b.n	8003402 <HAL_RCC_ClockConfig+0xc6>
 80033e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	667b      	str	r3, [r7, #100]	; 0x64
 80033f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60
 80033f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003406:	65ba      	str	r2, [r7, #88]	; 0x58
 8003408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800340a:	fa92 f2a2 	rbit	r2, r2
 800340e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003410:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f002 021f 	and.w	r2, r2, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d17b      	bne.n	8003526 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0f3      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d13c      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x178>
 800343a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_RCC_ClockConfig+0x128>
 800345e:	4b4f      	ldr	r3, [pc, #316]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e00f      	b.n	8003484 <HAL_RCC_ClockConfig+0x148>
 8003464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
 8003472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003476:	643b      	str	r3, [r7, #64]	; 0x40
 8003478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003488:	63ba      	str	r2, [r7, #56]	; 0x38
 800348a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348c:	fa92 f2a2 	rbit	r2, r2
 8003490:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d13a      	bne.n	8003526 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0b2      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
 80034b4:	2302      	movs	r3, #2
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_ClockConfig+0x1a0>
 80034d6:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	e00d      	b.n	80034f8 <HAL_RCC_ClockConfig+0x1bc>
 80034dc:	2302      	movs	r3, #2
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
 80034e8:	2302      	movs	r3, #2
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2202      	movs	r2, #2
 80034fa:	61ba      	str	r2, [r7, #24]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	617a      	str	r2, [r7, #20]
  return result;
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0220 	orr.w	r2, r2, #32
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e079      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	491a      	ldr	r1, [pc, #104]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fd fc44 	bl	8000dc4 <HAL_GetTick>
 800353c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fd fc40 	bl	8000dc4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e061      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_ClockConfig+0x260>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d214      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 0207 	bic.w	r2, r3, #7
 800357e:	4906      	ldr	r1, [pc, #24]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_RCC_ClockConfig+0x25c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e040      	b.n	800361a <HAL_RCC_ClockConfig+0x2de>
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_ClockConfig+0x2e8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_RCC_ClockConfig+0x2e8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCC_ClockConfig+0x2e8>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4912      	ldr	r1, [pc, #72]	; (8003624 <HAL_RCC_ClockConfig+0x2e8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035de:	f000 f829 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 80035e2:	4601      	mov	r1, r0
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_RCC_ClockConfig+0x2e8>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ec:	22f0      	movs	r2, #240	; 0xf0
 80035ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	60fa      	str	r2, [r7, #12]
  return result;
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	fab2 f282 	clz	r2, r2
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	40d3      	lsrs	r3, r2
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x2ec>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	fa21 f303 	lsr.w	r3, r1, r3
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_RCC_ClockConfig+0x2f0>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_RCC_ClockConfig+0x2f4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb92 	bl	8000d3c <HAL_InitTick>
  
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3778      	adds	r7, #120	; 0x78
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000
 8003628:	080052f8 	.word	0x080052f8
 800362c:	20000004 	.word	0x20000004
 8003630:	20000008 	.word	0x20000008

08003634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	b08b      	sub	sp, #44	; 0x2c
 8003638:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b04      	cmp	r3, #4
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x30>
 800365e:	2b08      	cmp	r3, #8
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x36>
 8003662:	e03c      	b.n	80036de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003666:	623b      	str	r3, [r7, #32]
      break;
 8003668:	e03c      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003670:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003674:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	fa92 f2a2 	rbit	r2, r2
 800367c:	607a      	str	r2, [r7, #4]
  return result;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	40d3      	lsrs	r3, r2
 8003688:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	220f      	movs	r2, #15
 8003698:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	fa92 f2a2 	rbit	r2, r2
 80036a0:	60fa      	str	r2, [r7, #12]
  return result;
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	40d3      	lsrs	r3, r2
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	e004      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	623b      	str	r3, [r7, #32]
      break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036e0:	623b      	str	r3, [r7, #32]
      break;
 80036e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	372c      	adds	r7, #44	; 0x2c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	08005310 	.word	0x08005310
 8003700:	08005320 	.word	0x08005320
 8003704:	003d0900 	.word	0x003d0900

08003708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_RCC_GetHCLKFreq+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003726:	f7ff ffef 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 800372a:	4601      	mov	r1, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003734:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003738:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	603a      	str	r2, [r7, #0]
  return result;
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	40d3      	lsrs	r3, r2
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x40>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	08005308 	.word	0x08005308

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800376a:	f7ff ffcd 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 800376e:	4601      	mov	r1, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003778:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800377c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	603a      	str	r2, [r7, #0]
  return result;
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	40d3      	lsrs	r3, r2
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08005308 	.word	0x08005308

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b092      	sub	sp, #72	; 0x48
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80d4 	beq.w	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037cc:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10e      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b4b      	ldr	r3, [pc, #300]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4a4a      	ldr	r2, [pc, #296]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	61d3      	str	r3, [r2, #28]
 80037e4:	4b48      	ldr	r3, [pc, #288]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b45      	ldr	r3, [pc, #276]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d118      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a41      	ldr	r2, [pc, #260]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380e:	f7fd fad9 	bl	8000dc4 <HAL_GetTick>
 8003812:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003816:	f7fd fad5 	bl	8000dc4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e14b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8084 	beq.w	800394e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003850:	429a      	cmp	r2, r3
 8003852:	d07c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003862:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	461a      	mov	r2, r3
 800387e:	2301      	movs	r3, #1
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d04b      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fd fa85 	bl	8000dc4 <HAL_GetTick>
 80038ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fa81 	bl	8000dc4 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0f5      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80038d4:	2302      	movs	r3, #2
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	2302      	movs	r3, #2
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	61fb      	str	r3, [r7, #28]
  return result;
 80038ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d108      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003902:	4b01      	ldr	r3, [pc, #4]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	e00d      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
 8003910:	10908100 	.word	0x10908100
 8003914:	2302      	movs	r3, #2
 8003916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2202      	movs	r2, #2
 8003926:	613a      	str	r2, [r7, #16]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	fa92 f2a2 	rbit	r2, r2
 800392e:	60fa      	str	r2, [r7, #12]
  return result;
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f002 021f 	and.w	r2, r2, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0b7      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800394e:	4b5e      	ldr	r3, [pc, #376]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	495b      	ldr	r1, [pc, #364]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800395c:	4313      	orrs	r3, r2
 800395e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003960:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003972:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003980:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	f023 0203 	bic.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494e      	ldr	r1, [pc, #312]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800398e:	4313      	orrs	r3, r2
 8003990:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4947      	ldr	r1, [pc, #284]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039bc:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	493f      	ldr	r1, [pc, #252]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f023 0220 	bic.w	r2, r3, #32
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	4938      	ldr	r1, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f8:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	4930      	ldr	r1, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4929      	ldr	r1, [pc, #164]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	4921      	ldr	r1, [pc, #132]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	4912      	ldr	r1, [pc, #72]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	490b      	ldr	r1, [pc, #44]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3748      	adds	r7, #72	; 0x48
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e040      	b.n	8003b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fc ffc4 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fb1e 	bl	800414c <UART_SetConfig>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e022      	b.n	8003b60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fc48 	bl	80043b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fccf 	bl	80044fc <UART_CheckIdleState>
 8003b5e:	4603      	mov	r3, r0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 8082 	bne.w	8003c86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_Transmit+0x26>
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e07a      	b.n	8003c88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Transmit+0x38>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e073      	b.n	8003c88 <HAL_UART_Transmit+0x120>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2221      	movs	r2, #33	; 0x21
 8003bb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd f905 	bl	8000dc4 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd4:	d108      	bne.n	8003be8 <HAL_UART_Transmit+0x80>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d104      	bne.n	8003be8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e003      	b.n	8003bf0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bf8:	e02d      	b.n	8003c56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fcc2 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e039      	b.n	8003c88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c26:	b292      	uxth	r2, r2
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e008      	b.n	8003c44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cb      	bne.n	8003bfa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fc8e 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e005      	b.n	8003c88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d12c      	bne.n	8003d00 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Receive_IT+0x22>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e025      	b.n	8003d02 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Receive_IT+0x34>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e01e      	b.n	8003d02 <HAL_UART_Receive_IT+0x72>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cee:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fcc6 	bl	8004688 <UART_Start_Receive_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d113      	bne.n	8003d64 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 81cc 	beq.w	80040f2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
      }
      return;
 8003d62:	e1c6      	b.n	80040f2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80e3 	beq.w	8003f32 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4ba5      	ldr	r3, [pc, #660]	; (8004010 <HAL_UART_IRQHandler+0x304>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80d8 	beq.w	8003f32 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_UART_IRQHandler+0xa2>
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_UART_IRQHandler+0xce>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_UART_IRQHandler+0xfa>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	f043 0202 	orr.w	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_UART_IRQHandler+0x15e>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8140 	beq.w	80040f6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d004      	beq.n	8003eba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d031      	beq.n	8003f1e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fc6c 	bl	8004798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d123      	bne.n	8003f16 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d013      	beq.n	8003f0e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <HAL_UART_IRQHandler+0x308>)
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f846 	bl	8001f84 <HAL_DMA_Abort_IT>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d017      	beq.n	8003f2e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	e00f      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f906 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e00b      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f902 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8fe 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f2c:	e0e3      	b.n	80040f6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	bf00      	nop
    return;
 8003f30:	e0e1      	b.n	80040f6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80a7 	bne.w	800408a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a1 	beq.w	800408a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 809b 	beq.w	800408a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d156      	bne.n	8004018 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80bf 	beq.w	80040fa <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f82:	893a      	ldrh	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	f080 80b8 	bcs.w	80040fa <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d02a      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fca:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0210 	bic.w	r2, r2, #16
 8003fe6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd ff90 	bl	8001f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f894 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800400c:	e075      	b.n	80040fa <HAL_UART_IRQHandler+0x3ee>
 800400e:	bf00      	nop
 8004010:	04000120 	.word	0x04000120
 8004014:	080047f7 	.word	0x080047f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004024:	b29b      	uxth	r3, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d063      	beq.n	80040fe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d060      	beq.n	80040fe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800404a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0210 	bic.w	r2, r2, #16
 800407c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f856 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004088:	e039      	b.n	80040fe <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <HAL_UART_IRQHandler+0x3a4>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fca7 	bl	80049fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ae:	e029      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01a      	beq.n	8004102 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
    }
    return;
 80040d4:	e015      	b.n	8004102 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d011      	beq.n	8004104 <HAL_UART_IRQHandler+0x3f8>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb99 	bl	8004822 <UART_EndTransmit_IT>
    return;
 80040f0:	e008      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
      return;
 80040f2:	bf00      	nop
 80040f4:	e006      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
    return;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
      return;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
      return;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_UART_IRQHandler+0x3f8>
    return;
 8004102:	bf00      	nop
  }

}
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop

0800410c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8a      	ldr	r3, [pc, #552]	; (80043a0 <UART_SetConfig+0x254>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a78      	ldr	r2, [pc, #480]	; (80043a4 <UART_SetConfig+0x258>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d120      	bne.n	800420a <UART_SetConfig+0xbe>
 80041c8:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <UART_SetConfig+0x25c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d817      	bhi.n	8004204 <UART_SetConfig+0xb8>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x90>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041ff 	.word	0x080041ff
 80041e8:	080041f3 	.word	0x080041f3
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e01d      	b.n	800422e <UART_SetConfig+0xe2>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e01a      	b.n	800422e <UART_SetConfig+0xe2>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e017      	b.n	800422e <UART_SetConfig+0xe2>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e014      	b.n	800422e <UART_SetConfig+0xe2>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e011      	b.n	800422e <UART_SetConfig+0xe2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <UART_SetConfig+0x260>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d102      	bne.n	800421a <UART_SetConfig+0xce>
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e009      	b.n	800422e <UART_SetConfig+0xe2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a64      	ldr	r2, [pc, #400]	; (80043b0 <UART_SetConfig+0x264>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d102      	bne.n	800422a <UART_SetConfig+0xde>
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e001      	b.n	800422e <UART_SetConfig+0xe2>
 800422a:	2310      	movs	r3, #16
 800422c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004236:	d15b      	bne.n	80042f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d827      	bhi.n	800428e <UART_SetConfig+0x142>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xf8>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004269 	.word	0x08004269
 8004248:	08004271 	.word	0x08004271
 800424c:	08004279 	.word	0x08004279
 8004250:	0800428f 	.word	0x0800428f
 8004254:	0800427f 	.word	0x0800427f
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800428f 	.word	0x0800428f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7ff fa5a 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 800426c:	61b8      	str	r0, [r7, #24]
        break;
 800426e:	e013      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7ff fa78 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8004274:	61b8      	str	r0, [r7, #24]
        break;
 8004276:	e00f      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b4e      	ldr	r3, [pc, #312]	; (80043b4 <UART_SetConfig+0x268>)
 800427a:	61bb      	str	r3, [r7, #24]
        break;
 800427c:	e00c      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7ff f9d9 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 8004282:	61b8      	str	r0, [r7, #24]
        break;
 8004284:	e008      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	61bb      	str	r3, [r7, #24]
        break;
 800428c:	e004      	b.n	8004298 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	77bb      	strb	r3, [r7, #30]
        break;
 8004296:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d074      	beq.n	8004388 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	005a      	lsls	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b0f      	cmp	r3, #15
 80042ba:	d916      	bls.n	80042ea <UART_SetConfig+0x19e>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d212      	bcs.n	80042ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f023 030f 	bic.w	r3, r3, #15
 80042cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	b29a      	uxth	r2, r3
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	4313      	orrs	r3, r2
 80042de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	89fa      	ldrh	r2, [r7, #14]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e04e      	b.n	8004388 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77bb      	strb	r3, [r7, #30]
 80042ee:	e04b      	b.n	8004388 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d827      	bhi.n	8004346 <UART_SetConfig+0x1fa>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x1b0>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	08004347 	.word	0x08004347
 800430c:	08004337 	.word	0x08004337
 8004310:	08004347 	.word	0x08004347
 8004314:	08004347 	.word	0x08004347
 8004318:	08004347 	.word	0x08004347
 800431c:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7ff f9fe 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8004324:	61b8      	str	r0, [r7, #24]
        break;
 8004326:	e013      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004328:	f7ff fa1c 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <UART_SetConfig+0x268>)
 8004332:	61bb      	str	r3, [r7, #24]
        break;
 8004334:	e00c      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7ff f97d 	bl	8003634 <HAL_RCC_GetSysClockFreq>
 800433a:	61b8      	str	r0, [r7, #24]
        break;
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e004      	b.n	8004350 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	77bb      	strb	r3, [r7, #30]
        break;
 800434e:	bf00      	nop
    }

    if (pclk != 0U)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	085a      	lsrs	r2, r3, #1
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d908      	bls.n	8004384 <UART_SetConfig+0x238>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d204      	bcs.n	8004384 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	e001      	b.n	8004388 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004394:	7fbb      	ldrb	r3, [r7, #30]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	efff69f3 	.word	0xefff69f3
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01a      	beq.n	80044ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b6:	d10a      	bne.n	80044ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800450c:	f7fc fc5a 	bl	8000dc4 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d10e      	bne.n	800453e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f82d 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e023      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d10e      	bne.n	800456a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f817 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00d      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e05e      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d05a      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fc fc0c 	bl	8000dc4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11b      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e043      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02c      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d124      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800461c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800462c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d091      	beq.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	d10e      	bne.n	80046da <UART_Start_Receive_IT+0x52>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <UART_Start_Receive_IT+0x48>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ce:	e02d      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	22ff      	movs	r2, #255	; 0xff
 80046d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d8:	e028      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <UART_Start_Receive_IT+0x76>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <UART_Start_Receive_IT+0x6c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	22ff      	movs	r2, #255	; 0xff
 80046ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f2:	e01b      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	227f      	movs	r2, #127	; 0x7f
 80046f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046fc:	e016      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004706:	d10d      	bne.n	8004724 <UART_Start_Receive_IT+0x9c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <UART_Start_Receive_IT+0x92>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	227f      	movs	r2, #127	; 0x7f
 8004714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004718:	e008      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	223f      	movs	r2, #63	; 0x3f
 800471e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004722:	e003      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004752:	d107      	bne.n	8004764 <UART_Start_Receive_IT+0xdc>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d103      	bne.n	8004764 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <UART_Start_Receive_IT+0x108>)
 8004760:	665a      	str	r2, [r3, #100]	; 0x64
 8004762:	e002      	b.n	800476a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <UART_Start_Receive_IT+0x10c>)
 8004768:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004780:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	08004929 	.word	0x08004929
 8004794:	08004855 	.word	0x08004855

08004798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff fc83 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004838:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff fc60 	bl	800410c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004862:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d151      	bne.n	8004910 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004872:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004874:	89bb      	ldrh	r3, [r7, #12]
 8004876:	b2d9      	uxtb	r1, r3
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	400a      	ands	r2, r1
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d138      	bne.n	8004920 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048bc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10f      	bne.n	8004902 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0210 	bic.w	r2, r2, #16
 80048f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fc1a 	bl	8004134 <HAL_UARTEx_RxEventCallback>
 8004900:	e002      	b.n	8004908 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fb fd2c 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800490e:	e007      	b.n	8004920 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004936:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493c:	2b22      	cmp	r3, #34	; 0x22
 800493e:	d151      	bne.n	80049e4 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004946:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800494e:	89ba      	ldrh	r2, [r7, #12]
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	4013      	ands	r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d138      	bne.n	80049f4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004990:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10f      	bne.n	80049d6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0210 	bic.w	r2, r2, #16
 80049c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fbb0 	bl	8004134 <HAL_UARTEx_RxEventCallback>
 80049d4:	e002      	b.n	80049dc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb fcc2 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049e2:	e007      	b.n	80049f4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0208 	orr.w	r2, r2, #8
 80049f2:	619a      	str	r2, [r3, #24]
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <__errno>:
 8004a10:	4b01      	ldr	r3, [pc, #4]	; (8004a18 <__errno+0x8>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000010 	.word	0x20000010

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 fc4e 	bl	80052d0 <_init>
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08005364 	.word	0x08005364
 8004a58:	08005364 	.word	0x08005364
 8004a5c:	08005364 	.word	0x08005364
 8004a60:	0800536c 	.word	0x0800536c

08004a64 <memset>:
 8004a64:	4402      	add	r2, r0
 8004a66:	4603      	mov	r3, r0
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <memset+0xa>
 8004a6c:	4770      	bx	lr
 8004a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a72:	e7f9      	b.n	8004a68 <memset+0x4>

08004a74 <siprintf>:
 8004a74:	b40e      	push	{r1, r2, r3}
 8004a76:	b500      	push	{lr}
 8004a78:	b09c      	sub	sp, #112	; 0x70
 8004a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a7c:	9002      	str	r0, [sp, #8]
 8004a7e:	9006      	str	r0, [sp, #24]
 8004a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a84:	4809      	ldr	r0, [pc, #36]	; (8004aac <siprintf+0x38>)
 8004a86:	9107      	str	r1, [sp, #28]
 8004a88:	9104      	str	r1, [sp, #16]
 8004a8a:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <siprintf+0x3c>)
 8004a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a90:	9105      	str	r1, [sp, #20]
 8004a92:	6800      	ldr	r0, [r0, #0]
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	a902      	add	r1, sp, #8
 8004a98:	f000 f868 	bl	8004b6c <_svfiprintf_r>
 8004a9c:	9b02      	ldr	r3, [sp, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	b01c      	add	sp, #112	; 0x70
 8004aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004aa8:	b003      	add	sp, #12
 8004aaa:	4770      	bx	lr
 8004aac:	20000010 	.word	0x20000010
 8004ab0:	ffff0208 	.word	0xffff0208

08004ab4 <__ssputs_r>:
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	688e      	ldr	r6, [r1, #8]
 8004aba:	429e      	cmp	r6, r3
 8004abc:	4682      	mov	sl, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4690      	mov	r8, r2
 8004ac2:	461f      	mov	r7, r3
 8004ac4:	d838      	bhi.n	8004b38 <__ssputs_r+0x84>
 8004ac6:	898a      	ldrh	r2, [r1, #12]
 8004ac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004acc:	d032      	beq.n	8004b34 <__ssputs_r+0x80>
 8004ace:	6825      	ldr	r5, [r4, #0]
 8004ad0:	6909      	ldr	r1, [r1, #16]
 8004ad2:	eba5 0901 	sub.w	r9, r5, r1
 8004ad6:	6965      	ldr	r5, [r4, #20]
 8004ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004adc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	444b      	add	r3, r9
 8004ae4:	106d      	asrs	r5, r5, #1
 8004ae6:	429d      	cmp	r5, r3
 8004ae8:	bf38      	it	cc
 8004aea:	461d      	movcc	r5, r3
 8004aec:	0553      	lsls	r3, r2, #21
 8004aee:	d531      	bpl.n	8004b54 <__ssputs_r+0xa0>
 8004af0:	4629      	mov	r1, r5
 8004af2:	f000 fb47 	bl	8005184 <_malloc_r>
 8004af6:	4606      	mov	r6, r0
 8004af8:	b950      	cbnz	r0, 8004b10 <__ssputs_r+0x5c>
 8004afa:	230c      	movs	r3, #12
 8004afc:	f8ca 3000 	str.w	r3, [sl]
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	6921      	ldr	r1, [r4, #16]
 8004b12:	464a      	mov	r2, r9
 8004b14:	f000 fabe 	bl	8005094 <memcpy>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	6126      	str	r6, [r4, #16]
 8004b26:	6165      	str	r5, [r4, #20]
 8004b28:	444e      	add	r6, r9
 8004b2a:	eba5 0509 	sub.w	r5, r5, r9
 8004b2e:	6026      	str	r6, [r4, #0]
 8004b30:	60a5      	str	r5, [r4, #8]
 8004b32:	463e      	mov	r6, r7
 8004b34:	42be      	cmp	r6, r7
 8004b36:	d900      	bls.n	8004b3a <__ssputs_r+0x86>
 8004b38:	463e      	mov	r6, r7
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	4641      	mov	r1, r8
 8004b40:	f000 fab6 	bl	80050b0 <memmove>
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	1b9b      	subs	r3, r3, r6
 8004b4a:	4432      	add	r2, r6
 8004b4c:	60a3      	str	r3, [r4, #8]
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	2000      	movs	r0, #0
 8004b52:	e7db      	b.n	8004b0c <__ssputs_r+0x58>
 8004b54:	462a      	mov	r2, r5
 8004b56:	f000 fb6f 	bl	8005238 <_realloc_r>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d1e1      	bne.n	8004b24 <__ssputs_r+0x70>
 8004b60:	6921      	ldr	r1, [r4, #16]
 8004b62:	4650      	mov	r0, sl
 8004b64:	f000 fabe 	bl	80050e4 <_free_r>
 8004b68:	e7c7      	b.n	8004afa <__ssputs_r+0x46>
	...

08004b6c <_svfiprintf_r>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4698      	mov	r8, r3
 8004b72:	898b      	ldrh	r3, [r1, #12]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	b09d      	sub	sp, #116	; 0x74
 8004b78:	4607      	mov	r7, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	d50e      	bpl.n	8004b9e <_svfiprintf_r+0x32>
 8004b80:	690b      	ldr	r3, [r1, #16]
 8004b82:	b963      	cbnz	r3, 8004b9e <_svfiprintf_r+0x32>
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	f000 fafd 	bl	8005184 <_malloc_r>
 8004b8a:	6028      	str	r0, [r5, #0]
 8004b8c:	6128      	str	r0, [r5, #16]
 8004b8e:	b920      	cbnz	r0, 8004b9a <_svfiprintf_r+0x2e>
 8004b90:	230c      	movs	r3, #12
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	e0d1      	b.n	8004d3e <_svfiprintf_r+0x1d2>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	616b      	str	r3, [r5, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d58 <_svfiprintf_r+0x1ec>
 8004bb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bb6:	f04f 0901 	mov.w	r9, #1
 8004bba:	4623      	mov	r3, r4
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc2:	b10a      	cbz	r2, 8004bc8 <_svfiprintf_r+0x5c>
 8004bc4:	2a25      	cmp	r2, #37	; 0x25
 8004bc6:	d1f9      	bne.n	8004bbc <_svfiprintf_r+0x50>
 8004bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bcc:	d00b      	beq.n	8004be6 <_svfiprintf_r+0x7a>
 8004bce:	465b      	mov	r3, fp
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ff6d 	bl	8004ab4 <__ssputs_r>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f000 80aa 	beq.w	8004d34 <_svfiprintf_r+0x1c8>
 8004be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be2:	445a      	add	r2, fp
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a2 	beq.w	8004d34 <_svfiprintf_r+0x1c8>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfa:	f10a 0a01 	add.w	sl, sl, #1
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9307      	str	r3, [sp, #28]
 8004c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c06:	931a      	str	r3, [sp, #104]	; 0x68
 8004c08:	4654      	mov	r4, sl
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	4851      	ldr	r0, [pc, #324]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004c12:	f7fb fae5 	bl	80001e0 <memchr>
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	b9d8      	cbnz	r0, 8004c52 <_svfiprintf_r+0xe6>
 8004c1a:	06d0      	lsls	r0, r2, #27
 8004c1c:	bf44      	itt	mi
 8004c1e:	2320      	movmi	r3, #32
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c24:	0711      	lsls	r1, r2, #28
 8004c26:	bf44      	itt	mi
 8004c28:	232b      	movmi	r3, #43	; 0x2b
 8004c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c32:	2b2a      	cmp	r3, #42	; 0x2a
 8004c34:	d015      	beq.n	8004c62 <_svfiprintf_r+0xf6>
 8004c36:	9a07      	ldr	r2, [sp, #28]
 8004c38:	4654      	mov	r4, sl
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4621      	mov	r1, r4
 8004c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c46:	3b30      	subs	r3, #48	; 0x30
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d94e      	bls.n	8004cea <_svfiprintf_r+0x17e>
 8004c4c:	b1b0      	cbz	r0, 8004c7c <_svfiprintf_r+0x110>
 8004c4e:	9207      	str	r2, [sp, #28]
 8004c50:	e014      	b.n	8004c7c <_svfiprintf_r+0x110>
 8004c52:	eba0 0308 	sub.w	r3, r0, r8
 8004c56:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	46a2      	mov	sl, r4
 8004c60:	e7d2      	b.n	8004c08 <_svfiprintf_r+0x9c>
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	1d19      	adds	r1, r3, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	9103      	str	r1, [sp, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfbb      	ittet	lt
 8004c6e:	425b      	neglt	r3, r3
 8004c70:	f042 0202 	orrlt.w	r2, r2, #2
 8004c74:	9307      	strge	r3, [sp, #28]
 8004c76:	9307      	strlt	r3, [sp, #28]
 8004c78:	bfb8      	it	lt
 8004c7a:	9204      	strlt	r2, [sp, #16]
 8004c7c:	7823      	ldrb	r3, [r4, #0]
 8004c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c80:	d10c      	bne.n	8004c9c <_svfiprintf_r+0x130>
 8004c82:	7863      	ldrb	r3, [r4, #1]
 8004c84:	2b2a      	cmp	r3, #42	; 0x2a
 8004c86:	d135      	bne.n	8004cf4 <_svfiprintf_r+0x188>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	9203      	str	r2, [sp, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bfb8      	it	lt
 8004c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c98:	3402      	adds	r4, #2
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d68 <_svfiprintf_r+0x1fc>
 8004ca0:	7821      	ldrb	r1, [r4, #0]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	f7fb fa9b 	bl	80001e0 <memchr>
 8004caa:	b140      	cbz	r0, 8004cbe <_svfiprintf_r+0x152>
 8004cac:	2340      	movs	r3, #64	; 0x40
 8004cae:	eba0 000a 	sub.w	r0, r0, sl
 8004cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	4303      	orrs	r3, r0
 8004cba:	3401      	adds	r4, #1
 8004cbc:	9304      	str	r3, [sp, #16]
 8004cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc2:	4826      	ldr	r0, [pc, #152]	; (8004d5c <_svfiprintf_r+0x1f0>)
 8004cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cc8:	2206      	movs	r2, #6
 8004cca:	f7fb fa89 	bl	80001e0 <memchr>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d038      	beq.n	8004d44 <_svfiprintf_r+0x1d8>
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004cd4:	bb1b      	cbnz	r3, 8004d1e <_svfiprintf_r+0x1b2>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	3308      	adds	r3, #8
 8004ce0:	9303      	str	r3, [sp, #12]
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	4433      	add	r3, r6
 8004ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce8:	e767      	b.n	8004bba <_svfiprintf_r+0x4e>
 8004cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	e7a5      	b.n	8004c40 <_svfiprintf_r+0xd4>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	3401      	adds	r4, #1
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 0c0a 	mov.w	ip, #10
 8004d00:	4620      	mov	r0, r4
 8004d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d06:	3a30      	subs	r2, #48	; 0x30
 8004d08:	2a09      	cmp	r2, #9
 8004d0a:	d903      	bls.n	8004d14 <_svfiprintf_r+0x1a8>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0c5      	beq.n	8004c9c <_svfiprintf_r+0x130>
 8004d10:	9105      	str	r1, [sp, #20]
 8004d12:	e7c3      	b.n	8004c9c <_svfiprintf_r+0x130>
 8004d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d18:	4604      	mov	r4, r0
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e7f0      	b.n	8004d00 <_svfiprintf_r+0x194>
 8004d1e:	ab03      	add	r3, sp, #12
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	462a      	mov	r2, r5
 8004d24:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <_svfiprintf_r+0x1f8>)
 8004d26:	a904      	add	r1, sp, #16
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f3af 8000 	nop.w
 8004d2e:	1c42      	adds	r2, r0, #1
 8004d30:	4606      	mov	r6, r0
 8004d32:	d1d6      	bne.n	8004ce2 <_svfiprintf_r+0x176>
 8004d34:	89ab      	ldrh	r3, [r5, #12]
 8004d36:	065b      	lsls	r3, r3, #25
 8004d38:	f53f af2c 	bmi.w	8004b94 <_svfiprintf_r+0x28>
 8004d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3e:	b01d      	add	sp, #116	; 0x74
 8004d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <_svfiprintf_r+0x1f8>)
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f000 f87a 	bl	8004e48 <_printf_i>
 8004d54:	e7eb      	b.n	8004d2e <_svfiprintf_r+0x1c2>
 8004d56:	bf00      	nop
 8004d58:	08005330 	.word	0x08005330
 8004d5c:	0800533a 	.word	0x0800533a
 8004d60:	00000000 	.word	0x00000000
 8004d64:	08004ab5 	.word	0x08004ab5
 8004d68:	08005336 	.word	0x08005336

08004d6c <_printf_common>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	4616      	mov	r6, r2
 8004d72:	4699      	mov	r9, r3
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	690b      	ldr	r3, [r1, #16]
 8004d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bfb8      	it	lt
 8004d80:	4613      	movlt	r3, r2
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d88:	4607      	mov	r7, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b10a      	cbz	r2, 8004d92 <_printf_common+0x26>
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	0699      	lsls	r1, r3, #26
 8004d96:	bf42      	ittt	mi
 8004d98:	6833      	ldrmi	r3, [r6, #0]
 8004d9a:	3302      	addmi	r3, #2
 8004d9c:	6033      	strmi	r3, [r6, #0]
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	f015 0506 	ands.w	r5, r5, #6
 8004da4:	d106      	bne.n	8004db4 <_printf_common+0x48>
 8004da6:	f104 0a19 	add.w	sl, r4, #25
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	6832      	ldr	r2, [r6, #0]
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	42ab      	cmp	r3, r5
 8004db2:	dc26      	bgt.n	8004e02 <_printf_common+0x96>
 8004db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db8:	1e13      	subs	r3, r2, #0
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	0692      	lsls	r2, r2, #26
 8004dc2:	d42b      	bmi.n	8004e1c <_printf_common+0xb0>
 8004dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c0      	blx	r8
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d01e      	beq.n	8004e10 <_printf_common+0xa4>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	68e5      	ldr	r5, [r4, #12]
 8004dd6:	6832      	ldr	r2, [r6, #0]
 8004dd8:	f003 0306 	and.w	r3, r3, #6
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	bf08      	it	eq
 8004de0:	1aad      	subeq	r5, r5, r2
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	6922      	ldr	r2, [r4, #16]
 8004de6:	bf0c      	ite	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	2500      	movne	r5, #0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bfc4      	itt	gt
 8004df2:	1a9b      	subgt	r3, r3, r2
 8004df4:	18ed      	addgt	r5, r5, r3
 8004df6:	2600      	movs	r6, #0
 8004df8:	341a      	adds	r4, #26
 8004dfa:	42b5      	cmp	r5, r6
 8004dfc:	d11a      	bne.n	8004e34 <_printf_common+0xc8>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e008      	b.n	8004e14 <_printf_common+0xa8>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4652      	mov	r2, sl
 8004e06:	4649      	mov	r1, r9
 8004e08:	4638      	mov	r0, r7
 8004e0a:	47c0      	blx	r8
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d103      	bne.n	8004e18 <_printf_common+0xac>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	3501      	adds	r5, #1
 8004e1a:	e7c6      	b.n	8004daa <_printf_common+0x3e>
 8004e1c:	18e1      	adds	r1, r4, r3
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	2030      	movs	r0, #48	; 0x30
 8004e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e26:	4422      	add	r2, r4
 8004e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e30:	3302      	adds	r3, #2
 8004e32:	e7c7      	b.n	8004dc4 <_printf_common+0x58>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4622      	mov	r2, r4
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	47c0      	blx	r8
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0e6      	beq.n	8004e10 <_printf_common+0xa4>
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7d9      	b.n	8004dfa <_printf_common+0x8e>
	...

08004e48 <_printf_i>:
 8004e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	4691      	mov	r9, r2
 8004e50:	7e27      	ldrb	r7, [r4, #24]
 8004e52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e54:	2f78      	cmp	r7, #120	; 0x78
 8004e56:	4680      	mov	r8, r0
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e5e:	d807      	bhi.n	8004e70 <_printf_i+0x28>
 8004e60:	2f62      	cmp	r7, #98	; 0x62
 8004e62:	d80a      	bhi.n	8004e7a <_printf_i+0x32>
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	f000 80d8 	beq.w	800501a <_printf_i+0x1d2>
 8004e6a:	2f58      	cmp	r7, #88	; 0x58
 8004e6c:	f000 80a3 	beq.w	8004fb6 <_printf_i+0x16e>
 8004e70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e78:	e03a      	b.n	8004ef0 <_printf_i+0xa8>
 8004e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e7e:	2b15      	cmp	r3, #21
 8004e80:	d8f6      	bhi.n	8004e70 <_printf_i+0x28>
 8004e82:	a001      	add	r0, pc, #4	; (adr r0, 8004e88 <_printf_i+0x40>)
 8004e84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004e71 	.word	0x08004e71
 8004e94:	08004e71 	.word	0x08004e71
 8004e98:	08004e71 	.word	0x08004e71
 8004e9c:	08004e71 	.word	0x08004e71
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004e71 	.word	0x08004e71
 8004ea8:	08004e71 	.word	0x08004e71
 8004eac:	08004e71 	.word	0x08004e71
 8004eb0:	08004e71 	.word	0x08004e71
 8004eb4:	08005001 	.word	0x08005001
 8004eb8:	08004f25 	.word	0x08004f25
 8004ebc:	08004fe3 	.word	0x08004fe3
 8004ec0:	08004e71 	.word	0x08004e71
 8004ec4:	08004e71 	.word	0x08004e71
 8004ec8:	08005023 	.word	0x08005023
 8004ecc:	08004e71 	.word	0x08004e71
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	08004e71 	.word	0x08004e71
 8004ed8:	08004e71 	.word	0x08004e71
 8004edc:	08004feb 	.word	0x08004feb
 8004ee0:	680b      	ldr	r3, [r1, #0]
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	600a      	str	r2, [r1, #0]
 8004ee8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0a3      	b.n	800503c <_printf_i+0x1f4>
 8004ef4:	6825      	ldr	r5, [r4, #0]
 8004ef6:	6808      	ldr	r0, [r1, #0]
 8004ef8:	062e      	lsls	r6, r5, #24
 8004efa:	f100 0304 	add.w	r3, r0, #4
 8004efe:	d50a      	bpl.n	8004f16 <_printf_i+0xce>
 8004f00:	6805      	ldr	r5, [r0, #0]
 8004f02:	600b      	str	r3, [r1, #0]
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	da03      	bge.n	8004f10 <_printf_i+0xc8>
 8004f08:	232d      	movs	r3, #45	; 0x2d
 8004f0a:	426d      	negs	r5, r5
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	485e      	ldr	r0, [pc, #376]	; (800508c <_printf_i+0x244>)
 8004f12:	230a      	movs	r3, #10
 8004f14:	e019      	b.n	8004f4a <_printf_i+0x102>
 8004f16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f1a:	6805      	ldr	r5, [r0, #0]
 8004f1c:	600b      	str	r3, [r1, #0]
 8004f1e:	bf18      	it	ne
 8004f20:	b22d      	sxthne	r5, r5
 8004f22:	e7ef      	b.n	8004f04 <_printf_i+0xbc>
 8004f24:	680b      	ldr	r3, [r1, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	1d18      	adds	r0, r3, #4
 8004f2a:	6008      	str	r0, [r1, #0]
 8004f2c:	0628      	lsls	r0, r5, #24
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0xec>
 8004f30:	681d      	ldr	r5, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0xf2>
 8004f34:	0669      	lsls	r1, r5, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0xe8>
 8004f38:	881d      	ldrh	r5, [r3, #0]
 8004f3a:	4854      	ldr	r0, [pc, #336]	; (800508c <_printf_i+0x244>)
 8004f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f3e:	bf0c      	ite	eq
 8004f40:	2308      	moveq	r3, #8
 8004f42:	230a      	movne	r3, #10
 8004f44:	2100      	movs	r1, #0
 8004f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f4a:	6866      	ldr	r6, [r4, #4]
 8004f4c:	60a6      	str	r6, [r4, #8]
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	bfa2      	ittt	ge
 8004f52:	6821      	ldrge	r1, [r4, #0]
 8004f54:	f021 0104 	bicge.w	r1, r1, #4
 8004f58:	6021      	strge	r1, [r4, #0]
 8004f5a:	b90d      	cbnz	r5, 8004f60 <_printf_i+0x118>
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	d04d      	beq.n	8004ffc <_printf_i+0x1b4>
 8004f60:	4616      	mov	r6, r2
 8004f62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f66:	fb03 5711 	mls	r7, r3, r1, r5
 8004f6a:	5dc7      	ldrb	r7, [r0, r7]
 8004f6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f70:	462f      	mov	r7, r5
 8004f72:	42bb      	cmp	r3, r7
 8004f74:	460d      	mov	r5, r1
 8004f76:	d9f4      	bls.n	8004f62 <_printf_i+0x11a>
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d10b      	bne.n	8004f94 <_printf_i+0x14c>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07df      	lsls	r7, r3, #31
 8004f80:	d508      	bpl.n	8004f94 <_printf_i+0x14c>
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	6861      	ldr	r1, [r4, #4]
 8004f86:	4299      	cmp	r1, r3
 8004f88:	bfde      	ittt	le
 8004f8a:	2330      	movle	r3, #48	; 0x30
 8004f8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f94:	1b92      	subs	r2, r2, r6
 8004f96:	6122      	str	r2, [r4, #16]
 8004f98:	f8cd a000 	str.w	sl, [sp]
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	aa03      	add	r2, sp, #12
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f7ff fee2 	bl	8004d6c <_printf_common>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d14c      	bne.n	8005046 <_printf_i+0x1fe>
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	b004      	add	sp, #16
 8004fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb6:	4835      	ldr	r0, [pc, #212]	; (800508c <_printf_i+0x244>)
 8004fb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	680e      	ldr	r6, [r1, #0]
 8004fc0:	061f      	lsls	r7, r3, #24
 8004fc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fc6:	600e      	str	r6, [r1, #0]
 8004fc8:	d514      	bpl.n	8004ff4 <_printf_i+0x1ac>
 8004fca:	07d9      	lsls	r1, r3, #31
 8004fcc:	bf44      	itt	mi
 8004fce:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd2:	6023      	strmi	r3, [r4, #0]
 8004fd4:	b91d      	cbnz	r5, 8004fde <_printf_i+0x196>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f023 0320 	bic.w	r3, r3, #32
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	2310      	movs	r3, #16
 8004fe0:	e7b0      	b.n	8004f44 <_printf_i+0xfc>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f043 0320 	orr.w	r3, r3, #32
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	2378      	movs	r3, #120	; 0x78
 8004fec:	4828      	ldr	r0, [pc, #160]	; (8005090 <_printf_i+0x248>)
 8004fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ff2:	e7e3      	b.n	8004fbc <_printf_i+0x174>
 8004ff4:	065e      	lsls	r6, r3, #25
 8004ff6:	bf48      	it	mi
 8004ff8:	b2ad      	uxthmi	r5, r5
 8004ffa:	e7e6      	b.n	8004fca <_printf_i+0x182>
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	e7bb      	b.n	8004f78 <_printf_i+0x130>
 8005000:	680b      	ldr	r3, [r1, #0]
 8005002:	6826      	ldr	r6, [r4, #0]
 8005004:	6960      	ldr	r0, [r4, #20]
 8005006:	1d1d      	adds	r5, r3, #4
 8005008:	600d      	str	r5, [r1, #0]
 800500a:	0635      	lsls	r5, r6, #24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	d501      	bpl.n	8005014 <_printf_i+0x1cc>
 8005010:	6018      	str	r0, [r3, #0]
 8005012:	e002      	b.n	800501a <_printf_i+0x1d2>
 8005014:	0671      	lsls	r1, r6, #25
 8005016:	d5fb      	bpl.n	8005010 <_printf_i+0x1c8>
 8005018:	8018      	strh	r0, [r3, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	4616      	mov	r6, r2
 8005020:	e7ba      	b.n	8004f98 <_printf_i+0x150>
 8005022:	680b      	ldr	r3, [r1, #0]
 8005024:	1d1a      	adds	r2, r3, #4
 8005026:	600a      	str	r2, [r1, #0]
 8005028:	681e      	ldr	r6, [r3, #0]
 800502a:	6862      	ldr	r2, [r4, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	4630      	mov	r0, r6
 8005030:	f7fb f8d6 	bl	80001e0 <memchr>
 8005034:	b108      	cbz	r0, 800503a <_printf_i+0x1f2>
 8005036:	1b80      	subs	r0, r0, r6
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	2300      	movs	r3, #0
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	e7a8      	b.n	8004f98 <_printf_i+0x150>
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	4632      	mov	r2, r6
 800504a:	4649      	mov	r1, r9
 800504c:	4640      	mov	r0, r8
 800504e:	47d0      	blx	sl
 8005050:	3001      	adds	r0, #1
 8005052:	d0ab      	beq.n	8004fac <_printf_i+0x164>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	079b      	lsls	r3, r3, #30
 8005058:	d413      	bmi.n	8005082 <_printf_i+0x23a>
 800505a:	68e0      	ldr	r0, [r4, #12]
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	4298      	cmp	r0, r3
 8005060:	bfb8      	it	lt
 8005062:	4618      	movlt	r0, r3
 8005064:	e7a4      	b.n	8004fb0 <_printf_i+0x168>
 8005066:	2301      	movs	r3, #1
 8005068:	4632      	mov	r2, r6
 800506a:	4649      	mov	r1, r9
 800506c:	4640      	mov	r0, r8
 800506e:	47d0      	blx	sl
 8005070:	3001      	adds	r0, #1
 8005072:	d09b      	beq.n	8004fac <_printf_i+0x164>
 8005074:	3501      	adds	r5, #1
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	9903      	ldr	r1, [sp, #12]
 800507a:	1a5b      	subs	r3, r3, r1
 800507c:	42ab      	cmp	r3, r5
 800507e:	dcf2      	bgt.n	8005066 <_printf_i+0x21e>
 8005080:	e7eb      	b.n	800505a <_printf_i+0x212>
 8005082:	2500      	movs	r5, #0
 8005084:	f104 0619 	add.w	r6, r4, #25
 8005088:	e7f5      	b.n	8005076 <_printf_i+0x22e>
 800508a:	bf00      	nop
 800508c:	08005341 	.word	0x08005341
 8005090:	08005352 	.word	0x08005352

08005094 <memcpy>:
 8005094:	440a      	add	r2, r1
 8005096:	4291      	cmp	r1, r2
 8005098:	f100 33ff 	add.w	r3, r0, #4294967295
 800509c:	d100      	bne.n	80050a0 <memcpy+0xc>
 800509e:	4770      	bx	lr
 80050a0:	b510      	push	{r4, lr}
 80050a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d1f9      	bne.n	80050a2 <memcpy+0xe>
 80050ae:	bd10      	pop	{r4, pc}

080050b0 <memmove>:
 80050b0:	4288      	cmp	r0, r1
 80050b2:	b510      	push	{r4, lr}
 80050b4:	eb01 0402 	add.w	r4, r1, r2
 80050b8:	d902      	bls.n	80050c0 <memmove+0x10>
 80050ba:	4284      	cmp	r4, r0
 80050bc:	4623      	mov	r3, r4
 80050be:	d807      	bhi.n	80050d0 <memmove+0x20>
 80050c0:	1e43      	subs	r3, r0, #1
 80050c2:	42a1      	cmp	r1, r4
 80050c4:	d008      	beq.n	80050d8 <memmove+0x28>
 80050c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ce:	e7f8      	b.n	80050c2 <memmove+0x12>
 80050d0:	4402      	add	r2, r0
 80050d2:	4601      	mov	r1, r0
 80050d4:	428a      	cmp	r2, r1
 80050d6:	d100      	bne.n	80050da <memmove+0x2a>
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050e2:	e7f7      	b.n	80050d4 <memmove+0x24>

080050e4 <_free_r>:
 80050e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d048      	beq.n	800517c <_free_r+0x98>
 80050ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ee:	9001      	str	r0, [sp, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f1a1 0404 	sub.w	r4, r1, #4
 80050f6:	bfb8      	it	lt
 80050f8:	18e4      	addlt	r4, r4, r3
 80050fa:	f000 f8d3 	bl	80052a4 <__malloc_lock>
 80050fe:	4a20      	ldr	r2, [pc, #128]	; (8005180 <_free_r+0x9c>)
 8005100:	9801      	ldr	r0, [sp, #4]
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	4615      	mov	r5, r2
 8005106:	b933      	cbnz	r3, 8005116 <_free_r+0x32>
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	6014      	str	r4, [r2, #0]
 800510c:	b003      	add	sp, #12
 800510e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005112:	f000 b8cd 	b.w	80052b0 <__malloc_unlock>
 8005116:	42a3      	cmp	r3, r4
 8005118:	d90b      	bls.n	8005132 <_free_r+0x4e>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	1862      	adds	r2, r4, r1
 800511e:	4293      	cmp	r3, r2
 8005120:	bf04      	itt	eq
 8005122:	681a      	ldreq	r2, [r3, #0]
 8005124:	685b      	ldreq	r3, [r3, #4]
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	bf04      	itt	eq
 800512a:	1852      	addeq	r2, r2, r1
 800512c:	6022      	streq	r2, [r4, #0]
 800512e:	602c      	str	r4, [r5, #0]
 8005130:	e7ec      	b.n	800510c <_free_r+0x28>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x58>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x4e>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x78>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1dd      	bne.n	800510c <_free_r+0x28>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7d7      	b.n	800510c <_free_r+0x28>
 800515c:	d902      	bls.n	8005164 <_free_r+0x80>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d3      	b.n	800510c <_free_r+0x28>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7c7      	b.n	800510c <_free_r+0x28>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	2000019c 	.word	0x2000019c

08005184 <_malloc_r>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	1ccd      	adds	r5, r1, #3
 8005188:	f025 0503 	bic.w	r5, r5, #3
 800518c:	3508      	adds	r5, #8
 800518e:	2d0c      	cmp	r5, #12
 8005190:	bf38      	it	cc
 8005192:	250c      	movcc	r5, #12
 8005194:	2d00      	cmp	r5, #0
 8005196:	4606      	mov	r6, r0
 8005198:	db01      	blt.n	800519e <_malloc_r+0x1a>
 800519a:	42a9      	cmp	r1, r5
 800519c:	d903      	bls.n	80051a6 <_malloc_r+0x22>
 800519e:	230c      	movs	r3, #12
 80051a0:	6033      	str	r3, [r6, #0]
 80051a2:	2000      	movs	r0, #0
 80051a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a6:	f000 f87d 	bl	80052a4 <__malloc_lock>
 80051aa:	4921      	ldr	r1, [pc, #132]	; (8005230 <_malloc_r+0xac>)
 80051ac:	680a      	ldr	r2, [r1, #0]
 80051ae:	4614      	mov	r4, r2
 80051b0:	b99c      	cbnz	r4, 80051da <_malloc_r+0x56>
 80051b2:	4f20      	ldr	r7, [pc, #128]	; (8005234 <_malloc_r+0xb0>)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	b923      	cbnz	r3, 80051c2 <_malloc_r+0x3e>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 f862 	bl	8005284 <_sbrk_r>
 80051c0:	6038      	str	r0, [r7, #0]
 80051c2:	4629      	mov	r1, r5
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f85d 	bl	8005284 <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d123      	bne.n	8005216 <_malloc_r+0x92>
 80051ce:	230c      	movs	r3, #12
 80051d0:	6033      	str	r3, [r6, #0]
 80051d2:	4630      	mov	r0, r6
 80051d4:	f000 f86c 	bl	80052b0 <__malloc_unlock>
 80051d8:	e7e3      	b.n	80051a2 <_malloc_r+0x1e>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	1b5b      	subs	r3, r3, r5
 80051de:	d417      	bmi.n	8005210 <_malloc_r+0x8c>
 80051e0:	2b0b      	cmp	r3, #11
 80051e2:	d903      	bls.n	80051ec <_malloc_r+0x68>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	441c      	add	r4, r3
 80051e8:	6025      	str	r5, [r4, #0]
 80051ea:	e004      	b.n	80051f6 <_malloc_r+0x72>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	42a2      	cmp	r2, r4
 80051f0:	bf0c      	ite	eq
 80051f2:	600b      	streq	r3, [r1, #0]
 80051f4:	6053      	strne	r3, [r2, #4]
 80051f6:	4630      	mov	r0, r6
 80051f8:	f000 f85a 	bl	80052b0 <__malloc_unlock>
 80051fc:	f104 000b 	add.w	r0, r4, #11
 8005200:	1d23      	adds	r3, r4, #4
 8005202:	f020 0007 	bic.w	r0, r0, #7
 8005206:	1ac2      	subs	r2, r0, r3
 8005208:	d0cc      	beq.n	80051a4 <_malloc_r+0x20>
 800520a:	1a1b      	subs	r3, r3, r0
 800520c:	50a3      	str	r3, [r4, r2]
 800520e:	e7c9      	b.n	80051a4 <_malloc_r+0x20>
 8005210:	4622      	mov	r2, r4
 8005212:	6864      	ldr	r4, [r4, #4]
 8005214:	e7cc      	b.n	80051b0 <_malloc_r+0x2c>
 8005216:	1cc4      	adds	r4, r0, #3
 8005218:	f024 0403 	bic.w	r4, r4, #3
 800521c:	42a0      	cmp	r0, r4
 800521e:	d0e3      	beq.n	80051e8 <_malloc_r+0x64>
 8005220:	1a21      	subs	r1, r4, r0
 8005222:	4630      	mov	r0, r6
 8005224:	f000 f82e 	bl	8005284 <_sbrk_r>
 8005228:	3001      	adds	r0, #1
 800522a:	d1dd      	bne.n	80051e8 <_malloc_r+0x64>
 800522c:	e7cf      	b.n	80051ce <_malloc_r+0x4a>
 800522e:	bf00      	nop
 8005230:	2000019c 	.word	0x2000019c
 8005234:	200001a0 	.word	0x200001a0

08005238 <_realloc_r>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	4607      	mov	r7, r0
 800523c:	4614      	mov	r4, r2
 800523e:	460e      	mov	r6, r1
 8005240:	b921      	cbnz	r1, 800524c <_realloc_r+0x14>
 8005242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005246:	4611      	mov	r1, r2
 8005248:	f7ff bf9c 	b.w	8005184 <_malloc_r>
 800524c:	b922      	cbnz	r2, 8005258 <_realloc_r+0x20>
 800524e:	f7ff ff49 	bl	80050e4 <_free_r>
 8005252:	4625      	mov	r5, r4
 8005254:	4628      	mov	r0, r5
 8005256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005258:	f000 f830 	bl	80052bc <_malloc_usable_size_r>
 800525c:	42a0      	cmp	r0, r4
 800525e:	d20f      	bcs.n	8005280 <_realloc_r+0x48>
 8005260:	4621      	mov	r1, r4
 8005262:	4638      	mov	r0, r7
 8005264:	f7ff ff8e 	bl	8005184 <_malloc_r>
 8005268:	4605      	mov	r5, r0
 800526a:	2800      	cmp	r0, #0
 800526c:	d0f2      	beq.n	8005254 <_realloc_r+0x1c>
 800526e:	4631      	mov	r1, r6
 8005270:	4622      	mov	r2, r4
 8005272:	f7ff ff0f 	bl	8005094 <memcpy>
 8005276:	4631      	mov	r1, r6
 8005278:	4638      	mov	r0, r7
 800527a:	f7ff ff33 	bl	80050e4 <_free_r>
 800527e:	e7e9      	b.n	8005254 <_realloc_r+0x1c>
 8005280:	4635      	mov	r5, r6
 8005282:	e7e7      	b.n	8005254 <_realloc_r+0x1c>

08005284 <_sbrk_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d06      	ldr	r5, [pc, #24]	; (80052a0 <_sbrk_r+0x1c>)
 8005288:	2300      	movs	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	4608      	mov	r0, r1
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	f7fb fccc 	bl	8000c2c <_sbrk>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_sbrk_r+0x1a>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_sbrk_r+0x1a>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	200004b4 	.word	0x200004b4

080052a4 <__malloc_lock>:
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__malloc_lock+0x8>)
 80052a6:	f000 b811 	b.w	80052cc <__retarget_lock_acquire_recursive>
 80052aa:	bf00      	nop
 80052ac:	200004bc 	.word	0x200004bc

080052b0 <__malloc_unlock>:
 80052b0:	4801      	ldr	r0, [pc, #4]	; (80052b8 <__malloc_unlock+0x8>)
 80052b2:	f000 b80c 	b.w	80052ce <__retarget_lock_release_recursive>
 80052b6:	bf00      	nop
 80052b8:	200004bc 	.word	0x200004bc

080052bc <_malloc_usable_size_r>:
 80052bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c0:	1f18      	subs	r0, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bfbc      	itt	lt
 80052c6:	580b      	ldrlt	r3, [r1, r0]
 80052c8:	18c0      	addlt	r0, r0, r3
 80052ca:	4770      	bx	lr

080052cc <__retarget_lock_acquire_recursive>:
 80052cc:	4770      	bx	lr

080052ce <__retarget_lock_release_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
