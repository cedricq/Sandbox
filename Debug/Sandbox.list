
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a710  0800a710  0001a710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab84  0800ab84  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab84  0800ab84  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab84  0800ab84  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ab90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001f4  0800ad84  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800ad84  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d5c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  00039f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0003d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e803  00000000  00000000  0003fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192ea  00000000  00000000  0005e363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b146e  00000000  00000000  0007764d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006988  00000000  00000000  00128b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6f4 	.word	0x0800a6f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800a6f4 	.word	0x0800a6f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_ZN6BufferC1Ev>:
{
	BufferSerialInstance.AddChar(c);
}


Buffer::Buffer()
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	23ff      	movs	r3, #255	; 0xff
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f006 feef 	bl	800799c <memset>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
{}
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_Z41__static_initialization_and_destruction_0ii>:
	{
		c = ReadChar();
		str[i] = c;
		i++;
	}
}
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d107      	bne.n	8000bf8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d102      	bne.n	8000bf8 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Buffer BufferSerialInstance;
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000bf4:	f7ff ffd8 	bl	8000ba8 <_ZN6BufferC1Ev>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000210 	.word	0x20000210

08000c04 <_GLOBAL__sub_I_serial_add_char>:
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff ffe3 	bl	8000bd8 <_Z41__static_initialization_and_destruction_0ii>
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SF04_CheckCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
 8000c20:	4613      	mov	r3, r2
 8000c22:	70bb      	strb	r3, [r7, #2]
    uint8_t crc = 0xFF;
 8000c24:	23ff      	movs	r3, #255	; 0xff
 8000c26:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73bb      	strb	r3, [r7, #14]
 8000c2c:	e021      	b.n	8000c72 <SF04_CheckCrc+0x5e>
    {
        crc ^= (data[byteCtr]);
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	4053      	eors	r3, r2
 8000c3a:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	737b      	strb	r3, [r7, #13]
 8000c40:	e011      	b.n	8000c66 <SF04_CheckCrc+0x52>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	da07      	bge.n	8000c5a <SF04_CheckCrc+0x46>
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e002      	b.n	8000c60 <SF04_CheckCrc+0x4c>
            else crc = (crc << 1);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000c60:	7b7b      	ldrb	r3, [r7, #13]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	737b      	strb	r3, [r7, #13]
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1ea      	bne.n	8000c42 <SF04_CheckCrc+0x2e>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73bb      	strb	r3, [r7, #14]
 8000c72:	7bba      	ldrb	r2, [r7, #14]
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d3d9      	bcc.n	8000c2e <SF04_CheckCrc+0x1a>
        }
    }
    if (crc != checksum) return CHECKSUM_ERROR;
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	78bb      	ldrb	r3, [r7, #2]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d001      	beq.n	8000c86 <SF04_CheckCrc+0x72>
 8000c82:	2304      	movs	r3, #4
 8000c84:	e000      	b.n	8000c88 <SF04_CheckCrc+0x74>
    else return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SF04_CalcCrc>:
// nbrOfBytes checksum is built for n bytes of data
// checksum expected checksum
//return: error: CHECKSUM_ERROR = checksum does not match
// 0 = checksum matches
//============================================================
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	73fb      	strb	r3, [r7, #15]
    uint8_t byteCtr;
    //calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73bb      	strb	r3, [r7, #14]
 8000ca8:	e021      	b.n	8000cee <SF04_CalcCrc+0x5a>
    {
        crc ^= (data[byteCtr]);
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	4053      	eors	r3, r2
 8000cb6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000cb8:	2308      	movs	r3, #8
 8000cba:	737b      	strb	r3, [r7, #13]
 8000cbc:	e011      	b.n	8000ce2 <SF04_CalcCrc+0x4e>
        {
            if (crc & 0x80) crc = (crc << 1) ^ POLYNOMIAL;
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	da07      	bge.n	8000cd6 <SF04_CalcCrc+0x42>
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e002      	b.n	8000cdc <SF04_CalcCrc+0x48>
            else crc = (crc << 1);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
        for (uint8_t bit = 8; bit > 0; --bit)
 8000cdc:	7b7b      	ldrb	r3, [r7, #13]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	737b      	strb	r3, [r7, #13]
 8000ce2:	7b7b      	ldrb	r3, [r7, #13]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1ea      	bne.n	8000cbe <SF04_CalcCrc+0x2a>
    for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr)
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	3301      	adds	r3, #1
 8000cec:	73bb      	strb	r3, [r7, #14]
 8000cee:	7bba      	ldrb	r2, [r7, #14]
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3d9      	bcc.n	8000caa <SF04_CalcCrc+0x16>
        }
    }
    return crc;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <printFloatsTelePlot>:
    HAL_UART_Transmit_DMA(&huart3, buffer, strlen(buffer));
}


void printFloatsTelePlot(float in[], char const* names[], int size)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b0d9      	sub	sp, #356	; 0x164
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	6018      	str	r0, [r3, #0]
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	6019      	str	r1, [r3, #0]
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	601a      	str	r2, [r3, #0]
    char buffer[256]="";
 8000d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	3304      	adds	r3, #4
 8000d24:	22fc      	movs	r2, #252	; 0xfc
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 fe37 	bl	800799c <memset>

    for (int i = 0; i < size; i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d34:	e038      	b.n	8000da8 <printFloatsTelePlot+0xa4>
    {
        char txt[64];
        sprintf(txt, ">%s:%.2f", names[i], in[i]);
 8000d36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	f107 0208 	add.w	r2, r7, #8
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	681c      	ldr	r4, [r3, #0]
 8000d46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	f107 020c 	add.w	r2, r7, #12
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbf6 	bl	8000548 <__aeabi_f2d>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	f107 0014 	add.w	r0, r7, #20
 8000d64:	e9cd 2300 	strd	r2, r3, [sp]
 8000d68:	4622      	mov	r2, r4
 8000d6a:	491b      	ldr	r1, [pc, #108]	; (8000dd8 <printFloatsTelePlot+0xd4>)
 8000d6c:	f007 fa88 	bl	8008280 <siprintf>
        strcat(buffer, txt);
 8000d70:	f107 0214 	add.w	r2, r7, #20
 8000d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f007 faa0 	bl	80082c0 <strcat>
        strcat(buffer, "\r\n");
 8000d80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fa23 	bl	80001d0 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d92:	4413      	add	r3, r2
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <printFloatsTelePlot+0xd8>)
 8000d96:	8811      	ldrh	r1, [r2, #0]
 8000d98:	7892      	ldrb	r2, [r2, #2]
 8000d9a:	8019      	strh	r1, [r3, #0]
 8000d9c:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < size; i++)
 8000d9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbc0      	blt.n	8000d36 <printFloatsTelePlot+0x32>
    }

    //sprintf(buffer, ">test:%d", 10);
    //strcat(buffer, "\r\n");

    HAL_UART_Transmit_DMA(&huart3, buffer, strlen(buffer));
 8000db4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fa09 	bl	80001d0 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <printFloatsTelePlot+0xdc>)
 8000dca:	f005 fbc3 	bl	8006554 <HAL_UART_Transmit_DMA>
}
 8000dce:	bf00      	nop
 8000dd0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	0800a74c 	.word	0x0800a74c
 8000ddc:	0800a758 	.word	0x0800a758
 8000de0:	20000334 	.word	0x20000334

08000de4 <VoltageTo01mbar>:

const int32_t PRESSURE_OFFSET   = 300;
const int32_t PRESSURE_GAIN     = 60000;

int32_t VoltageTo01mbar(int32_t volt)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    return ( ( ( volt - 33 ) * 13790 ) / 264 ) - 6895;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b21      	subs	r3, #33	; 0x21
 8000df0:	f243 52de 	movw	r2, #13790	; 0x35de
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <VoltageTo01mbar+0x34>)
 8000dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfe:	1192      	asrs	r2, r2, #6
 8000e00:	17db      	asrs	r3, r3, #31
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f5a3 53d7 	sub.w	r3, r3, #6880	; 0x1ae0
 8000e08:	3b0f      	subs	r3, #15
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	3e0f83e1 	.word	0x3e0f83e1

08000e1c <RawADCToVolt>:

int32_t RawADCToVolt(int32_t raw)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    return raw * 330 / MAX_RAW_ADC;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e32:	fb93 f3f2 	sdiv	r3, r3, r2
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <RawSFM3019ToLmin>:

int32_t RawSFM3019ToLmin(int32_t raw)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    return ( 100 * ( raw + 24576 ) ) / 170;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000e52:	2264      	movs	r2, #100	; 0x64
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <RawSFM3019ToLmin+0x2c>)
 8000e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5e:	1192      	asrs	r2, r2, #6
 8000e60:	17db      	asrs	r3, r3, #31
 8000e62:	1ad3      	subs	r3, r2, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	60606061 	.word	0x60606061

08000e74 <RawToCal>:

int32_t RawToCal(int32_t raw, int32_t max_cal, int32_t max_raw)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
    return (raw * max_cal) / max_raw;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	fb02 f203 	mul.w	r2, r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <UpdatePWM1>:

void UpdatePWM1(uint32_t per1000)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    TIM15->CCR1 = (per1000 * 2400) /1000;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <UpdatePWM1+0x2c>)
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <UpdatePWM1+0x30>)
 8000eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8000eb6:	099b      	lsrs	r3, r3, #6
 8000eb8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40014000 	.word	0x40014000
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <UpdatePWM2>:

void UpdatePWM2(uint32_t per1000)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    TIM15->CCR2 = (per1000 * 2400) /1000;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <UpdatePWM2+0x2c>)
 8000ee4:	4906      	ldr	r1, [pc, #24]	; (8000f00 <UpdatePWM2+0x30>)
 8000ee6:	fba1 1303 	umull	r1, r3, r1, r3
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40014000 	.word	0x40014000
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <Tick_1ms>:


void Tick_1ms()
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
    // cmd_motor
    // Calculate new target motor
    // 3.3V - 4095 -> 45'000 rpm
    int error = target_motor_qout - Measures[MEAS_QOUT];
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <Tick_1ms+0x60>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <Tick_1ms+0x64>)
 8000f10:	6852      	ldr	r2, [r2, #4]
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	603b      	str	r3, [r7, #0]
    int cmd_target_tmp = (int)cmd_motor + (error / 200);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <Tick_1ms+0x68>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1192      	asrs	r2, r2, #6
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <Tick_1ms+0x6c>)
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	607b      	str	r3, [r7, #4]
    if (cmd_target_tmp < 0) cmd_target_tmp = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	da01      	bge.n	8000f36 <Tick_1ms+0x32>
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
    if (cmd_target_tmp > 4095) cmd_target_tmp = 4095;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3c:	db02      	blt.n	8000f44 <Tick_1ms+0x40>
 8000f3e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f42:	607b      	str	r3, [r7, #4]
    cmd_motor = (uint32_t)cmd_target_tmp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <Tick_1ms+0x6c>)
 8000f48:	6013      	str	r3, [r2, #0]
    DAC1->DHR12R1 = cmd_motor%4096;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <Tick_1ms+0x6c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <Tick_1ms+0x70>)
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	6093      	str	r3, [r2, #8]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000014 	.word	0x20000014
 8000f68:	200005f8 	.word	0x200005f8
 8000f6c:	51eb851f 	.word	0x51eb851f
 8000f70:	2000031c 	.word	0x2000031c
 8000f74:	40007400 	.word	0x40007400

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09a      	sub	sp, #104	; 0x68
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f001 f83f 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f971 	bl	8001268 <SystemClock_Config>
  //MX_USART3_UART_Init();
  //MX_DAC_Init();
  //MX_I2C1_Init();
  //MX_TIM15_Init();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f001 ffba 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>
  // ??? TODO: !!! Comment in MX_DMA_Init() : HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn); --> No interrupt required

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8c:	f000 fbec 	bl	8001768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f90:	f000 fb68 	bl	8001664 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f94:	f000 fbc6 	bl	8001724 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f98:	f000 f9ca 	bl	8001330 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f9c:	f000 fb92 	bl	80016c4 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8000fa0:	f000 fa4c 	bl	800143c <MX_DAC_Init>
  MX_I2C1_Init();
 8000fa4:	f000 fa7c 	bl	80014a0 <MX_I2C1_Init>
  MX_TIM15_Init();
 8000fa8:	f000 faba 	bl	8001520 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  UpdatePWM1(0);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ff75 	bl	8000e9c <UpdatePWM1>
  UpdatePWM2(0);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ff8c 	bl	8000ed0 <UpdatePWM2>
  TIM15->CCER |= TIM_CCER_CC1E;
 8000fb8:	4b98      	ldr	r3, [pc, #608]	; (800121c <main+0x2a4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a97      	ldr	r2, [pc, #604]	; (800121c <main+0x2a4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
  TIM15->CCER |= TIM_CCER_CC2E;
 8000fc4:	4b95      	ldr	r3, [pc, #596]	; (800121c <main+0x2a4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a94      	ldr	r2, [pc, #592]	; (800121c <main+0x2a4>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6213      	str	r3, [r2, #32]
  HAL_TIMEx_PWMN_Start(&htim15, HAL_TIM_ACTIVE_CHANNEL_1);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4893      	ldr	r0, [pc, #588]	; (8001220 <main+0x2a8>)
 8000fd4:	f005 f880 	bl	80060d8 <HAL_TIMEx_PWMN_Start>

  // !!! Start UART before ADC  !!! ////////
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4992      	ldr	r1, [pc, #584]	; (8001224 <main+0x2ac>)
 8000fdc:	4892      	ldr	r0, [pc, #584]	; (8001228 <main+0x2b0>)
 8000fde:	f005 fa6a 	bl	80064b6 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	4991      	ldr	r1, [pc, #580]	; (800122c <main+0x2b4>)
 8000fe6:	4892      	ldr	r0, [pc, #584]	; (8001230 <main+0x2b8>)
 8000fe8:	f001 fa38 	bl	800245c <HAL_ADC_Start_DMA>

  uint8_t test[3] = {0xBE, 0xEF, 0x00};
 8000fec:	4a91      	ldr	r2, [pc, #580]	; (8001234 <main+0x2bc>)
 8000fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	8019      	strh	r1, [r3, #0]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	0c12      	lsrs	r2, r2, #16
 8000ffc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SF04_CalcCrc (test, 2);
 8000ffe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001002:	2102      	movs	r1, #2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fe45 	bl	8000c94 <SF04_CalcCrc>
 800100a:	4603      	mov	r3, r0
 800100c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  test[2] = crc;
 8001010:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001014:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  uint8_t cmd[3] = {0x36, 0x08, 0x00};
 8001018:	4a87      	ldr	r2, [pc, #540]	; (8001238 <main+0x2c0>)
 800101a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	4611      	mov	r1, r2
 8001022:	8019      	strh	r1, [r3, #0]
 8001024:	3302      	adds	r3, #2
 8001026:	0c12      	lsrs	r2, r2, #16
 8001028:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd, 2);
 800102a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800102e:	2102      	movs	r1, #2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe2f 	bl	8000c94 <SF04_CalcCrc>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  cmd[2] = crc;
 800103c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001040:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

  uint8_t cmd_status[3] = {0xE1, 0x02, 0x00};
 8001044:	4a7d      	ldr	r2, [pc, #500]	; (800123c <main+0x2c4>)
 8001046:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	4611      	mov	r1, r2
 800104e:	8019      	strh	r1, [r3, #0]
 8001050:	3302      	adds	r3, #2
 8001052:	0c12      	lsrs	r2, r2, #16
 8001054:	701a      	strb	r2, [r3, #0]
  crc = SF04_CalcCrc (cmd_status, 2);
 8001056:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe19 	bl	8000c94 <SF04_CalcCrc>
 8001062:	4603      	mov	r3, r0
 8001064:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  cmd_status[2] = crc;
 8001068:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800106c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

  HAL_Delay(500);
 8001070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001074:	f001 f82a 	bl	80020cc <HAL_Delay>

  uint8_t i2c_state = I2C_INIT;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer [50];
  while (1)
  {
	  HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f001 f824 	bl	80020cc <HAL_Delay>

	  rawQout = -24576;
 8001084:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <main+0x2c8>)
 8001086:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <main+0x2cc>)
 8001088:	601a      	str	r2, [r3, #0]
	  if (i2c_state == I2C_INIT)
 800108a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800108e:	2b00      	cmp	r3, #0
 8001090:	d117      	bne.n	80010c2 <main+0x14a>
	  {
	      HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f001 f81a 	bl	80020cc <HAL_Delay>
	      uint8_t status = HAL_I2C_Master_Transmit(&hi2c1, SFM3219_ADDRESS<<1, cmd, 3, 1000);
 8001098:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2303      	movs	r3, #3
 80010a4:	215c      	movs	r1, #92	; 0x5c
 80010a6:	4868      	ldr	r0, [pc, #416]	; (8001248 <main+0x2d0>)
 80010a8:	f002 fc3a 	bl	8003920 <HAL_I2C_Master_Transmit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
          if (status == HAL_OK)
 80010b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d132      	bne.n	8001120 <main+0x1a8>
          {
              i2c_state = I2C_READ;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80010c0:	e02e      	b.n	8001120 <main+0x1a8>
          }
	  }
	  else if (i2c_state == I2C_READ)
 80010c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d12a      	bne.n	8001120 <main+0x1a8>
	  {
	      uint8_t i2c_rcv_buff[3] = {0x00, 0x00, 0x00};
 80010ca:	4a60      	ldr	r2, [pc, #384]	; (800124c <main+0x2d4>)
 80010cc:	463b      	mov	r3, r7
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	8019      	strh	r1, [r3, #0]
 80010d4:	3302      	adds	r3, #2
 80010d6:	0c12      	lsrs	r2, r2, #16
 80010d8:	701a      	strb	r2, [r3, #0]
	      uint8_t status = HAL_I2C_Master_Receive(&hi2c1, SFM3219_ADDRESS<<1, i2c_rcv_buff, 3, 1000);
 80010da:	463a      	mov	r2, r7
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2303      	movs	r3, #3
 80010e4:	215c      	movs	r1, #92	; 0x5c
 80010e6:	4858      	ldr	r0, [pc, #352]	; (8001248 <main+0x2d0>)
 80010e8:	f002 fd0e 	bl	8003b08 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	      if (status == HAL_OK)
 80010f2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d112      	bne.n	8001120 <main+0x1a8>
          {
	          if (SF04_CheckCrc (i2c_rcv_buff, 2, i2c_rcv_buff[2]) != CHECKSUM_ERROR)
 80010fa:	78ba      	ldrb	r2, [r7, #2]
 80010fc:	463b      	mov	r3, r7
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fd87 	bl	8000c14 <SF04_CheckCrc>
 8001106:	4603      	mov	r3, r0
 8001108:	2b04      	cmp	r3, #4
 800110a:	d009      	beq.n	8001120 <main+0x1a8>
	          {
	              rawQout = (int16_t)(((uint16_t)i2c_rcv_buff[0])<<8 | i2c_rcv_buff[0]);
 800110c:	783b      	ldrb	r3, [r7, #0]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	783b      	ldrb	r3, [r7, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b48      	ldr	r3, [pc, #288]	; (8001240 <main+0x2c8>)
 800111e:	601a      	str	r2, [r3, #0]
	          }
          }
	  }

	  UpdatePWM1(cmd_valve);
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <main+0x2d8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff feb9 	bl	8000e9c <UpdatePWM1>
	  UpdatePWM2(cmd_peep);
 800112a:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <main+0x2dc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fece 	bl	8000ed0 <UpdatePWM2>

	  Measures[MEAS_POUT]   = VoltageTo01mbar( RawADCToVolt( adc_buf[ADC_A1_PA0_POUT] ) );
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <main+0x2b4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fe6f 	bl	8000e1c <RawADCToVolt>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe4f 	bl	8000de4 <VoltageTo01mbar>
 8001146:	4603      	mov	r3, r0
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <main+0x2e0>)
 800114a:	6013      	str	r3, [r2, #0]
	  Measures[MEAS_QOUT]   = RawSFM3019ToLmin(rawQout);
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <main+0x2c8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe77 	bl	8000e44 <RawSFM3019ToLmin>
 8001156:	4603      	mov	r3, r0
 8001158:	4a3f      	ldr	r2, [pc, #252]	; (8001258 <main+0x2e0>)
 800115a:	6053      	str	r3, [r2, #4]
	  Measures[MEAS_S_MOT]  = RawToCal(adc_buf[ADC_A7_PC1_S_MOT], MAX_SPEED, MAX_RAW_ADC);
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <main+0x2b4>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001166:	f640 72ff 	movw	r2, #4095	; 0xfff
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fe82 	bl	8000e74 <RawToCal>
 8001170:	4603      	mov	r3, r0
 8001172:	4a39      	ldr	r2, [pc, #228]	; (8001258 <main+0x2e0>)
 8001174:	6113      	str	r3, [r2, #16]
	  Measures[MEAS_I_MOT]  = RawToCal(adc_buf[ADC_A6_PC0_I_MOT], MAX_CURRENT, MAX_RAW_ADC);
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x2b4>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001180:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fe75 	bl	8000e74 <RawToCal>
 800118a:	4603      	mov	r3, r0
 800118c:	4a32      	ldr	r2, [pc, #200]	; (8001258 <main+0x2e0>)
 800118e:	60d3      	str	r3, [r2, #12]

	  float tick = HAL_GetTick();
 8001190:	f000 ff90 	bl	80020b4 <HAL_GetTick>
 8001194:	ee07 0a90 	vmov	s15, r0
 8001198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  tick /= 1000;
 80011a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800125c <main+0x2e4>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	  float measures[5];
	  measures[0] = tick;
 80011b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b2:	607b      	str	r3, [r7, #4]
	  measures[1] = ((float)Measures[MEAS_QOUT])/100;
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <main+0x2e0>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001260 <main+0x2e8>
 80011c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c8:	edc7 7a02 	vstr	s15, [r7, #8]
	  measures[2] = ((float)Measures[MEAS_POUT])/100;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <main+0x2e0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001260 <main+0x2e8>
 80011dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]
	  measures[3] = ((float)Measures[MEAS_S_MOT]);
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <main+0x2e0>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f0:	edc7 7a04 	vstr	s15, [r7, #16]
	  measures[4] = ((float)Measures[MEAS_I_MOT])/100;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <main+0x2e0>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001260 <main+0x2e8>
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	edc7 7a05 	vstr	s15, [r7, #20]
	  //printFloats(measures, 5);
	  printFloatsTelePlot(measures, data_names, 5);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2205      	movs	r2, #5
 8001210:	4914      	ldr	r1, [pc, #80]	; (8001264 <main+0x2ec>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd76 	bl	8000d04 <printFloatsTelePlot>
  {
 8001218:	e731      	b.n	800107e <main+0x106>
 800121a:	bf00      	nop
 800121c:	40014000 	.word	0x40014000
 8001220:	20000404 	.word	0x20000404
 8001224:	20000450 	.word	0x20000450
 8001228:	20000334 	.word	0x20000334
 800122c:	20000650 	.word	0x20000650
 8001230:	20000594 	.word	0x20000594
 8001234:	0800a75c 	.word	0x0800a75c
 8001238:	0800a760 	.word	0x0800a760
 800123c:	0800a764 	.word	0x0800a764
 8001240:	20000318 	.word	0x20000318
 8001244:	ffffa000 	.word	0xffffa000
 8001248:	200003b8 	.word	0x200003b8
 800124c:	0800a768 	.word	0x0800a768
 8001250:	20000324 	.word	0x20000324
 8001254:	20000320 	.word	0x20000320
 8001258:	200005f8 	.word	0x200005f8
 800125c:	447a0000 	.word	0x447a0000
 8001260:	42c80000 	.word	0x42c80000
 8001264:	20000000 	.word	0x20000000

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09c      	sub	sp, #112	; 0x70
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fb90 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2234      	movs	r2, #52	; 0x34
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fb82 	bl	800799c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001298:	2303      	movs	r3, #3
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800129c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a6:	2301      	movs	r3, #1
 80012a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012aa:	2310      	movs	r3, #16
 80012ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 ffb8 	bl	8004238 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012ce:	f000 fac7 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 feaa 	bl	8005048 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012fa:	f000 fab1 	bl	8001860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM15
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <SystemClock_Config+0xc4>)
 8001300:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8ce 	bl	80054b4 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800131e:	f000 fa9f 	bl	8001860 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3770      	adds	r7, #112	; 0x70
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	000400a0 	.word	0x000400a0

08001330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001346:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <MX_ADC1_Init+0x108>)
 8001348:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800134c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <MX_ADC1_Init+0x108>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MX_ADC1_Init+0x108>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_ADC1_Init+0x108>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MX_ADC1_Init+0x108>)
 8001362:	2201      	movs	r2, #1
 8001364:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_ADC1_Init+0x108>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MX_ADC1_Init+0x108>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MX_ADC1_Init+0x108>)
 8001376:	2201      	movs	r2, #1
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MX_ADC1_Init+0x108>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_ADC1_Init+0x108>)
 8001382:	2204      	movs	r2, #4
 8001384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <MX_ADC1_Init+0x108>)
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_ADC1_Init+0x108>)
 8001390:	2204      	movs	r2, #4
 8001392:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_ADC1_Init+0x108>)
 8001396:	2200      	movs	r2, #0
 8001398:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <MX_ADC1_Init+0x108>)
 800139c:	2200      	movs	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <MX_ADC1_Init+0x108>)
 80013a2:	f000 fed5 	bl	8002150 <HAL_ADC_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80013ac:	f000 fa58 	bl	8001860 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80013bc:	2303      	movs	r3, #3
 80013be:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <MX_ADC1_Init+0x108>)
 80013ce:	f001 f8e1 	bl	8002594 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013d8:	f000 fa42 	bl	8001860 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013dc:	2302      	movs	r3, #2
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <MX_ADC1_Init+0x108>)
 80013ea:	f001 f8d3 	bl	8002594 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013f4:	f000 fa34 	bl	8001860 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013f8:	2306      	movs	r3, #6
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_ADC1_Init+0x108>)
 8001406:	f001 f8c5 	bl	8002594 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001410:	f000 fa26 	bl	8001860 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001414:	2307      	movs	r3, #7
 8001416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001418:	2304      	movs	r3, #4
 800141a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_ADC1_Init+0x108>)
 8001422:	f001 f8b7 	bl	8002594 <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800142c:	f000 fa18 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000594 	.word	0x20000594

0800143c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_DAC_Init+0x5c>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_DAC_Init+0x60>)
 8001450:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <MX_DAC_Init+0x5c>)
 8001454:	f001 fd95 	bl	8002f82 <HAL_DAC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800145e:	f000 f9ff 	bl	8001860 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <MX_DAC_Init+0x5c>)
 8001472:	f001 fddf 	bl	8003034 <HAL_DAC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800147c:	f000 f9f0 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  DAC1->DHR12R1 = 0;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_DAC_Init+0x60>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001486:	2100      	movs	r1, #0
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_DAC_Init+0x5c>)
 800148a:	f001 fd9c 	bl	8002fc6 <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200005e4 	.word	0x200005e4
 800149c:	40007400 	.word	0x40007400

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_I2C1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_I2C1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <MX_I2C1_Init+0x7c>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <MX_I2C1_Init+0x74>)
 80014dc:	f002 f990 	bl	8003800 <HAL_I2C_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014e6:	f000 f9bb 	bl	8001860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ee:	f002 fe0b 	bl	8004108 <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 f9b2 	bl	8001860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_I2C1_Init+0x74>)
 8001500:	f002 fe4d 	bl	800419e <HAL_I2CEx_ConfigDigitalFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 f9a9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200003b8 	.word	0x200003b8
 8001518:	40005400 	.word	0x40005400
 800151c:	2000090e 	.word	0x2000090e

08001520 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001526:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	222c      	movs	r2, #44	; 0x2c
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f006 fa25 	bl	800799c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <MX_TIM15_Init+0x13c>)
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <MX_TIM15_Init+0x140>)
 8001556:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <MX_TIM15_Init+0x13c>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <MX_TIM15_Init+0x13c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2400;
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <MX_TIM15_Init+0x13c>)
 8001566:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800156a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b3b      	ldr	r3, [pc, #236]	; (800165c <MX_TIM15_Init+0x13c>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <MX_TIM15_Init+0x13c>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <MX_TIM15_Init+0x13c>)
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800157e:	4837      	ldr	r0, [pc, #220]	; (800165c <MX_TIM15_Init+0x13c>)
 8001580:	f004 f92a 	bl	80057d8 <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 f969 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001596:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800159a:	4619      	mov	r1, r3
 800159c:	482f      	ldr	r0, [pc, #188]	; (800165c <MX_TIM15_Init+0x13c>)
 800159e:	f004 fe39 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 f95a 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4822      	ldr	r0, [pc, #136]	; (800165c <MX_TIM15_Init+0x13c>)
 80015d2:	f004 f959 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80015dc:	f000 f940 	bl	8001860 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_1);
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM15_Init+0x13c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM15_Init+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0208 	bic.w	r2, r2, #8
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f4:	2204      	movs	r2, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4818      	ldr	r0, [pc, #96]	; (800165c <MX_TIM15_Init+0x13c>)
 80015fa:	f004 f945 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001604:	f000 f92c 	bl	8001860 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_2);
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_TIM15_Init+0x13c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <MX_TIM15_Init+0x13c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM15_Init+0x13c>)
 8001640:	f004 fe4e 	bl	80062e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 800164a:	f000 f909 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM15_Init+0x13c>)
 8001650:	f000 fa7c 	bl	8001b4c <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3758      	adds	r7, #88	; 0x58
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000404 	.word	0x20000404
 8001660:	40014000 	.word	0x40014000

08001664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <MX_USART2_UART_Init+0x5c>)
 800166c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001670:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART2_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART2_UART_Init+0x58>)
 80016a8:	f004 feb7 	bl	800641a <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 f8d5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000660 	.word	0x20000660
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_USART3_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART3_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART3_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART3_UART_Init+0x58>)
 8001708:	f004 fe87 	bl	800641a <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f8a5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000334 	.word	0x20000334
 8001720:	40004800 	.word	0x40004800

08001724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_DMA_Init+0x40>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <MX_DMA_Init+0x40>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_DMA_Init+0x40>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	200b      	movs	r0, #11
 8001748:	f001 fbe5 	bl	8002f16 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	200c      	movs	r0, #12
 8001752:	f001 fbe0 	bl	8002f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001756:	200c      	movs	r0, #12
 8001758:	f001 fbf9 	bl	8002f4e <HAL_NVIC_EnableIRQ>

}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <MX_GPIO_Init+0xec>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a34      	ldr	r2, [pc, #208]	; (8001854 <MX_GPIO_Init+0xec>)
 8001784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001788:	6153      	str	r3, [r2, #20]
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <MX_GPIO_Init+0xec>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_GPIO_Init+0xec>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <MX_GPIO_Init+0xec>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_GPIO_Init+0xec>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_GPIO_Init+0xec>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <MX_GPIO_Init+0xec>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_GPIO_Init+0xec>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_GPIO_Init+0xec>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <MX_GPIO_Init+0xec>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_GPIO_Init+0xec>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_GPIO_Init+0xf0>)
 80017e6:	f001 fff3 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	481b      	ldr	r0, [pc, #108]	; (800185c <MX_GPIO_Init+0xf4>)
 80017f0:	f001 ffee 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_GPIO_Init+0xf4>)
 800180c:	f001 fe6e 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <MX_GPIO_Init+0xf0>)
 800182a:	f001 fe5f 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001836:	2302      	movs	r3, #2
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_GPIO_Init+0xf4>)
 8001846:	f001 fe51 	bl	80034ec <HAL_GPIO_Init>

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x44>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_MspInit+0x44>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x44>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x44>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x44>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x44>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f001 fb2c 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d4:	d165      	bne.n	80019a2 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a34      	ldr	r2, [pc, #208]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191e:	2303      	movs	r3, #3
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	481f      	ldr	r0, [pc, #124]	; (80019b0 <HAL_ADC_MspInit+0xfc>)
 8001932:	f001 fddb 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001936:	2303      	movs	r3, #3
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193a:	2303      	movs	r3, #3
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194c:	f001 fdce 	bl	80034ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_ADC_MspInit+0x104>)
 8001954:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 800196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800196e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001976:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 800197a:	2220      	movs	r2, #32
 800197c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001984:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 8001988:	f001 fba1 	bl	80030ce <HAL_DMA_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001992:	f7ff ff65 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 800199a:	639a      	str	r2, [r3, #56]	; 0x38
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_ADC_MspInit+0x100>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000800 	.word	0x48000800
 80019b4:	2000060c 	.word	0x2000060c
 80019b8:	40020008 	.word	0x40020008

080019bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_DAC_MspInit+0x74>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d124      	bne.n	8001a28 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 80019e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_DAC_MspInit+0x78>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a0e:	2310      	movs	r3, #16
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a12:	2303      	movs	r3, #3
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f001 fd62 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40007400 	.word	0x40007400
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_I2C_MspInit+0xc8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d14d      	bne.n	8001af6 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6153      	str	r3, [r2, #20]
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a90:	2312      	movs	r3, #18
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aaa:	f001 fd1f 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab2:	2312      	movs	r3, #18
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <HAL_I2C_MspInit+0xd0>)
 8001aca:	f001 fd0f 	bl	80034ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201f      	movs	r0, #31
 8001aec:	f001 fa13 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001af0:	201f      	movs	r0, #31
 8001af2:	f001 fa2c 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40005400 	.word	0x40005400
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000400 	.word	0x48000400

08001b0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_TIM_PWM_MspInit+0x38>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10b      	bne.n	8001b36 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6193      	str	r3, [r2, #24]
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40014000 	.word	0x40014000
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_TIM_MspPostInit+0x88>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d12d      	bne.n	8001bca <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_TIM_MspPostInit+0x8c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_TIM_MspPostInit+0x8c>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6153      	str	r3, [r2, #20]
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_TIM_MspPostInit+0x8c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480e      	ldr	r0, [pc, #56]	; (8001bdc <HAL_TIM_MspPostInit+0x90>)
 8001ba4:	f001 fca2 	bl	80034ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_TIM_MspPostInit+0x90>)
 8001bc6:	f001 fc91 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	48000400 	.word	0x48000400

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_UART_MspInit+0x148>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d131      	bne.n	8001c66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c32:	230c      	movs	r3, #12
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f001 fc4c 	bl	80034ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	2026      	movs	r0, #38	; 0x26
 8001c5a:	f001 f95c 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c5e:	2026      	movs	r0, #38	; 0x26
 8001c60:	f001 f975 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c64:	e05b      	b.n	8001d1e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_UART_MspInit+0x150>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d156      	bne.n	8001d1e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7a:	61d3      	str	r3, [r2, #28]
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c92:	6153      	str	r3, [r2, #20]
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_UART_MspInit+0x14c>)
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481d      	ldr	r0, [pc, #116]	; (8001d34 <HAL_UART_MspInit+0x154>)
 8001cbe:	f001 fc15 	bl	80034ec <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_UART_MspInit+0x15c>)
 8001cc6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cca:	2210      	movs	r2, #16
 8001ccc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001cf2:	4811      	ldr	r0, [pc, #68]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001cf4:	f001 f9eb 	bl	80030ce <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001cfe:	f7ff fdaf 	bl	8001860 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001d06:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_UART_MspInit+0x158>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2027      	movs	r0, #39	; 0x27
 8001d14:	f001 f8ff 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d18:	2027      	movs	r0, #39	; 0x27
 8001d1a:	f001 f918 	bl	8002f4e <HAL_NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3730      	adds	r7, #48	; 0x30
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40004800 	.word	0x40004800
 8001d34:	48000400 	.word	0x48000400
 8001d38:	20000550 	.word	0x20000550
 8001d3c:	4002001c 	.word	0x4002001c

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8c:	f000 f97e 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Tick_1ms();
 8001d90:	f7ff f8b8 	bl	8000f04 <Tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DMA1_Channel1_IRQHandler+0x10>)
 8001d9e:	f001 fab3 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000060c 	.word	0x2000060c

08001dac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Channel2_IRQHandler+0x10>)
 8001db2:	f001 faa9 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000550 	.word	0x20000550

08001dc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <I2C1_EV_IRQHandler+0x10>)
 8001dc6:	f001 ff95 	bl	8003cf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003b8 	.word	0x200003b8

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f004 fc4b 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000660 	.word	0x20000660

08001de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <USART3_IRQHandler+0x10>)
 8001dee:	f004 fc41 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000334 	.word	0x20000334

08001dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_kill>:

int _kill(int pid, int sig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e16:	f005 fd97 	bl	8007948 <__errno>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2216      	movs	r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_exit>:

void _exit (int status)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffe7 	bl	8001e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e3e:	e7fe      	b.n	8001e3e <_exit+0x12>

08001e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e00a      	b.n	8001e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e52:	f3af 8000 	nop.w
 8001e56:	4601      	mov	r1, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf0      	blt.n	8001e52 <_read+0x12>
	}

return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e009      	b.n	8001ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf1      	blt.n	8001e8c <_write+0x12>
	}
	return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f005 fcfc 	bl	8007948 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20004000 	.word	0x20004000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000328 	.word	0x20000328
 8001f84:	200006f8 	.word	0x200006f8

08001f88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc8:	4c0b      	ldr	r4, [pc, #44]	; (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fd6:	f7ff ffd7 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f005 fcbb 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7fe ffcb 	bl	8000f78 <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fe4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ff0:	0800ab90 	.word	0x0800ab90
  ldr r2, =_sbss
 8001ff4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001ff8:	200006f8 	.word	0x200006f8

08001ffc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_IRQHandler>
	...

08002000 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_Init+0x28>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_Init+0x28>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 ff75 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	2000      	movs	r0, #0
 8002018:	f000 f808 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7ff fc26 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 ff8d 	bl	8002f6a <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 ff55 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000018 	.word	0x20000018
 8002084:	20000020 	.word	0x20000020
 8002088:	2000001c 	.word	0x2000001c

0800208c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000020 	.word	0x20000020
 80020b0:	200006e4 	.word	0x200006e4

080020b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200006e4 	.word	0x200006e4

080020cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000020 	.word	0x20000020

08002114 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09a      	sub	sp, #104	; 0x68
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e169      	b.n	8002444 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d176      	bne.n	8002270 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d152      	bne.n	8002230 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fb85 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d13b      	bne.n	8002230 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fd6b 	bl	8002c94 <ADC_Disable>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d12f      	bne.n	8002230 <HAL_ADC_Init+0xe0>
 80021d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12b      	bne.n	8002230 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e0:	f023 0302 	bic.w	r3, r3, #2
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800220a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800220c:	4b8f      	ldr	r3, [pc, #572]	; (800244c <HAL_ADC_Init+0x2fc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a8f      	ldr	r2, [pc, #572]	; (8002450 <HAL_ADC_Init+0x300>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9a      	lsrs	r2, r3, #18
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002222:	e002      	b.n	800222a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3b01      	subs	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f9      	bne.n	8002224 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800224c:	d110      	bne.n	8002270 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f023 0312 	bic.w	r3, r3, #18
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 80d6 	bne.w	800242a <HAL_ADC_Init+0x2da>
 800227e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80d1 	bne.w	800242a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 80c9 	bne.w	800242a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <HAL_ADC_Init+0x304>)
 80022aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d108      	bne.n	80022d0 <HAL_ADC_Init+0x180>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_Init+0x180>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_ADC_Init+0x182>
 80022d0:	2300      	movs	r3, #0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11c      	bne.n	8002310 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d010      	beq.n	80022fe <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_ADC_Init+0x1a8>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_Init+0x1a8>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_ADC_Init+0x1aa>
 80022f8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d108      	bne.n	8002310 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	431a      	orrs	r2, r3
 800230c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e5b      	ldrb	r3, [r3, #25]
 8002314:	035b      	lsls	r3, r3, #13
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800231a:	2a01      	cmp	r2, #1
 800231c:	d002      	beq.n	8002324 <HAL_ADC_Init+0x1d4>
 800231e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002322:	e000      	b.n	8002326 <HAL_ADC_Init+0x1d6>
 8002324:	2200      	movs	r2, #0
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4313      	orrs	r3, r2
 8002334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002336:	4313      	orrs	r3, r2
 8002338:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d11b      	bne.n	800237c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e5b      	ldrb	r3, [r3, #25]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	3b01      	subs	r3, #1
 8002352:	045a      	lsls	r2, r3, #17
 8002354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002356:	4313      	orrs	r3, r2
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
 800235e:	e00d      	b.n	800237c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	f043 0201 	orr.w	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	4313      	orrs	r3, r2
 800238e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002390:	4313      	orrs	r3, r2
 8002392:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d114      	bne.n	80023cc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b0:	f023 0302 	bic.w	r3, r3, #2
 80023b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7e1b      	ldrb	r3, [r3, #24]
 80023ba:	039a      	lsls	r2, r3, #14
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4313      	orrs	r3, r2
 80023c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c8:	4313      	orrs	r3, r2
 80023ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_ADC_Init+0x308>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10c      	bne.n	8002402 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f023 010f 	bic.w	r1, r3, #15
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002400:	e007      	b.n	8002412 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020f 	bic.w	r2, r2, #15
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f023 0303 	bic.w	r3, r3, #3
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
 8002428:	e00a      	b.n	8002440 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f023 0312 	bic.w	r3, r3, #18
 8002432:	f043 0210 	orr.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002444:	4618      	mov	r0, r3
 8002446:	3768      	adds	r7, #104	; 0x68
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000018 	.word	0x20000018
 8002450:	431bde83 	.word	0x431bde83
 8002454:	50000300 	.word	0x50000300
 8002458:	fff0c007 	.word	0xfff0c007

0800245c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d17e      	bne.n	8002578 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_ADC_Start_DMA+0x2c>
 8002484:	2302      	movs	r3, #2
 8002486:	e07a      	b.n	800257e <HAL_ADC_Start_DMA+0x122>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fb9b 	bl	8002bcc <ADC_Enable>
 8002496:	4603      	mov	r3, r0
 8002498:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d166      	bne.n	800256e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f023 0206 	bic.w	r2, r3, #6
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_ADC_Start_DMA+0x12c>)
 800250e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_ADC_Start_DMA+0x130>)
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_ADC_Start_DMA+0x134>)
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	221c      	movs	r2, #28
 8002526:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0210 	orr.w	r2, r2, #16
 8002536:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3340      	adds	r3, #64	; 0x40
 8002552:	4619      	mov	r1, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f000 fe00 	bl	800315c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0204 	orr.w	r2, r2, #4
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e006      	b.n	800257c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002576:	e001      	b.n	800257c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800257c:	7dfb      	ldrb	r3, [r7, #23]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	08002b01 	.word	0x08002b01
 800258c:	08002b7b 	.word	0x08002b7b
 8002590:	08002b97 	.word	0x08002b97

08002594 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b09b      	sub	sp, #108	; 0x6c
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e299      	b.n	8002aea <HAL_ADC_ConfigChannel+0x556>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 827d 	bne.w	8002ac8 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d81c      	bhi.n	8002610 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	461a      	mov	r2, r3
 80025ea:	231f      	movs	r3, #31
 80025ec:	4093      	lsls	r3, r2
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4019      	ands	r1, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
 800260e:	e063      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b09      	cmp	r3, #9
 8002616:	d81e      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	3b1e      	subs	r3, #30
 800262c:	221f      	movs	r2, #31
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	4019      	ands	r1, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	3b1e      	subs	r3, #30
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
 8002654:	e040      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b0e      	cmp	r3, #14
 800265c:	d81e      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	3b3c      	subs	r3, #60	; 0x3c
 8002672:	221f      	movs	r2, #31
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	4019      	ands	r1, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	3b3c      	subs	r3, #60	; 0x3c
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
 800269a:	e01d      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	3b5a      	subs	r3, #90	; 0x5a
 80026b0:	221f      	movs	r2, #31
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4019      	ands	r1, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	3b5a      	subs	r3, #90	; 0x5a
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80e5 	bne.w	80028b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d91c      	bls.n	800272a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	3b1e      	subs	r3, #30
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	619a      	str	r2, [r3, #24]
 8002728:	e019      	b.n	800275e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6959      	ldr	r1, [r3, #20]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	2207      	movs	r2, #7
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	4019      	ands	r1, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6898      	ldr	r0, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	3b01      	subs	r3, #1
 800277c:	2b03      	cmp	r3, #3
 800277e:	d84f      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x28c>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_ADC_ConfigChannel+0x1f4>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	08002799 	.word	0x08002799
 800278c:	080027bb 	.word	0x080027bb
 8002790:	080027dd 	.word	0x080027dd
 8002794:	080027ff 	.word	0x080027ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279e:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <HAL_ADC_ConfigChannel+0x470>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	0691      	lsls	r1, r2, #26
 80027a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027b8:	e07e      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027c0:	4b90      	ldr	r3, [pc, #576]	; (8002a04 <HAL_ADC_ConfigChannel+0x470>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	0691      	lsls	r1, r2, #26
 80027ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027da:	e06d      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027e2:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_ADC_ConfigChannel+0x470>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	0691      	lsls	r1, r2, #26
 80027ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ee:	430a      	orrs	r2, r1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027fc:	e05c      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002804:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_ADC_ConfigChannel+0x470>)
 8002806:	4013      	ands	r3, r2
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	0691      	lsls	r1, r2, #26
 800280e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002810:	430a      	orrs	r2, r1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800281c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800281e:	e04b      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	069b      	lsls	r3, r3, #26
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002842:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	069b      	lsls	r3, r3, #26
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002866:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	069b      	lsls	r3, r3, #26
 8002878:	429a      	cmp	r2, r3
 800287a:	d107      	bne.n	800288c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800288a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	429a      	cmp	r2, r3
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80028b0:	e001      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80028b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x344>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x344>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_ADC_ConfigChannel+0x346>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80ff 	bne.w	8002ade <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00f      	beq.n	8002908 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002906:	e049      	b.n	800299c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b09      	cmp	r3, #9
 8002928:	d91c      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6999      	ldr	r1, [r3, #24]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	3b1b      	subs	r3, #27
 800293c:	2207      	movs	r2, #7
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	4019      	ands	r1, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6898      	ldr	r0, [r3, #8]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1b      	subs	r3, #27
 8002956:	fa00 f203 	lsl.w	r2, r0, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	619a      	str	r2, [r3, #24]
 8002962:	e01b      	b.n	800299c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6959      	ldr	r1, [r3, #20]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	4019      	ands	r1, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6898      	ldr	r0, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_ADC_ConfigChannel+0x474>)
 800299e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d105      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029cc:	2b12      	cmp	r3, #18
 80029ce:	f040 8086 	bne.w	8002ade <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d17f      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10d      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x478>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x478>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e005      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x47a>
 8002a02:	bf00      	nop
 8002a04:	83fff000 	.word	0x83fff000
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d150      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x4a0>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x4a0>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x4a2>
 8002a34:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13c      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d11d      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x4ea>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4a:	d118      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a56:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_ADC_ConfigChannel+0x564>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_ADC_ConfigChannel+0x568>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0c9a      	lsrs	r2, r3, #18
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a6e:	e002      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f9      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a7c:	e02e      	b.n	8002adc <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b11      	cmp	r3, #17
 8002a84:	d10b      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x50a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8e:	d106      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a9a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a9c:	e01e      	b.n	8002adc <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d11a      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ab2:	e013      	b.n	8002adc <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ac6:	e00a      	b.n	8002ade <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ada:	e000      	b.n	8002ade <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002adc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ae6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	376c      	adds	r7, #108	; 0x6c
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000018 	.word	0x20000018
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d126      	bne.n	8002b68 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d115      	bne.n	8002b60 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7ff fad7 	bl	8002114 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b66:	e004      	b.n	8002b72 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff facd 	bl	8002128 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fabd 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <ADC_Enable+0x2c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <ADC_Enable+0x2c>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <ADC_Enable+0x2e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d143      	bne.n	8002c86 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <ADC_Enable+0xc4>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e02f      	b.n	8002c88 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002c38:	f7ff fa3c 	bl	80020b4 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c3e:	e01b      	b.n	8002c78 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c40:	f7ff fa38 	bl	80020b4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d914      	bls.n	8002c78 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00d      	beq.n	8002c78 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d1dc      	bne.n	8002c40 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	8000003f 	.word	0x8000003f

08002c94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d108      	bne.n	8002cc0 <ADC_Disable+0x2c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <ADC_Disable+0x2c>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <ADC_Disable+0x2e>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d047      	beq.n	8002d56 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030d 	and.w	r3, r3, #13
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10f      	bne.n	8002cf4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0202 	orr.w	r2, r2, #2
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002cec:	f7ff f9e2 	bl	80020b4 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cf2:	e029      	b.n	8002d48 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0210 	orr.w	r2, r3, #16
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e023      	b.n	8002d58 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d10:	f7ff f9d0 	bl	80020b4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d914      	bls.n	8002d48 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10d      	bne.n	8002d48 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d0dc      	beq.n	8002d10 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	; (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff29 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff3e 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff8e 	bl	8002e54 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5d 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff31 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e014      	b.n	8002fbe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe fd09 	bl	80019bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	795b      	ldrb	r3, [r3, #5]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_DAC_Start+0x16>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e025      	b.n	8003028 <HAL_DAC_Start+0x62>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003006:	2b3c      	cmp	r3, #60	; 0x3c
 8003008:	d107      	bne.n	800301a <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	795b      	ldrb	r3, [r3, #5]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_DAC_ConfigChannel+0x20>
 8003050:	2302      	movs	r3, #2
 8003052:	e036      	b.n	80030c2 <HAL_DAC_ConfigChannel+0x8e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2202      	movs	r2, #2
 800305e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003068:	f640 72fe 	movw	r2, #4094	; 0xffe
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4013      	ands	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6819      	ldr	r1, [r3, #0]
 80030a2:	22c0      	movs	r2, #192	; 0xc0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e037      	b.n	8003154 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9b8 	bl	80034ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}  
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_DMA_Start_IT+0x20>
 8003178:	2302      	movs	r3, #2
 800317a:	e04a      	b.n	8003212 <HAL_DMA_Start_IT+0xb6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800318a:	2b01      	cmp	r3, #1
 800318c:	d13a      	bne.n	8003204 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f94b 	bl	800344e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 020e 	orr.w	r2, r2, #14
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e00f      	b.n	80031f2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 020a 	orr.w	r2, r2, #10
 80031e0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0204 	bic.w	r2, r2, #4
 80031f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e005      	b.n	8003210 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003210:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e020      	b.n	8003280 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 020e 	bic.w	r2, r2, #14
 800324c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d005      	beq.n	80032ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e027      	b.n	80032fe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 020e 	bic.w	r2, r2, #14
 80032bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
    } 
  }
  return status;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2204      	movs	r2, #4
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d024      	beq.n	800337a <HAL_DMA_IRQHandler+0x72>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01f      	beq.n	800337a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	2104      	movs	r1, #4
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d06a      	beq.n	8003446 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003378:	e065      	b.n	8003446 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2202      	movs	r2, #2
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xdc>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d027      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 020a 	bic.w	r2, r2, #10
 80033b0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2102      	movs	r1, #2
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d035      	beq.n	8003446 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80033e2:	e030      	b.n	8003446 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2208      	movs	r2, #8
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d028      	beq.n	8003446 <HAL_DMA_IRQHandler+0x13e>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d023      	beq.n	8003446 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 020e 	bic.w	r2, r2, #14
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    }
  }
}  
 8003444:	e7ff      	b.n	8003446 <HAL_DMA_IRQHandler+0x13e>
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b10      	cmp	r3, #16
 800347a:	d108      	bne.n	800348e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800348c:	e007      	b.n	800349e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	60da      	str	r2, [r3, #12]
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <DMA_CalcBaseAndBitshift+0x34>)
 80034bc:	4413      	add	r3, r2
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <DMA_CalcBaseAndBitshift+0x38>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a06      	ldr	r2, [pc, #24]	; (80034e8 <DMA_CalcBaseAndBitshift+0x3c>)
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	bffdfff8 	.word	0xbffdfff8
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	40020000 	.word	0x40020000

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fa:	e14e      	b.n	800379a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8140 	beq.w	8003794 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d005      	beq.n	800352c <HAL_GPIO_Init+0x40>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0201 	and.w	r2, r3, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d017      	beq.n	80035ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	2203      	movs	r2, #3
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d123      	bne.n	800361e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0203 	and.w	r2, r3, #3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 809a 	beq.w	8003794 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003660:	4b55      	ldr	r3, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x2cc>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4a54      	ldr	r2, [pc, #336]	; (80037b8 <HAL_GPIO_Init+0x2cc>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6193      	str	r3, [r2, #24]
 800366c:	4b52      	ldr	r3, [pc, #328]	; (80037b8 <HAL_GPIO_Init+0x2cc>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003678:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_GPIO_Init+0x2d0>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036a2:	d013      	beq.n	80036cc <HAL_GPIO_Init+0x1e0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a46      	ldr	r2, [pc, #280]	; (80037c0 <HAL_GPIO_Init+0x2d4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00d      	beq.n	80036c8 <HAL_GPIO_Init+0x1dc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a45      	ldr	r2, [pc, #276]	; (80037c4 <HAL_GPIO_Init+0x2d8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <HAL_GPIO_Init+0x1d8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a44      	ldr	r2, [pc, #272]	; (80037c8 <HAL_GPIO_Init+0x2dc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_GPIO_Init+0x1d4>
 80036bc:	2303      	movs	r3, #3
 80036be:	e006      	b.n	80036ce <HAL_GPIO_Init+0x1e2>
 80036c0:	2305      	movs	r3, #5
 80036c2:	e004      	b.n	80036ce <HAL_GPIO_Init+0x1e2>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e002      	b.n	80036ce <HAL_GPIO_Init+0x1e2>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_GPIO_Init+0x1e2>
 80036cc:	2300      	movs	r3, #0
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	f002 0203 	and.w	r2, r2, #3
 80036d4:	0092      	lsls	r2, r2, #2
 80036d6:	4093      	lsls	r3, r2
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036de:	4937      	ldr	r1, [pc, #220]	; (80037bc <HAL_GPIO_Init+0x2d0>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ec:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003710:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800373a:	4a24      	ldr	r2, [pc, #144]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003740:	4b22      	ldr	r3, [pc, #136]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800378e:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <HAL_GPIO_Init+0x2e0>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f aea9 	bne.w	80034fc <HAL_GPIO_Init+0x10>
  }
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40010000 	.word	0x40010000
 80037c0:	48000400 	.word	0x48000400
 80037c4:	48000800 	.word	0x48000800
 80037c8:	48000c00 	.word	0x48000c00
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e081      	b.n	8003916 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe f906 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e006      	b.n	8003888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d104      	bne.n	800389a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69d9      	ldr	r1, [r3, #28]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	460b      	mov	r3, r1
 800392e:	817b      	strh	r3, [r7, #10]
 8003930:	4613      	mov	r3, r2
 8003932:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	f040 80da 	bne.w	8003af6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_I2C_Master_Transmit+0x30>
 800394c:	2302      	movs	r3, #2
 800394e:	e0d3      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003958:	f7fe fbac 	bl	80020b4 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2319      	movs	r3, #25
 8003964:	2201      	movs	r2, #1
 8003966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa00 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0be      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	; 0x21
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2210      	movs	r2, #16
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2bff      	cmp	r3, #255	; 0xff
 80039aa:	d90e      	bls.n	80039ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	22ff      	movs	r2, #255	; 0xff
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <HAL_I2C_Master_Transmit+0x1e0>)
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fb72 	bl	80040ac <I2C_TransferConfig>
 80039c8:	e06c      	b.n	8003aa4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	4b48      	ldr	r3, [pc, #288]	; (8003b00 <HAL_I2C_Master_Transmit+0x1e0>)
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fb61 	bl	80040ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039ea:	e05b      	b.n	8003aa4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6a39      	ldr	r1, [r7, #32]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f9fd 	bl	8003df0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e07b      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d034      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x184>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d130      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f98f 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e04d      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2bff      	cmp	r3, #255	; 0xff
 8003a64:	d90e      	bls.n	8003a84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fb15 	bl	80040ac <I2C_TransferConfig>
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fb04 	bl	80040ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d19e      	bne.n	80039ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9dc 	bl	8003e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e01a      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_I2C_Master_Transmit+0x1e4>)
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	80002000 	.word	0x80002000
 8003b04:	fe00e800 	.word	0xfe00e800

08003b08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	f040 80db 	bne.w	8003ce0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_Master_Receive+0x30>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0d4      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b40:	f7fe fab8 	bl	80020b4 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2319      	movs	r3, #25
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f90c 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0bf      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2222      	movs	r2, #34	; 0x22
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2bff      	cmp	r3, #255	; 0xff
 8003b92:	d90e      	bls.n	8003bb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	4b52      	ldr	r3, [pc, #328]	; (8003cec <HAL_I2C_Master_Receive+0x1e4>)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa7e 	bl	80040ac <I2C_TransferConfig>
 8003bb0:	e06d      	b.n	8003c8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_I2C_Master_Receive+0x1e4>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fa6d 	bl	80040ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003bd2:	e05c      	b.n	8003c8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6a39      	ldr	r1, [r7, #32]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f985 	bl	8003ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e07c      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d034      	beq.n	8003c8e <HAL_I2C_Master_Receive+0x186>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d130      	bne.n	8003c8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f89a 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e04d      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2bff      	cmp	r3, #255	; 0xff
 8003c4e:	d90e      	bls.n	8003c6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	22ff      	movs	r2, #255	; 0xff
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	8979      	ldrh	r1, [r7, #10]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa20 	bl	80040ac <I2C_TransferConfig>
 8003c6c:	e00f      	b.n	8003c8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	8979      	ldrh	r1, [r7, #10]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa0f 	bl	80040ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d19d      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	6a39      	ldr	r1, [r7, #32]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8e7 	bl	8003e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e01a      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_I2C_Master_Receive+0x1e8>)
 8003cc0:	400b      	ands	r3, r1
 8003cc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	80002400 	.word	0x80002400
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
  }
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d103      	bne.n	8003d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	619a      	str	r2, [r3, #24]
  }
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d80:	e022      	b.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d01e      	beq.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fe f993 	bl	80020b4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e00f      	b.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d0cd      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dfc:	e02c      	b.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f8dc 	bl	8003fc0 <I2C_IsAcknowledgeFailed>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e02a      	b.n	8003e68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d01e      	beq.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fe f94b 	bl	80020b4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e007      	b.n	8003e68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d1cb      	bne.n	8003dfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e7c:	e028      	b.n	8003ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f89c 	bl	8003fc0 <I2C_IsAcknowledgeFailed>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e026      	b.n	8003ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fe f90f 	bl	80020b4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e007      	b.n	8003ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d1cf      	bne.n	8003e7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef4:	e055      	b.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f860 	bl	8003fc0 <I2C_IsAcknowledgeFailed>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e053      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d129      	bne.n	8003f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d105      	bne.n	8003f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e03f      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2220      	movs	r2, #32
 8003f38:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e022      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fe f8a2 	bl	80020b4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e007      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d1a2      	bne.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	fe00e800 	.word	0xfe00e800

08003fc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d161      	bne.n	800409e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe8:	d02b      	beq.n	8004042 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffa:	e022      	b.n	8004042 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d01e      	beq.n	8004042 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe f856 	bl	80020b4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_IsAcknowledgeFailed+0x5a>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02e      	b.n	80040a0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d1d5      	bne.n	8003ffc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2210      	movs	r2, #16
 8004056:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2220      	movs	r2, #32
 800405e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fe61 	bl	8003d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <I2C_IsAcknowledgeFailed+0xe8>)
 8004072:	400b      	ands	r3, r1
 8004074:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fe00e800 	.word	0xfe00e800

080040ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	4613      	mov	r3, r2
 80040bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	0d5b      	lsrs	r3, r3, #21
 80040c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <I2C_TransferConfig+0x58>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	43db      	mvns	r3, r3
 80040d2:	ea02 0103 	and.w	r1, r2, r3
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040dc:	7a7b      	ldrb	r3, [r7, #9]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	03ff63ff 	.word	0x03ff63ff

08004108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d138      	bne.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004128:	2302      	movs	r3, #2
 800412a:	e032      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800415a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d139      	bne.n	8004228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041be:	2302      	movs	r3, #2
 80041c0:	e033      	b.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800423e:	af00      	add	r7, sp, #0
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f000 bef4 	b.w	800503a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 816a 	beq.w	8004536 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004262:	4bb3      	ldr	r3, [pc, #716]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00c      	beq.n	8004288 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800426e:	4bb0      	ldr	r3, [pc, #704]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d159      	bne.n	800432e <HAL_RCC_OscConfig+0xf6>
 800427a:	4bad      	ldr	r3, [pc, #692]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d152      	bne.n	800432e <HAL_RCC_OscConfig+0xf6>
 8004288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800429c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_OscConfig+0x82>
 80042b4:	4b9e      	ldr	r3, [pc, #632]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0xae>
 80042ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80042e2:	4b93      	ldr	r3, [pc, #588]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042f2:	fa92 f2a2 	rbit	r2, r2
 80042f6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80042fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80042fe:	fab2 f282 	clz	r2, r2
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	f002 021f 	and.w	r2, r2, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 810c 	beq.w	8004534 <HAL_RCC_OscConfig+0x2fc>
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 8106 	bne.w	8004534 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f000 be86 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d106      	bne.n	8004348 <HAL_RCC_OscConfig+0x110>
 800433a:	4b7d      	ldr	r3, [pc, #500]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7c      	ldr	r2, [pc, #496]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e030      	b.n	80043aa <HAL_RCC_OscConfig+0x172>
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x134>
 8004352:	4b77      	ldr	r3, [pc, #476]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a76      	ldr	r2, [pc, #472]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b74      	ldr	r3, [pc, #464]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a73      	ldr	r2, [pc, #460]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e01e      	b.n	80043aa <HAL_RCC_OscConfig+0x172>
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_OscConfig+0x15a>
 8004378:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6c      	ldr	r2, [pc, #432]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 800437e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e00b      	b.n	80043aa <HAL_RCC_OscConfig+0x172>
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a66      	ldr	r2, [pc, #408]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b64      	ldr	r3, [pc, #400]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80043a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043aa:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	495d      	ldr	r1, [pc, #372]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d059      	beq.n	800447c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fd fe74 	bl	80020b4 <HAL_GetTick>
 80043cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d2:	f7fd fe6f 	bl	80020b4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d902      	bls.n	80043e8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	f000 be29 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
 80043e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80043fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004400:	fab3 f383 	clz	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <HAL_RCC_OscConfig+0x1e2>
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	e015      	b.n	8004446 <HAL_RCC_OscConfig+0x20e>
 800441a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800442e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004432:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004436:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004442:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800444a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800444e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004452:	fa92 f2a2 	rbit	r2, r2
 8004456:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800445a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800445e:	fab2 f282 	clz	r2, r2
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	f042 0220 	orr.w	r2, r2, #32
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f002 021f 	and.w	r2, r2, #31
 800446e:	2101      	movs	r1, #1
 8004470:	fa01 f202 	lsl.w	r2, r1, r2
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ab      	beq.n	80043d2 <HAL_RCC_OscConfig+0x19a>
 800447a:	e05c      	b.n	8004536 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fe1a 	bl	80020b4 <HAL_GetTick>
 8004480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004486:	f7fd fe15 	bl	80020b4 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d902      	bls.n	800449c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	f000 bdcf 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
 800449c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_OscConfig+0x296>
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	e015      	b.n	80044fa <HAL_RCC_OscConfig+0x2c2>
 80044ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80044e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80044ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_RCC_OscConfig+0x2f8>)
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004502:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004506:	fa92 f2a2 	rbit	r2, r2
 800450a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800450e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f042 0220 	orr.w	r2, r2, #32
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f002 021f 	and.w	r2, r2, #31
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ab      	bne.n	8004486 <HAL_RCC_OscConfig+0x24e>
 800452e:	e002      	b.n	8004536 <HAL_RCC_OscConfig+0x2fe>
 8004530:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 816f 	beq.w	8004824 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004546:	4bd0      	ldr	r3, [pc, #832]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004552:	4bcd      	ldr	r3, [pc, #820]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b08      	cmp	r3, #8
 800455c:	d16c      	bne.n	8004638 <HAL_RCC_OscConfig+0x400>
 800455e:	4bca      	ldr	r3, [pc, #808]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d166      	bne.n	8004638 <HAL_RCC_OscConfig+0x400>
 800456a:	2302      	movs	r3, #2
 800456c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800457c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d102      	bne.n	800459a <HAL_RCC_OscConfig+0x362>
 8004594:	4bbc      	ldr	r3, [pc, #752]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	e013      	b.n	80045c2 <HAL_RCC_OscConfig+0x38a>
 800459a:	2302      	movs	r3, #2
 800459c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80045be:	4bb2      	ldr	r3, [pc, #712]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2202      	movs	r2, #2
 80045c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045cc:	fa92 f2a2 	rbit	r2, r2
 80045d0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80045d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80045d8:	fab2 f282 	clz	r2, r2
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	f042 0220 	orr.w	r2, r2, #32
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	f002 021f 	and.w	r2, r2, #31
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_RCC_OscConfig+0x3cc>
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f000 bd1b 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004604:	4ba0      	ldr	r3, [pc, #640]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	21f8      	movs	r1, #248	; 0xf8
 8004614:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800461c:	fa91 f1a1 	rbit	r1, r1
 8004620:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004624:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004628:	fab1 f181 	clz	r1, r1
 800462c:	b2c9      	uxtb	r1, r1
 800462e:	408b      	lsls	r3, r1
 8004630:	4995      	ldr	r1, [pc, #596]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004636:	e0f5      	b.n	8004824 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8085 	beq.w	800474e <HAL_RCC_OscConfig+0x516>
 8004644:	2301      	movs	r3, #1
 8004646:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004656:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	461a      	mov	r2, r3
 800466c:	2301      	movs	r3, #1
 800466e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fd fd20 	bl	80020b4 <HAL_GetTick>
 8004674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467a:	f7fd fd1b 	bl	80020b4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d902      	bls.n	8004690 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	f000 bcd5 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_OscConfig+0x488>
 80046ba:	4b73      	ldr	r3, [pc, #460]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e013      	b.n	80046e8 <HAL_RCC_OscConfig+0x4b0>
 80046c0:	2302      	movs	r3, #2
 80046c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046d2:	2302      	movs	r3, #2
 80046d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80046d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80046e4:	4b68      	ldr	r3, [pc, #416]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2202      	movs	r2, #2
 80046ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80046ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80046fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0af      	beq.n	800467a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	21f8      	movs	r1, #248	; 0xf8
 800472a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004732:	fa91 f1a1 	rbit	r1, r1
 8004736:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800473a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800473e:	fab1 f181 	clz	r1, r1
 8004742:	b2c9      	uxtb	r1, r1
 8004744:	408b      	lsls	r3, r1
 8004746:	4950      	ldr	r1, [pc, #320]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
 800474c:	e06a      	b.n	8004824 <HAL_RCC_OscConfig+0x5ec>
 800474e:	2301      	movs	r3, #1
 8004750:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004760:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd fc9b 	bl	80020b4 <HAL_GetTick>
 800477e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004784:	f7fd fc96 	bl	80020b4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d902      	bls.n	800479a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	f000 bc50 	b.w	800503a <HAL_RCC_OscConfig+0xe02>
 800479a:	2302      	movs	r3, #2
 800479c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_OscConfig+0x592>
 80047c4:	4b30      	ldr	r3, [pc, #192]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	e013      	b.n	80047f2 <HAL_RCC_OscConfig+0x5ba>
 80047ca:	2302      	movs	r3, #2
 80047cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80047dc:	2302      	movs	r3, #2
 80047de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80047ee:	4b26      	ldr	r3, [pc, #152]	; (8004888 <HAL_RCC_OscConfig+0x650>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2202      	movs	r2, #2
 80047f4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80047f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80047fc:	fa92 f2a2 	rbit	r2, r2
 8004800:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004804:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004808:	fab2 f282 	clz	r2, r2
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f042 0220 	orr.w	r2, r2, #32
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	f002 021f 	and.w	r2, r2, #31
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f202 	lsl.w	r2, r1, r2
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1af      	bne.n	8004784 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80da 	beq.w	80049e8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d069      	beq.n	8004912 <HAL_RCC_OscConfig+0x6da>
 800483e:	2301      	movs	r3, #1
 8004840:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_OscConfig+0x654>)
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	461a      	mov	r2, r3
 8004864:	2301      	movs	r3, #1
 8004866:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004868:	f7fd fc24 	bl	80020b4 <HAL_GetTick>
 800486c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004870:	e00e      	b.n	8004890 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd fc1f 	bl	80020b4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d906      	bls.n	8004890 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e3d9      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	10908120 	.word	0x10908120
 8004890:	2302      	movs	r3, #2
 8004892:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80048a6:	2202      	movs	r2, #2
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	fa93 f2a3 	rbit	r2, r3
 80048b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80048be:	2202      	movs	r2, #2
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	fa93 f2a3 	rbit	r2, r3
 80048cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80048d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4ba5      	ldr	r3, [pc, #660]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 80048d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80048da:	2102      	movs	r1, #2
 80048dc:	6019      	str	r1, [r3, #0]
 80048de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	fa93 f1a3 	rbit	r1, r3
 80048e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80048ec:	6019      	str	r1, [r3, #0]
  return result;
 80048ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0b0      	beq.n	8004872 <HAL_RCC_OscConfig+0x63a>
 8004910:	e06a      	b.n	80049e8 <HAL_RCC_OscConfig+0x7b0>
 8004912:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	fa93 f2a3 	rbit	r2, r3
 8004924:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004928:	601a      	str	r2, [r3, #0]
  return result;
 800492a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800492e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004930:	fab3 f383 	clz	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <HAL_RCC_OscConfig+0x934>)
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004944:	f7fd fbb6 	bl	80020b4 <HAL_GetTick>
 8004948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	e009      	b.n	8004962 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494e:	f7fd fbb1 	bl	80020b4 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e36b      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004962:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004966:	2202      	movs	r2, #2
 8004968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	fa93 f2a3 	rbit	r2, r3
 8004974:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800497e:	2202      	movs	r2, #2
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fa93 f2a3 	rbit	r2, r3
 800498c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004996:	2202      	movs	r2, #2
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80049a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049aa:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80049b2:	2102      	movs	r1, #2
 80049b4:	6019      	str	r1, [r3, #0]
 80049b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	fa93 f1a3 	rbit	r1, r3
 80049c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049c4:	6019      	str	r1, [r3, #0]
  return result;
 80049c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fab3 f383 	clz	r3, r3
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1b2      	bne.n	800494e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8158 	beq.w	8004ca8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b5a      	ldr	r3, [pc, #360]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4a56      	ldr	r2, [pc, #344]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	4b54      	ldr	r3, [pc, #336]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_OscConfig+0x938>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11a      	bne.n	8004a72 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3c:	4b4c      	ldr	r3, [pc, #304]	; (8004b70 <HAL_RCC_OscConfig+0x938>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a4b      	ldr	r2, [pc, #300]	; (8004b70 <HAL_RCC_OscConfig+0x938>)
 8004a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a46:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a48:	f7fd fb34 	bl	80020b4 <HAL_GetTick>
 8004a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	e009      	b.n	8004a66 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fd fb2f 	bl	80020b4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e2e9      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a66:	4b42      	ldr	r3, [pc, #264]	; (8004b70 <HAL_RCC_OscConfig+0x938>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ef      	beq.n	8004a52 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x852>
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	4a39      	ldr	r2, [pc, #228]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6213      	str	r3, [r2, #32]
 8004a88:	e02f      	b.n	8004aea <HAL_RCC_OscConfig+0x8b2>
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10c      	bne.n	8004aae <HAL_RCC_OscConfig+0x876>
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6213      	str	r3, [r2, #32]
 8004aa0:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004aa6:	f023 0304 	bic.w	r3, r3, #4
 8004aaa:	6213      	str	r3, [r2, #32]
 8004aac:	e01d      	b.n	8004aea <HAL_RCC_OscConfig+0x8b2>
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x89a>
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6213      	str	r3, [r2, #32]
 8004ac4:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6213      	str	r3, [r2, #32]
 8004ad0:	e00b      	b.n	8004aea <HAL_RCC_OscConfig+0x8b2>
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6213      	str	r3, [r2, #32]
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d06b      	beq.n	8004bcc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af4:	f7fd fade 	bl	80020b4 <HAL_GetTick>
 8004af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	e00b      	b.n	8004b16 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fd fad9 	bl	80020b4 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e291      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004b16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	fa93 f2a3 	rbit	r2, r3
 8004b28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b32:	2202      	movs	r2, #2
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	fa93 f2a3 	rbit	r2, r3
 8004b40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b44:	601a      	str	r2, [r3, #0]
  return result;
 8004b46:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	fab3 f383 	clz	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f043 0302 	orr.w	r3, r3, #2
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d109      	bne.n	8004b74 <HAL_RCC_OscConfig+0x93c>
 8004b60:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <HAL_RCC_OscConfig+0x930>)
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x958>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	10908120 	.word	0x10908120
 8004b70:	40007000 	.word	0x40007000
 8004b74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004b78:	2202      	movs	r2, #2
 8004b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	fa93 f2a3 	rbit	r2, r3
 8004b86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	4bbb      	ldr	r3, [pc, #748]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004b94:	2102      	movs	r1, #2
 8004b96:	6011      	str	r1, [r2, #0]
 8004b98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	fa92 f1a2 	rbit	r1, r2
 8004ba2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ba6:	6011      	str	r1, [r2, #0]
  return result;
 8004ba8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	fab2 f282 	clz	r2, r2
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	f002 021f 	and.w	r2, r2, #31
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d099      	beq.n	8004afe <HAL_RCC_OscConfig+0x8c6>
 8004bca:	e063      	b.n	8004c94 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fa72 	bl	80020b4 <HAL_GetTick>
 8004bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	e00b      	b.n	8004bee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fd fa6d 	bl	80020b4 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e225      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004bee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	fa93 f2a3 	rbit	r2, r3
 8004c18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c1c:	601a      	str	r2, [r3, #0]
  return result;
 8004c1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_OscConfig+0xa06>
 8004c38:	4b90      	ldr	r3, [pc, #576]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	e00d      	b.n	8004c5a <HAL_RCC_OscConfig+0xa22>
 8004c3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004c42:	2202      	movs	r2, #2
 8004c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	fa93 f2a3 	rbit	r2, r3
 8004c50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	4b89      	ldr	r3, [pc, #548]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c5e:	2102      	movs	r1, #2
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	fa92 f1a2 	rbit	r1, r2
 8004c6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004c70:	6011      	str	r1, [r2, #0]
  return result;
 8004c72:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1a0      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9c:	4b77      	ldr	r3, [pc, #476]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4a76      	ldr	r2, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 81c2 	beq.w	8005038 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb4:	4b71      	ldr	r3, [pc, #452]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	f000 819c 	beq.w	8004ffa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	1d3b      	adds	r3, r7, #4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	f040 8114 	bne.w	8004ef6 <HAL_RCC_OscConfig+0xcbe>
 8004cce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004cd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	fa93 f2a3 	rbit	r2, r3
 8004ce2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004ce6:	601a      	str	r2, [r3, #0]
  return result;
 8004ce8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004cec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fd f9d6 	bl	80020b4 <HAL_GetTick>
 8004d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0c:	e009      	b.n	8004d22 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0e:	f7fd f9d1 	bl	80020b4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e18b      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004d22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	fa93 f2a3 	rbit	r2, r3
 8004d36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d102      	bne.n	8004d5c <HAL_RCC_OscConfig+0xb24>
 8004d56:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	e01b      	b.n	8004d94 <HAL_RCC_OscConfig+0xb5c>
 8004d5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	fa93 f2a3 	rbit	r2, r3
 8004d70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	fa93 f2a3 	rbit	r2, r3
 8004d8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004d98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	fa92 f1a2 	rbit	r1, r2
 8004da8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004dac:	6011      	str	r1, [r2, #0]
  return result;
 8004dae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	fab2 f282 	clz	r2, r2
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f042 0220 	orr.w	r2, r2, #32
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f002 021f 	and.w	r2, r2, #31
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d19e      	bne.n	8004d0e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	4925      	ldr	r1, [pc, #148]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
 8004dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	fa93 f2a3 	rbit	r2, r3
 8004e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e04:	601a      	str	r2, [r3, #0]
  return result;
 8004e06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e0a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2301      	movs	r3, #1
 8004e20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fd f947 	bl	80020b4 <HAL_GetTick>
 8004e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e2a:	e009      	b.n	8004e40 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd f942 	bl	80020b4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0fc      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004e40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	fa93 f2a3 	rbit	r2, r3
 8004e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e58:	601a      	str	r2, [r3, #0]
  return result;
 8004e5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004e5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e60:	fab3 f383 	clz	r3, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d105      	bne.n	8004e80 <HAL_RCC_OscConfig+0xc48>
 8004e74:	4b01      	ldr	r3, [pc, #4]	; (8004e7c <HAL_RCC_OscConfig+0xc44>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	e01e      	b.n	8004eb8 <HAL_RCC_OscConfig+0xc80>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	fa93 f2a3 	rbit	r2, r3
 8004e94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_RCC_OscConfig+0xe0c>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	fa92 f1a2 	rbit	r1, r2
 8004ecc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ed0:	6011      	str	r1, [r2, #0]
  return result;
 8004ed2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	fab2 f282 	clz	r2, r2
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f002 021f 	and.w	r2, r2, #31
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f202 	lsl.w	r2, r1, r2
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d09b      	beq.n	8004e2c <HAL_RCC_OscConfig+0xbf4>
 8004ef4:	e0a0      	b.n	8005038 <HAL_RCC_OscConfig+0xe00>
 8004ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	fa93 f2a3 	rbit	r2, r3
 8004f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f0e:	601a      	str	r2, [r3, #0]
  return result;
 8004f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	fab3 f383 	clz	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fd f8c2 	bl	80020b4 <HAL_GetTick>
 8004f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f34:	e009      	b.n	8004f4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7fd f8bd 	bl	80020b4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e077      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
 8004f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	fa93 f2a3 	rbit	r2, r3
 8004f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f62:	601a      	str	r2, [r3, #0]
  return result;
 8004f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f6a:	fab3 f383 	clz	r3, r3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d102      	bne.n	8004f84 <HAL_RCC_OscConfig+0xd4c>
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_RCC_OscConfig+0xe0c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	e01b      	b.n	8004fbc <HAL_RCC_OscConfig+0xd84>
 8004f84:	f107 0320 	add.w	r3, r7, #32
 8004f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f107 0320 	add.w	r3, r7, #32
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f107 031c 	add.w	r3, r7, #28
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	f107 0318 	add.w	r3, r7, #24
 8004fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f107 0318 	add.w	r3, r7, #24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	fa93 f2a3 	rbit	r2, r3
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_RCC_OscConfig+0xe0c>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f107 0210 	add.w	r2, r7, #16
 8004fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	f107 0210 	add.w	r2, r7, #16
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	fa92 f1a2 	rbit	r1, r2
 8004fd0:	f107 020c 	add.w	r2, r7, #12
 8004fd4:	6011      	str	r1, [r2, #0]
  return result;
 8004fd6:	f107 020c 	add.w	r2, r7, #12
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	fab2 f282 	clz	r2, r2
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	f042 0220 	orr.w	r2, r2, #32
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	f002 021f 	and.w	r2, r2, #31
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d19e      	bne.n	8004f36 <HAL_RCC_OscConfig+0xcfe>
 8004ff8:	e01e      	b.n	8005038 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e018      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCC_OscConfig+0xe0c>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005010:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	429a      	cmp	r2, r3
 8005020:	d108      	bne.n	8005034 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005022:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000

08005048 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b09e      	sub	sp, #120	; 0x78
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e162      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b90      	ldr	r3, [pc, #576]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d910      	bls.n	8005090 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b8d      	ldr	r3, [pc, #564]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 0207 	bic.w	r2, r3, #7
 8005076:	498b      	ldr	r1, [pc, #556]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b89      	ldr	r3, [pc, #548]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e14a      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509c:	4b82      	ldr	r3, [pc, #520]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	497f      	ldr	r1, [pc, #508]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80dc 	beq.w	8005274 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d13c      	bne.n	800513e <HAL_RCC_ClockConfig+0xf6>
 80050c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_ClockConfig+0xa6>
 80050e8:	4b6f      	ldr	r3, [pc, #444]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	e00f      	b.n	800510e <HAL_RCC_ClockConfig+0xc6>
 80050ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	667b      	str	r3, [r7, #100]	; 0x64
 80050fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005100:	663b      	str	r3, [r7, #96]	; 0x60
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510a:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005112:	65ba      	str	r2, [r7, #88]	; 0x58
 8005114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005116:	fa92 f2a2 	rbit	r2, r2
 800511a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800511c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800511e:	fab2 f282 	clz	r2, r2
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	f042 0220 	orr.w	r2, r2, #32
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	f002 021f 	and.w	r2, r2, #31
 800512e:	2101      	movs	r1, #1
 8005130:	fa01 f202 	lsl.w	r2, r1, r2
 8005134:	4013      	ands	r3, r2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d17b      	bne.n	8005232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0f3      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d13c      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x178>
 8005146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800514a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005156:	fab3 f383 	clz	r3, r3
 800515a:	b2db      	uxtb	r3, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <HAL_RCC_ClockConfig+0x128>
 800516a:	4b4f      	ldr	r3, [pc, #316]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	e00f      	b.n	8005190 <HAL_RCC_ClockConfig+0x148>
 8005170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005174:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	647b      	str	r3, [r7, #68]	; 0x44
 800517e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005182:	643b      	str	r3, [r7, #64]	; 0x40
 8005184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005194:	63ba      	str	r2, [r7, #56]	; 0x38
 8005196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005198:	fa92 f2a2 	rbit	r2, r2
 800519c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800519e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a0:	fab2 f282 	clz	r2, r2
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	f042 0220 	orr.w	r2, r2, #32
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f002 021f 	and.w	r2, r2, #31
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f202 	lsl.w	r2, r1, r2
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d13a      	bne.n	8005232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b2      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
 80051c0:	2302      	movs	r3, #2
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	fa93 f3a3 	rbit	r3, r3
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d102      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x1a0>
 80051e2:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	e00d      	b.n	8005204 <HAL_RCC_ClockConfig+0x1bc>
 80051e8:	2302      	movs	r3, #2
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	2302      	movs	r3, #2
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2202      	movs	r2, #2
 8005206:	61ba      	str	r2, [r7, #24]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	fa92 f2a2 	rbit	r2, r2
 800520e:	617a      	str	r2, [r7, #20]
  return result;
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	fab2 f282 	clz	r2, r2
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	f042 0220 	orr.w	r2, r2, #32
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	f002 021f 	and.w	r2, r2, #31
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f202 	lsl.w	r2, r1, r2
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e079      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	491a      	ldr	r1, [pc, #104]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fc ff36 	bl	80020b4 <HAL_GetTick>
 8005248:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fc ff32 	bl	80020b4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e061      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_RCC_ClockConfig+0x260>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d214      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 0207 	bic.w	r2, r3, #7
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_RCC_ClockConfig+0x25c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e040      	b.n	8005326 <HAL_RCC_ClockConfig+0x2de>
 80052a4:	40022000 	.word	0x40022000
 80052a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_RCC_ClockConfig+0x2e8>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	491a      	ldr	r1, [pc, #104]	; (8005330 <HAL_RCC_ClockConfig+0x2e8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <HAL_RCC_ClockConfig+0x2e8>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4912      	ldr	r1, [pc, #72]	; (8005330 <HAL_RCC_ClockConfig+0x2e8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052ea:	f000 f829 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <HAL_RCC_ClockConfig+0x2e8>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f8:	22f0      	movs	r2, #240	; 0xf0
 80052fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	fa92 f2a2 	rbit	r2, r2
 8005302:	60fa      	str	r2, [r7, #12]
  return result;
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	fab2 f282 	clz	r2, r2
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	40d3      	lsrs	r3, r2
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x2ec>)
 8005310:	5cd3      	ldrb	r3, [r2, r3]
 8005312:	fa21 f303 	lsr.w	r3, r1, r3
 8005316:	4a08      	ldr	r2, [pc, #32]	; (8005338 <HAL_RCC_ClockConfig+0x2f0>)
 8005318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <HAL_RCC_ClockConfig+0x2f4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fc fe84 	bl	800202c <HAL_InitTick>
  
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3778      	adds	r7, #120	; 0x78
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	0800a76c 	.word	0x0800a76c
 8005338:	20000018 	.word	0x20000018
 800533c:	2000001c 	.word	0x2000001c

08005340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	b08b      	sub	sp, #44	; 0x2c
 8005344:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <HAL_RCC_GetSysClockFreq+0xc0>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b04      	cmp	r3, #4
 8005368:	d002      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x30>
 800536a:	2b08      	cmp	r3, #8
 800536c:	d003      	beq.n	8005376 <HAL_RCC_GetSysClockFreq+0x36>
 800536e:	e03c      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005370:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005372:	623b      	str	r3, [r7, #32]
      break;
 8005374:	e03c      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800537c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005380:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	fa92 f2a2 	rbit	r2, r2
 8005388:	607a      	str	r2, [r7, #4]
  return result;
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	fab2 f282 	clz	r2, r2
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	40d3      	lsrs	r3, r2
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005396:	5cd3      	ldrb	r3, [r2, r3]
 8005398:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_RCC_GetSysClockFreq+0xc0>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	220f      	movs	r2, #15
 80053a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	fa92 f2a2 	rbit	r2, r2
 80053ac:	60fa      	str	r2, [r7, #12]
  return result;
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	fab2 f282 	clz	r2, r2
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	40d3      	lsrs	r3, r2
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <HAL_RCC_GetSysClockFreq+0xcc>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053c8:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
 80053d8:	e004      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	623b      	str	r3, [r7, #32]
      break;
 80053e8:	e002      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053ec:	623b      	str	r3, [r7, #32]
      break;
 80053ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	372c      	adds	r7, #44	; 0x2c
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	007a1200 	.word	0x007a1200
 8005408:	0800a784 	.word	0x0800a784
 800540c:	0800a794 	.word	0x0800a794
 8005410:	003d0900 	.word	0x003d0900

08005414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <HAL_RCC_GetHCLKFreq+0x14>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000018 	.word	0x20000018

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005432:	f7ff ffef 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005436:	4601      	mov	r1, r0
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005440:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	fa92 f2a2 	rbit	r2, r2
 800544c:	603a      	str	r2, [r7, #0]
  return result;
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	fab2 f282 	clz	r2, r2
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	40d3      	lsrs	r3, r2
 8005458:	4a04      	ldr	r2, [pc, #16]	; (800546c <HAL_RCC_GetPCLK1Freq+0x40>)
 800545a:	5cd3      	ldrb	r3, [r2, r3]
 800545c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000
 800546c:	0800a77c 	.word	0x0800a77c

08005470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005476:	f7ff ffcd 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 800547a:	4601      	mov	r1, r0
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005484:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	fa92 f2a2 	rbit	r2, r2
 8005490:	603a      	str	r2, [r7, #0]
  return result;
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	fab2 f282 	clz	r2, r2
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	40d3      	lsrs	r3, r2
 800549c:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800a77c 	.word	0x0800a77c

080054b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b092      	sub	sp, #72	; 0x48
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80d4 	beq.w	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d8:	4b4e      	ldr	r3, [pc, #312]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10e      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4a4a      	ldr	r2, [pc, #296]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ee:	61d3      	str	r3, [r2, #28]
 80054f0:	4b48      	ldr	r3, [pc, #288]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005502:	4b45      	ldr	r3, [pc, #276]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d118      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a41      	ldr	r2, [pc, #260]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551a:	f7fc fdcb 	bl	80020b4 <HAL_GetTick>
 800551e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005522:	f7fc fdc7 	bl	80020b4 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b64      	cmp	r3, #100	; 0x64
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e14b      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005534:	4b38      	ldr	r3, [pc, #224]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005540:	4b34      	ldr	r3, [pc, #208]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800554a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8084 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800555c:	429a      	cmp	r2, r3
 800555e:	d07c      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005560:	4b2c      	ldr	r3, [pc, #176]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800556e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	4b26      	ldr	r3, [pc, #152]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	461a      	mov	r2, r3
 800558a:	2301      	movs	r3, #1
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559e:	fab3 f383 	clz	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	461a      	mov	r2, r3
 80055ae:	2300      	movs	r3, #0
 80055b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d04b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c2:	f7fc fd77 	bl	80020b4 <HAL_GetTick>
 80055c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fc fd73 	bl	80020b4 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e0f5      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80055e0:	2302      	movs	r3, #2
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
 80055ec:	2302      	movs	r3, #2
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	61fb      	str	r3, [r7, #28]
  return result;
 80055f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d108      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800560e:	4b01      	ldr	r3, [pc, #4]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	e00d      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005614:	40021000 	.word	0x40021000
 8005618:	40007000 	.word	0x40007000
 800561c:	10908100 	.word	0x10908100
 8005620:	2302      	movs	r3, #2
 8005622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	4b69      	ldr	r3, [pc, #420]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2202      	movs	r2, #2
 8005632:	613a      	str	r2, [r7, #16]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	fa92 f2a2 	rbit	r2, r2
 800563a:	60fa      	str	r2, [r7, #12]
  return result;
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	fab2 f282 	clz	r2, r2
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	f002 021f 	and.w	r2, r2, #31
 800564e:	2101      	movs	r1, #1
 8005650:	fa01 f202 	lsl.w	r2, r1, r2
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0b7      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800565a:	4b5e      	ldr	r3, [pc, #376]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	495b      	ldr	r1, [pc, #364]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005668:	4313      	orrs	r3, r2
 800566a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800566c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005674:	4b57      	ldr	r3, [pc, #348]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4a56      	ldr	r2, [pc, #344]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800567a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800568c:	4b51      	ldr	r3, [pc, #324]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	f023 0203 	bic.w	r2, r3, #3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	494e      	ldr	r1, [pc, #312]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800569a:	4313      	orrs	r3, r2
 800569c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056aa:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f023 0210 	bic.w	r2, r3, #16
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4947      	ldr	r1, [pc, #284]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056c8:	4b42      	ldr	r3, [pc, #264]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	493f      	ldr	r1, [pc, #252]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f023 0220 	bic.w	r2, r3, #32
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	4938      	ldr	r1, [pc, #224]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005704:	4b33      	ldr	r3, [pc, #204]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	4930      	ldr	r1, [pc, #192]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005712:	4313      	orrs	r3, r2
 8005714:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	4929      	ldr	r1, [pc, #164]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005740:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	4921      	ldr	r1, [pc, #132]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800574e:	4313      	orrs	r3, r2
 8005750:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	491a      	ldr	r1, [pc, #104]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800576c:	4313      	orrs	r3, r2
 800576e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	4912      	ldr	r1, [pc, #72]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800578a:	4313      	orrs	r3, r2
 800578c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	490b      	ldr	r1, [pc, #44]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4903      	ldr	r1, [pc, #12]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3748      	adds	r7, #72	; 0x48
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40021000 	.word	0x40021000

080057d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e049      	b.n	800587e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fc f984 	bl	8001b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 f94a 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0ff      	b.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b14      	cmp	r3, #20
 80058b2:	f200 80f0 	bhi.w	8005a96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	08005911 	.word	0x08005911
 80058c0:	08005a97 	.word	0x08005a97
 80058c4:	08005a97 	.word	0x08005a97
 80058c8:	08005a97 	.word	0x08005a97
 80058cc:	08005951 	.word	0x08005951
 80058d0:	08005a97 	.word	0x08005a97
 80058d4:	08005a97 	.word	0x08005a97
 80058d8:	08005a97 	.word	0x08005a97
 80058dc:	08005993 	.word	0x08005993
 80058e0:	08005a97 	.word	0x08005a97
 80058e4:	08005a97 	.word	0x08005a97
 80058e8:	08005a97 	.word	0x08005a97
 80058ec:	080059d3 	.word	0x080059d3
 80058f0:	08005a97 	.word	0x08005a97
 80058f4:	08005a97 	.word	0x08005a97
 80058f8:	08005a97 	.word	0x08005a97
 80058fc:	08005a15 	.word	0x08005a15
 8005900:	08005a97 	.word	0x08005a97
 8005904:	08005a97 	.word	0x08005a97
 8005908:	08005a97 	.word	0x08005a97
 800590c:	08005a55 	.word	0x08005a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f938 	bl	8005b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6999      	ldr	r1, [r3, #24]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	619a      	str	r2, [r3, #24]
      break;
 800594e:	e0a5      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f99e 	bl	8005c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	619a      	str	r2, [r3, #24]
      break;
 8005990:	e084      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f9fd 	bl	8005d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0208 	orr.w	r2, r2, #8
 80059ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0204 	bic.w	r2, r2, #4
 80059bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69d9      	ldr	r1, [r3, #28]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	61da      	str	r2, [r3, #28]
      break;
 80059d0:	e064      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fa5b 	bl	8005e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	61da      	str	r2, [r3, #28]
      break;
 8005a12:	e043      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa9e 	bl	8005f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0208 	orr.w	r2, r2, #8
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0204 	bic.w	r2, r2, #4
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a52:	e023      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fadc 	bl	8006018 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a94:	e002      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
      break;
 8005a9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2e      	ldr	r2, [pc, #184]	; (8005b7c <TIM_Base_SetConfig+0xcc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x20>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <TIM_Base_SetConfig+0xcc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x5a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x5a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <TIM_Base_SetConfig+0xd0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x5a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <TIM_Base_SetConfig+0xd4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x5a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <TIM_Base_SetConfig+0xd8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a0e      	ldr	r2, [pc, #56]	; (8005b7c <TIM_Base_SetConfig+0xcc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_Base_SetConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <TIM_Base_SetConfig+0xd0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_Base_SetConfig+0xb0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <TIM_Base_SetConfig+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0xb0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0b      	ldr	r2, [pc, #44]	; (8005b88 <TIM_Base_SetConfig+0xd8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d103      	bne.n	8005b68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0201 	bic.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 0302 	bic.w	r3, r3, #2
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a28      	ldr	r2, [pc, #160]	; (8005c88 <TIM_OC1_SetConfig+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_OC1_SetConfig+0x78>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a27      	ldr	r2, [pc, #156]	; (8005c8c <TIM_OC1_SetConfig+0x100>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_OC1_SetConfig+0x78>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <TIM_OC1_SetConfig+0x104>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC1_SetConfig+0x78>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <TIM_OC1_SetConfig+0x108>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10c      	bne.n	8005c1e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0308 	bic.w	r3, r3, #8
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <TIM_OC1_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00b      	beq.n	8005c3e <TIM_OC1_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <TIM_OC1_SetConfig+0x100>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d007      	beq.n	8005c3e <TIM_OC1_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <TIM_OC1_SetConfig+0x104>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC1_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <TIM_OC1_SetConfig+0x108>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d111      	bne.n	8005c62 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0210 	bic.w	r2, r3, #16
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0320 	bic.w	r3, r3, #32
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_OC2_SetConfig+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <TIM_OC2_SetConfig+0xf0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_OC2_SetConfig+0xa0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1a      	ldr	r2, [pc, #104]	; (8005d8c <TIM_OC2_SetConfig+0xf4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC2_SetConfig+0xa0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <TIM_OC2_SetConfig+0xf8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC2_SetConfig+0xa0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <TIM_OC2_SetConfig+0xfc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d113      	bne.n	8005d60 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800

08005d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <TIM_OC3_SetConfig+0xec>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10d      	bne.n	8005e16 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e14:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <TIM_OC3_SetConfig+0xec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_OC3_SetConfig+0x9e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <TIM_OC3_SetConfig+0xf0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_OC3_SetConfig+0x9e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <TIM_OC3_SetConfig+0xf4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC3_SetConfig+0x9e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <TIM_OC3_SetConfig+0xf8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d113      	bne.n	8005e5e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800

08005e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC4_SetConfig+0xb8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_OC4_SetConfig+0x7c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <TIM_OC4_SetConfig+0xbc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC4_SetConfig+0x7c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <TIM_OC4_SetConfig+0xc0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC4_SetConfig+0x7c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <TIM_OC4_SetConfig+0xc4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d109      	bne.n	8005f24 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	019b      	lsls	r3, r3, #6
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800

08005f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <TIM_OC5_SetConfig+0xac>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_OC5_SetConfig+0x72>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <TIM_OC5_SetConfig+0xb0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <TIM_OC5_SetConfig+0x72>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <TIM_OC5_SetConfig+0xb4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_OC5_SetConfig+0x72>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a12      	ldr	r2, [pc, #72]	; (8006014 <TIM_OC5_SetConfig+0xb8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d109      	bne.n	8005fe2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800605e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	051b      	lsls	r3, r3, #20
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <TIM_OC6_SetConfig+0xb0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC6_SetConfig+0x74>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a15      	ldr	r2, [pc, #84]	; (80060cc <TIM_OC6_SetConfig+0xb4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC6_SetConfig+0x74>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <TIM_OC6_SetConfig+0xb8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC6_SetConfig+0x74>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <TIM_OC6_SetConfig+0xbc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <HAL_TIMEx_PWMN_Start+0x24>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e022      	b.n	8006142 <HAL_TIMEx_PWMN_Start+0x6a>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d109      	bne.n	8006116 <HAL_TIMEx_PWMN_Start+0x3e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	e015      	b.n	8006142 <HAL_TIMEx_PWMN_Start+0x6a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d109      	bne.n	8006130 <HAL_TIMEx_PWMN_Start+0x58>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e008      	b.n	8006142 <HAL_TIMEx_PWMN_Start+0x6a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e05a      	b.n	8006200 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_TIMEx_PWMN_Start+0x82>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	e013      	b.n	8006182 <HAL_TIMEx_PWMN_Start+0xaa>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d104      	bne.n	800616a <HAL_TIMEx_PWMN_Start+0x92>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006168:	e00b      	b.n	8006182 <HAL_TIMEx_PWMN_Start+0xaa>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d104      	bne.n	800617a <HAL_TIMEx_PWMN_Start+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006178:	e003      	b.n	8006182 <HAL_TIMEx_PWMN_Start+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2204      	movs	r2, #4
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f920 	bl	80063d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800619e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_TIMEx_PWMN_Start+0x130>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIMEx_PWMN_Start+0xe6>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d004      	beq.n	80061be <HAL_TIMEx_PWMN_Start+0xe6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a14      	ldr	r2, [pc, #80]	; (800620c <HAL_TIMEx_PWMN_Start+0x134>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d115      	bne.n	80061ea <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	4b12      	ldr	r3, [pc, #72]	; (8006210 <HAL_TIMEx_PWMN_Start+0x138>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d015      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x124>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d6:	d011      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0201 	orr.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	e008      	b.n	80061fc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e000      	b.n	80061fe <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40012c00 	.word	0x40012c00
 800620c:	40014000 	.word	0x40014000
 8006210:	00010007 	.word	0x00010007

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e04f      	b.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d108      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800625c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d004      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10c      	bne.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40014000 	.word	0x40014000

080062e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e060      	b.n	80063be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d115      	bne.n	80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	051b      	lsls	r3, r3, #20
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	2204      	movs	r2, #4
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1a      	ldr	r2, [r3, #32]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	431a      	orrs	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e040      	b.n	80064ae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb fbcf 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	; 0x24
 8006446:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc1d 	bl	8006c98 <UART_SetConfig>
 800645e:	4603      	mov	r3, r0
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e022      	b.n	80064ae <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fd47 	bl	8006f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006494:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fdce 	bl	8007048 <UART_CheckIdleState>
 80064ac:	4603      	mov	r3, r0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08a      	sub	sp, #40	; 0x28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	4613      	mov	r3, r2
 80064c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d13d      	bne.n	8006548 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_UART_Receive_IT+0x22>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e036      	b.n	800654a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Receive_IT+0x34>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e02f      	b.n	800654a <HAL_UART_Receive_IT+0x94>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d018      	beq.n	8006538 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	613b      	str	r3, [r7, #16]
   return(result);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	61bb      	str	r3, [r7, #24]
   return(result);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006538:	88fb      	ldrh	r3, [r7, #6]
 800653a:	461a      	mov	r2, r3
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fe90 	bl	8007264 <UART_Start_Receive_IT>
 8006544:	4603      	mov	r3, r0
 8006546:	e000      	b.n	800654a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006566:	2b20      	cmp	r3, #32
 8006568:	d178      	bne.n	800665c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_UART_Transmit_DMA+0x22>
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e071      	b.n	800665e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_UART_Transmit_DMA+0x34>
 8006584:	2302      	movs	r3, #2
 8006586:	e06a      	b.n	800665e <HAL_UART_Transmit_DMA+0x10a>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2221      	movs	r2, #33	; 0x21
 80065b2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d02b      	beq.n	8006614 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c0:	4a29      	ldr	r2, [pc, #164]	; (8006668 <HAL_UART_Transmit_DMA+0x114>)
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c8:	4a28      	ldr	r2, [pc, #160]	; (800666c <HAL_UART_Transmit_DMA+0x118>)
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d0:	4a27      	ldr	r2, [pc, #156]	; (8006670 <HAL_UART_Transmit_DMA+0x11c>)
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d8:	2200      	movs	r2, #0
 80065da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e4:	4619      	mov	r1, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3328      	adds	r3, #40	; 0x28
 80065ec:	461a      	mov	r2, r3
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	f7fc fdb4 	bl	800315c <HAL_DMA_Start_IT>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00c      	beq.n	8006614 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2210      	movs	r2, #16
 80065fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e024      	b.n	800665e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	613b      	str	r3, [r7, #16]
   return(result);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	623a      	str	r2, [r7, #32]
 8006646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69f9      	ldr	r1, [r7, #28]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	61bb      	str	r3, [r7, #24]
   return(result);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3728      	adds	r7, #40	; 0x28
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	080074cf 	.word	0x080074cf
 800666c:	08007563 	.word	0x08007563
 8006670:	0800757f 	.word	0x0800757f

08006674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b0ba      	sub	sp, #232	; 0xe8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800669a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800669e:	f640 030f 	movw	r3, #2063	; 0x80f
 80066a2:	4013      	ands	r3, r2
 80066a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d115      	bne.n	80066dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00f      	beq.n	80066dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 82a3 	beq.w	8006c18 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
      }
      return;
 80066da:	e29d      	b.n	8006c18 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8117 	beq.w	8006914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066f6:	4b85      	ldr	r3, [pc, #532]	; (800690c <HAL_UART_IRQHandler+0x298>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 810a 	beq.w	8006914 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d011      	beq.n	8006730 <HAL_UART_IRQHandler+0xbc>
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2201      	movs	r2, #1
 800671e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d011      	beq.n	8006760 <HAL_UART_IRQHandler+0xec>
 800673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2202      	movs	r2, #2
 800674e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006756:	f043 0204 	orr.w	r2, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d011      	beq.n	8006790 <HAL_UART_IRQHandler+0x11c>
 800676c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2204      	movs	r2, #4
 800677e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006786:	f043 0202 	orr.w	r2, r3, #2
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d017      	beq.n	80067cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2208      	movs	r2, #8
 80067ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c2:	f043 0208 	orr.w	r2, r3, #8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d012      	beq.n	80067fe <HAL_UART_IRQHandler+0x18a>
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00c      	beq.n	80067fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8209 	beq.w	8006c1c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800684a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006852:	2b00      	cmp	r3, #0
 8006854:	d04f      	beq.n	80068f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fdd6 	bl	8007408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d141      	bne.n	80068ee <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800689a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1d9      	bne.n	800686a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d013      	beq.n	80068e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	4a13      	ldr	r2, [pc, #76]	; (8006910 <HAL_UART_IRQHandler+0x29c>)
 80068c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fc fcde 	bl	800328c <HAL_DMA_Abort_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d017      	beq.n	8006906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e4:	e00f      	b.n	8006906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9c0 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ec:	e00b      	b.n	8006906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9bc 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	e007      	b.n	8006906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9b8 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006904:	e18a      	b.n	8006c1c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006906:	bf00      	nop
    return;
 8006908:	e188      	b.n	8006c1c <HAL_UART_IRQHandler+0x5a8>
 800690a:	bf00      	nop
 800690c:	04000120 	.word	0x04000120
 8006910:	080075fb 	.word	0x080075fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006918:	2b01      	cmp	r3, #1
 800691a:	f040 8143 	bne.w	8006ba4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 813c 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8135 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2210      	movs	r2, #16
 8006940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	f040 80b1 	bne.w	8006ab4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800695e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 815c 	beq.w	8006c20 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800696e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006972:	429a      	cmp	r2, r3
 8006974:	f080 8154 	bcs.w	8006c20 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800697e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	2b20      	cmp	r3, #32
 800698a:	f000 8085 	beq.w	8006a98 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1da      	bne.n	800698e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e1      	bne.n	80069d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e3      	bne.n	8006a14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a68:	f023 0310 	bic.w	r3, r3, #16
 8006a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e4      	bne.n	8006a58 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fc fbc1 	bl	800321a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8e7 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ab2:	e0b5      	b.n	8006c20 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a7 	beq.w	8006c24 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8006ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80a2 	beq.w	8006c24 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b02:	647b      	str	r3, [r7, #68]	; 0x44
 8006b04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e4      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	623b      	str	r3, [r7, #32]
   return(result);
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e3      	bne.n	8006b16 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f023 0310 	bic.w	r3, r3, #16
 8006b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	69b9      	ldr	r1, [r7, #24]
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e4      	bne.n	8006b60 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f86f 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ba2:	e03f      	b.n	8006c24 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00e      	beq.n	8006bce <HAL_UART_IRQHandler+0x55a>
 8006bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 feb3 	bl	8007932 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bcc:	e02d      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01c      	beq.n	8006c28 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
    }
    return;
 8006bf6:	e017      	b.n	8006c28 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fd08 	bl	8007626 <UART_EndTransmit_IT>
    return;
 8006c16:	e008      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006c18:	bf00      	nop
 8006c1a:	e006      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
    return;
 8006c1c:	bf00      	nop
 8006c1e:	e004      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006c20:	bf00      	nop
 8006c22:	e002      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
      return;
 8006c24:	bf00      	nop
 8006c26:	e000      	b.n	8006c2a <HAL_UART_IRQHandler+0x5b6>
    return;
 8006c28:	bf00      	nop
  }

}
 8006c2a:	37e8      	adds	r7, #232	; 0xe8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b8a      	ldr	r3, [pc, #552]	; (8006eec <UART_SetConfig+0x254>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	6979      	ldr	r1, [r7, #20]
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a78      	ldr	r2, [pc, #480]	; (8006ef0 <UART_SetConfig+0x258>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d120      	bne.n	8006d56 <UART_SetConfig+0xbe>
 8006d14:	4b77      	ldr	r3, [pc, #476]	; (8006ef4 <UART_SetConfig+0x25c>)
 8006d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d817      	bhi.n	8006d50 <UART_SetConfig+0xb8>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x90>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d45 	.word	0x08006d45
 8006d30:	08006d4b 	.word	0x08006d4b
 8006d34:	08006d3f 	.word	0x08006d3f
 8006d38:	2300      	movs	r3, #0
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e01d      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e01a      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d44:	2304      	movs	r3, #4
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e017      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e014      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d50:	2310      	movs	r3, #16
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e011      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a67      	ldr	r2, [pc, #412]	; (8006ef8 <UART_SetConfig+0x260>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d102      	bne.n	8006d66 <UART_SetConfig+0xce>
 8006d60:	2300      	movs	r3, #0
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e009      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a64      	ldr	r2, [pc, #400]	; (8006efc <UART_SetConfig+0x264>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d102      	bne.n	8006d76 <UART_SetConfig+0xde>
 8006d70:	2300      	movs	r3, #0
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e001      	b.n	8006d7a <UART_SetConfig+0xe2>
 8006d76:	2310      	movs	r3, #16
 8006d78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d82:	d15b      	bne.n	8006e3c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006d84:	7ffb      	ldrb	r3, [r7, #31]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d827      	bhi.n	8006dda <UART_SetConfig+0x142>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0xf8>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006ddb 	.word	0x08006ddb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006ddb 	.word	0x08006ddb
 8006da8:	08006ddb 	.word	0x08006ddb
 8006dac:	08006ddb 	.word	0x08006ddb
 8006db0:	08006dd3 	.word	0x08006dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fe fb3a 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006db8:	61b8      	str	r0, [r7, #24]
        break;
 8006dba:	e013      	b.n	8006de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dbc:	f7fe fb58 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 8006dc0:	61b8      	str	r0, [r7, #24]
        break;
 8006dc2:	e00f      	b.n	8006de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc4:	4b4e      	ldr	r3, [pc, #312]	; (8006f00 <UART_SetConfig+0x268>)
 8006dc6:	61bb      	str	r3, [r7, #24]
        break;
 8006dc8:	e00c      	b.n	8006de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fe fab9 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006dce:	61b8      	str	r0, [r7, #24]
        break;
 8006dd0:	e008      	b.n	8006de4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd6:	61bb      	str	r3, [r7, #24]
        break;
 8006dd8:	e004      	b.n	8006de4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	77bb      	strb	r3, [r7, #30]
        break;
 8006de2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d074      	beq.n	8006ed4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	005a      	lsls	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	441a      	add	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b0f      	cmp	r3, #15
 8006e06:	d916      	bls.n	8006e36 <UART_SetConfig+0x19e>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0e:	d212      	bcs.n	8006e36 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f023 030f 	bic.w	r3, r3, #15
 8006e18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	89fb      	ldrh	r3, [r7, #14]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	89fa      	ldrh	r2, [r7, #14]
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e04e      	b.n	8006ed4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	77bb      	strb	r3, [r7, #30]
 8006e3a:	e04b      	b.n	8006ed4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e3c:	7ffb      	ldrb	r3, [r7, #31]
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d827      	bhi.n	8006e92 <UART_SetConfig+0x1fa>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <UART_SetConfig+0x1b0>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe fade 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006e70:	61b8      	str	r0, [r7, #24]
        break;
 8006e72:	e013      	b.n	8006e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe fafc 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 8006e78:	61b8      	str	r0, [r7, #24]
        break;
 8006e7a:	e00f      	b.n	8006e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <UART_SetConfig+0x268>)
 8006e7e:	61bb      	str	r3, [r7, #24]
        break;
 8006e80:	e00c      	b.n	8006e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fe fa5d 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006e86:	61b8      	str	r0, [r7, #24]
        break;
 8006e88:	e008      	b.n	8006e9c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	61bb      	str	r3, [r7, #24]
        break;
 8006e90:	e004      	b.n	8006e9c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	77bb      	strb	r3, [r7, #30]
        break;
 8006e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d018      	beq.n	8006ed4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	085a      	lsrs	r2, r3, #1
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	441a      	add	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d908      	bls.n	8006ed0 <UART_SetConfig+0x238>
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d204      	bcs.n	8006ed0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	e001      	b.n	8006ed4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	efff69f3 	.word	0xefff69f3
 8006ef0:	40013800 	.word	0x40013800
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	40004400 	.word	0x40004400
 8006efc:	40004800 	.word	0x40004800
 8006f00:	007a1200 	.word	0x007a1200

08006f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01a      	beq.n	800701a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007002:	d10a      	bne.n	800701a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007058:	f7fb f82c 	bl	80020b4 <HAL_GetTick>
 800705c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b08      	cmp	r3, #8
 800706a:	d10e      	bne.n	800708a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800706c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f82d 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e023      	b.n	80070d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d10e      	bne.n	80070b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f817 	bl	80070da <UART_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e00d      	b.n	80070d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b09c      	sub	sp, #112	; 0x70
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ea:	e0a5      	b.n	8007238 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	f000 80a1 	beq.w	8007238 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f6:	f7fa ffdd 	bl	80020b4 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <UART_WaitOnFlagUntilTimeout+0x32>
 8007106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007108:	2b00      	cmp	r3, #0
 800710a:	d13e      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007120:	667b      	str	r3, [r7, #100]	; 0x64
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800712a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800712c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e6      	bne.n	800710c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	663b      	str	r3, [r7, #96]	; 0x60
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800715e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800716c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e5      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e067      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d04f      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a6:	d147      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
 80071d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e6      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	613b      	str	r3, [r7, #16]
   return(result);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f023 0301 	bic.w	r3, r3, #1
 80071fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3308      	adds	r3, #8
 8007202:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007204:	623a      	str	r2, [r7, #32]
 8007206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69f9      	ldr	r1, [r7, #28]
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	61bb      	str	r3, [r7, #24]
   return(result);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e5      	bne.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e010      	b.n	800725a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	f43f af4a 	beq.w	80070ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3770      	adds	r7, #112	; 0x70
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007264:	b480      	push	{r7}
 8007266:	b091      	sub	sp, #68	; 0x44
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	d10e      	bne.n	80072b6 <UART_Start_Receive_IT+0x52>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <UART_Start_Receive_IT+0x48>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072aa:	e02d      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	22ff      	movs	r2, #255	; 0xff
 80072b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072b4:	e028      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10d      	bne.n	80072da <UART_Start_Receive_IT+0x76>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <UART_Start_Receive_IT+0x6c>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	22ff      	movs	r2, #255	; 0xff
 80072ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ce:	e01b      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	227f      	movs	r2, #127	; 0x7f
 80072d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d8:	e016      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e2:	d10d      	bne.n	8007300 <UART_Start_Receive_IT+0x9c>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <UART_Start_Receive_IT+0x92>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	227f      	movs	r2, #127	; 0x7f
 80072f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f4:	e008      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	223f      	movs	r2, #63	; 0x3f
 80072fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072fe:	e003      	b.n	8007308 <UART_Start_Receive_IT+0xa4>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2222      	movs	r2, #34	; 0x22
 8007314:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	f043 0301 	orr.w	r3, r3, #1
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007336:	637a      	str	r2, [r7, #52]	; 0x34
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800733c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e5      	bne.n	8007316 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	d107      	bne.n	8007364 <UART_Start_Receive_IT+0x100>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a15      	ldr	r2, [pc, #84]	; (80073b4 <UART_Start_Receive_IT+0x150>)
 8007360:	665a      	str	r2, [r3, #100]	; 0x64
 8007362:	e002      	b.n	800736a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a14      	ldr	r2, [pc, #80]	; (80073b8 <UART_Start_Receive_IT+0x154>)
 8007368:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	613b      	str	r3, [r7, #16]
   return(result);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007386:	63bb      	str	r3, [r7, #56]	; 0x38
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	623b      	str	r3, [r7, #32]
 8007392:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007394:	69f9      	ldr	r1, [r7, #28]
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	e841 2300 	strex	r3, r2, [r1]
 800739c:	61bb      	str	r3, [r7, #24]
   return(result);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1e6      	bne.n	8007372 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3744      	adds	r7, #68	; 0x44
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	080077d7 	.word	0x080077d7
 80073b8:	0800767b 	.word	0x0800767b

080073bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6979      	ldr	r1, [r7, #20]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	613b      	str	r3, [r7, #16]
   return(result);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e6      	bne.n	80073c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80073fc:	bf00      	nop
 80073fe:	3724      	adds	r7, #36	; 0x24
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b095      	sub	sp, #84	; 0x54
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800742e:	643b      	str	r3, [r7, #64]	; 0x40
 8007430:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e6      	bne.n	8007410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	61fb      	str	r3, [r7, #28]
   return(result);
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747a:	2b01      	cmp	r3, #1
 800747c:	d118      	bne.n	80074b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	60bb      	str	r3, [r7, #8]
   return(result);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0310 	bic.w	r3, r3, #16
 8007492:	647b      	str	r3, [r7, #68]	; 0x44
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	613b      	str	r3, [r7, #16]
   return(result);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e6      	bne.n	800747e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074c2:	bf00      	nop
 80074c4:	3754      	adds	r7, #84	; 0x54
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b090      	sub	sp, #64	; 0x40
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d037      	beq.n	8007554 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80074e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3308      	adds	r3, #8
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	623b      	str	r3, [r7, #32]
   return(result);
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750c:	633a      	str	r2, [r7, #48]	; 0x30
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e5      	bne.n	80074ec <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	60fb      	str	r3, [r7, #12]
   return(result);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	69b9      	ldr	r1, [r7, #24]
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	617b      	str	r3, [r7, #20]
   return(result);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e6      	bne.n	8007520 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007552:	e002      	b.n	800755a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007554:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007556:	f7ff fb6b 	bl	8006c30 <HAL_UART_TxCpltCallback>
}
 800755a:	bf00      	nop
 800755c:	3740      	adds	r7, #64	; 0x40
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fb67 	bl	8006c44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007590:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007596:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d109      	bne.n	80075ba <UART_DMAError+0x3c>
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b21      	cmp	r3, #33	; 0x21
 80075aa:	d106      	bne.n	80075ba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80075b4:	6978      	ldr	r0, [r7, #20]
 80075b6:	f7ff ff01 	bl	80073bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d109      	bne.n	80075dc <UART_DMAError+0x5e>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b22      	cmp	r3, #34	; 0x22
 80075cc:	d106      	bne.n	80075dc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80075d6:	6978      	ldr	r0, [r7, #20]
 80075d8:	f7ff ff16 	bl	8007408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e2:	f043 0210 	orr.w	r2, r3, #16
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ec:	6978      	ldr	r0, [r7, #20]
 80075ee:	f7ff fb3d 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f2:	bf00      	nop
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fb27 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b088      	sub	sp, #32
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007642:	61fb      	str	r3, [r7, #28]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fadf 	bl	8006c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007672:	bf00      	nop
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b096      	sub	sp, #88	; 0x58
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007688:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007690:	2b22      	cmp	r3, #34	; 0x22
 8007692:	f040 8094 	bne.w	80077be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800769c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80076a4:	b2d9      	uxtb	r1, r3
 80076a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	400a      	ands	r2, r1
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d177      	bne.n	80077ce <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076f2:	653b      	str	r3, [r7, #80]	; 0x50
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
 80076fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	623b      	str	r3, [r7, #32]
   return(result);
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007730:	633a      	str	r2, [r7, #48]	; 0x30
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e5      	bne.n	8007710 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2b01      	cmp	r3, #1
 8007756:	d12e      	bne.n	80077b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60fb      	str	r3, [r7, #12]
   return(result);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0310 	bic.w	r3, r3, #16
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	69b9      	ldr	r1, [r7, #24]
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	617b      	str	r3, [r7, #20]
   return(result);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b10      	cmp	r3, #16
 800779c:	d103      	bne.n	80077a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2210      	movs	r2, #16
 80077a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fa66 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b4:	e00b      	b.n	80077ce <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fa4e 	bl	8006c58 <HAL_UART_RxCpltCallback>
}
 80077bc:	e007      	b.n	80077ce <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699a      	ldr	r2, [r3, #24]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0208 	orr.w	r2, r2, #8
 80077cc:	619a      	str	r2, [r3, #24]
}
 80077ce:	bf00      	nop
 80077d0:	3758      	adds	r7, #88	; 0x58
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b096      	sub	sp, #88	; 0x58
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ec:	2b22      	cmp	r3, #34	; 0x22
 80077ee:	f040 8094 	bne.w	800791a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007802:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007806:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800780a:	4013      	ands	r3, r2
 800780c:	b29a      	uxth	r2, r3
 800780e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007810:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	1c9a      	adds	r2, r3, #2
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d177      	bne.n	800792a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800784e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007858:	643b      	str	r3, [r7, #64]	; 0x40
 800785a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800785e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	61fb      	str	r3, [r7, #28]
   return(result);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800788c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d12e      	bne.n	8007912 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f023 0310 	bic.w	r3, r3, #16
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	613b      	str	r3, [r7, #16]
   return(result);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d103      	bne.n	8007902 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff f9b8 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007910:	e00b      	b.n	800792a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f9a0 	bl	8006c58 <HAL_UART_RxCpltCallback>
}
 8007918:	e007      	b.n	800792a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0208 	orr.w	r2, r2, #8
 8007928:	619a      	str	r2, [r3, #24]
}
 800792a:	bf00      	nop
 800792c:	3758      	adds	r7, #88	; 0x58
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000024 	.word	0x20000024

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f002 fec4 	bl	800a6f4 <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	0800ab84 	.word	0x0800ab84
 8007990:	0800ab84 	.word	0x0800ab84
 8007994:	0800ab84 	.word	0x0800ab84
 8007998:	0800ab8c 	.word	0x0800ab8c

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <__cvt>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	ec55 4b10 	vmov	r4, r5, d0
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	460e      	mov	r6, r1
 80079b8:	4619      	mov	r1, r3
 80079ba:	462b      	mov	r3, r5
 80079bc:	bfbb      	ittet	lt
 80079be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079c2:	461d      	movlt	r5, r3
 80079c4:	2300      	movge	r3, #0
 80079c6:	232d      	movlt	r3, #45	; 0x2d
 80079c8:	700b      	strb	r3, [r1, #0]
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d0:	4691      	mov	r9, r2
 80079d2:	f023 0820 	bic.w	r8, r3, #32
 80079d6:	bfbc      	itt	lt
 80079d8:	4622      	movlt	r2, r4
 80079da:	4614      	movlt	r4, r2
 80079dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079e0:	d005      	beq.n	80079ee <__cvt+0x42>
 80079e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079e6:	d100      	bne.n	80079ea <__cvt+0x3e>
 80079e8:	3601      	adds	r6, #1
 80079ea:	2102      	movs	r1, #2
 80079ec:	e000      	b.n	80079f0 <__cvt+0x44>
 80079ee:	2103      	movs	r1, #3
 80079f0:	ab03      	add	r3, sp, #12
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	ab02      	add	r3, sp, #8
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	ec45 4b10 	vmov	d0, r4, r5
 80079fc:	4653      	mov	r3, sl
 80079fe:	4632      	mov	r2, r6
 8007a00:	f000 fcfa 	bl	80083f8 <_dtoa_r>
 8007a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a08:	4607      	mov	r7, r0
 8007a0a:	d102      	bne.n	8007a12 <__cvt+0x66>
 8007a0c:	f019 0f01 	tst.w	r9, #1
 8007a10:	d022      	beq.n	8007a58 <__cvt+0xac>
 8007a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a16:	eb07 0906 	add.w	r9, r7, r6
 8007a1a:	d110      	bne.n	8007a3e <__cvt+0x92>
 8007a1c:	783b      	ldrb	r3, [r7, #0]
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d10a      	bne.n	8007a38 <__cvt+0x8c>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2e:	b918      	cbnz	r0, 8007a38 <__cvt+0x8c>
 8007a30:	f1c6 0601 	rsb	r6, r6, #1
 8007a34:	f8ca 6000 	str.w	r6, [sl]
 8007a38:	f8da 3000 	ldr.w	r3, [sl]
 8007a3c:	4499      	add	r9, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f9 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4a:	b108      	cbz	r0, 8007a50 <__cvt+0xa4>
 8007a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a50:	2230      	movs	r2, #48	; 0x30
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	454b      	cmp	r3, r9
 8007a56:	d307      	bcc.n	8007a68 <__cvt+0xbc>
 8007a58:	9b03      	ldr	r3, [sp, #12]
 8007a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5c:	1bdb      	subs	r3, r3, r7
 8007a5e:	4638      	mov	r0, r7
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	b004      	add	sp, #16
 8007a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9103      	str	r1, [sp, #12]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e7f0      	b.n	8007a52 <__cvt+0xa6>

08007a70 <__exponent>:
 8007a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a72:	4603      	mov	r3, r0
 8007a74:	2900      	cmp	r1, #0
 8007a76:	bfb8      	it	lt
 8007a78:	4249      	neglt	r1, r1
 8007a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a7e:	bfb4      	ite	lt
 8007a80:	222d      	movlt	r2, #45	; 0x2d
 8007a82:	222b      	movge	r2, #43	; 0x2b
 8007a84:	2909      	cmp	r1, #9
 8007a86:	7042      	strb	r2, [r0, #1]
 8007a88:	dd2a      	ble.n	8007ae0 <__exponent+0x70>
 8007a8a:	f10d 0407 	add.w	r4, sp, #7
 8007a8e:	46a4      	mov	ip, r4
 8007a90:	270a      	movs	r7, #10
 8007a92:	46a6      	mov	lr, r4
 8007a94:	460a      	mov	r2, r1
 8007a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a9e:	3530      	adds	r5, #48	; 0x30
 8007aa0:	2a63      	cmp	r2, #99	; 0x63
 8007aa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	dcf1      	bgt.n	8007a92 <__exponent+0x22>
 8007aae:	3130      	adds	r1, #48	; 0x30
 8007ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8007ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ab8:	1c44      	adds	r4, r0, #1
 8007aba:	4629      	mov	r1, r5
 8007abc:	4561      	cmp	r1, ip
 8007abe:	d30a      	bcc.n	8007ad6 <__exponent+0x66>
 8007ac0:	f10d 0209 	add.w	r2, sp, #9
 8007ac4:	eba2 020e 	sub.w	r2, r2, lr
 8007ac8:	4565      	cmp	r5, ip
 8007aca:	bf88      	it	hi
 8007acc:	2200      	movhi	r2, #0
 8007ace:	4413      	add	r3, r2
 8007ad0:	1a18      	subs	r0, r3, r0
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ade:	e7ed      	b.n	8007abc <__exponent+0x4c>
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	3130      	adds	r1, #48	; 0x30
 8007ae4:	7083      	strb	r3, [r0, #2]
 8007ae6:	70c1      	strb	r1, [r0, #3]
 8007ae8:	1d03      	adds	r3, r0, #4
 8007aea:	e7f1      	b.n	8007ad0 <__exponent+0x60>

08007aec <_printf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	ed2d 8b02 	vpush	{d8}
 8007af4:	b08d      	sub	sp, #52	; 0x34
 8007af6:	460c      	mov	r4, r1
 8007af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007afc:	4616      	mov	r6, r2
 8007afe:	461f      	mov	r7, r3
 8007b00:	4605      	mov	r5, r0
 8007b02:	f001 fa65 	bl	8008fd0 <_localeconv_r>
 8007b06:	f8d0 a000 	ldr.w	sl, [r0]
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7f8 fb60 	bl	80001d0 <strlen>
 8007b10:	2300      	movs	r3, #0
 8007b12:	930a      	str	r3, [sp, #40]	; 0x28
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b20:	3307      	adds	r3, #7
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	f103 0208 	add.w	r2, r3, #8
 8007b2a:	f8c8 2000 	str.w	r2, [r8]
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	4b9f      	ldr	r3, [pc, #636]	; (8007dc8 <_printf_float+0x2dc>)
 8007b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b52:	f7f8 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 8007b56:	bb88      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b5c:	4b9a      	ldr	r3, [pc, #616]	; (8007dc8 <_printf_float+0x2dc>)
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	f7f8 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8007b66:	bb48      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	b110      	cbz	r0, 8007b7c <_printf_float+0x90>
 8007b76:	232d      	movs	r3, #45	; 0x2d
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	4b93      	ldr	r3, [pc, #588]	; (8007dcc <_printf_float+0x2e0>)
 8007b7e:	4894      	ldr	r0, [pc, #592]	; (8007dd0 <_printf_float+0x2e4>)
 8007b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b84:	bf94      	ite	ls
 8007b86:	4698      	movls	r8, r3
 8007b88:	4680      	movhi	r8, r0
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	f023 0204 	bic.w	r2, r3, #4
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	9700      	str	r7, [sp, #0]
 8007b9c:	4633      	mov	r3, r6
 8007b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f9d8 	bl	8007f58 <_printf_common>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f040 8090 	bne.w	8007cce <_printf_float+0x1e2>
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	b00d      	add	sp, #52	; 0x34
 8007bb4:	ecbd 8b02 	vpop	{d8}
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8007bc8:	b140      	cbz	r0, 8007bdc <_printf_float+0xf0>
 8007bca:	464b      	mov	r3, r9
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfbc      	itt	lt
 8007bd0:	232d      	movlt	r3, #45	; 0x2d
 8007bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bd6:	487f      	ldr	r0, [pc, #508]	; (8007dd4 <_printf_float+0x2e8>)
 8007bd8:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <_printf_float+0x2ec>)
 8007bda:	e7d1      	b.n	8007b80 <_printf_float+0x94>
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007be2:	9206      	str	r2, [sp, #24]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	d13f      	bne.n	8007c68 <_printf_float+0x17c>
 8007be8:	2306      	movs	r3, #6
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	6861      	ldr	r1, [r4, #4]
 8007bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8007bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bfe:	ab09      	add	r3, sp, #36	; 0x24
 8007c00:	ec49 8b10 	vmov	d0, r8, r9
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f7ff fecd 	bl	80079ac <__cvt>
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c16:	2b47      	cmp	r3, #71	; 0x47
 8007c18:	4680      	mov	r8, r0
 8007c1a:	d108      	bne.n	8007c2e <_printf_float+0x142>
 8007c1c:	1cc8      	adds	r0, r1, #3
 8007c1e:	db02      	blt.n	8007c26 <_printf_float+0x13a>
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	4299      	cmp	r1, r3
 8007c24:	dd41      	ble.n	8007caa <_printf_float+0x1be>
 8007c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8007c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c32:	d820      	bhi.n	8007c76 <_printf_float+0x18a>
 8007c34:	3901      	subs	r1, #1
 8007c36:	465a      	mov	r2, fp
 8007c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007c3e:	f7ff ff17 	bl	8007a70 <__exponent>
 8007c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c44:	1813      	adds	r3, r2, r0
 8007c46:	2a01      	cmp	r2, #1
 8007c48:	4681      	mov	r9, r0
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	dc02      	bgt.n	8007c54 <_printf_float+0x168>
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	07d2      	lsls	r2, r2, #31
 8007c52:	d501      	bpl.n	8007c58 <_printf_float+0x16c>
 8007c54:	3301      	adds	r3, #1
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d09c      	beq.n	8007b9a <_printf_float+0xae>
 8007c60:	232d      	movs	r3, #45	; 0x2d
 8007c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c66:	e798      	b.n	8007b9a <_printf_float+0xae>
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	2a47      	cmp	r2, #71	; 0x47
 8007c6c:	d1be      	bne.n	8007bec <_printf_float+0x100>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1bc      	bne.n	8007bec <_printf_float+0x100>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7b9      	b.n	8007bea <_printf_float+0xfe>
 8007c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c7a:	d118      	bne.n	8007cae <_printf_float+0x1c2>
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	dd0b      	ble.n	8007c9a <_printf_float+0x1ae>
 8007c82:	6121      	str	r1, [r4, #16]
 8007c84:	b913      	cbnz	r3, 8007c8c <_printf_float+0x1a0>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	07d0      	lsls	r0, r2, #31
 8007c8a:	d502      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	440b      	add	r3, r1
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	e7de      	b.n	8007c58 <_printf_float+0x16c>
 8007c9a:	b913      	cbnz	r3, 8007ca2 <_printf_float+0x1b6>
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	07d2      	lsls	r2, r2, #31
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_float+0x1ba>
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	e7f4      	b.n	8007c90 <_printf_float+0x1a4>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e7f2      	b.n	8007c90 <_printf_float+0x1a4>
 8007caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	db05      	blt.n	8007cc0 <_printf_float+0x1d4>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	6121      	str	r1, [r4, #16]
 8007cb8:	07d8      	lsls	r0, r3, #31
 8007cba:	d5ea      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007cbc:	1c4b      	adds	r3, r1, #1
 8007cbe:	e7e7      	b.n	8007c90 <_printf_float+0x1a4>
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfd4      	ite	le
 8007cc4:	f1c1 0202 	rsble	r2, r1, #2
 8007cc8:	2201      	movgt	r2, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	e7e0      	b.n	8007c90 <_printf_float+0x1a4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	055a      	lsls	r2, r3, #21
 8007cd2:	d407      	bmi.n	8007ce4 <_printf_float+0x1f8>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d12c      	bne.n	8007d3c <_printf_float+0x250>
 8007ce2:	e764      	b.n	8007bae <_printf_float+0xc2>
 8007ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ce8:	f240 80e0 	bls.w	8007eac <_printf_float+0x3c0>
 8007cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f7f8 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d034      	beq.n	8007d66 <_printf_float+0x27a>
 8007cfc:	4a37      	ldr	r2, [pc, #220]	; (8007ddc <_printf_float+0x2f0>)
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f af51 	beq.w	8007bae <_printf_float+0xc2>
 8007d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d10:	429a      	cmp	r2, r3
 8007d12:	db02      	blt.n	8007d1a <_printf_float+0x22e>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	07d8      	lsls	r0, r3, #31
 8007d18:	d510      	bpl.n	8007d3c <_printf_float+0x250>
 8007d1a:	ee18 3a10 	vmov	r3, s16
 8007d1e:	4652      	mov	r2, sl
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af41 	beq.w	8007bae <_printf_float+0xc2>
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	f104 091a 	add.w	r9, r4, #26
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	dc09      	bgt.n	8007d50 <_printf_float+0x264>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	f100 8105 	bmi.w	8007f4e <_printf_float+0x462>
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	4618      	movlt	r0, r3
 8007d4e:	e730      	b.n	8007bb2 <_printf_float+0xc6>
 8007d50:	2301      	movs	r3, #1
 8007d52:	464a      	mov	r2, r9
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af27 	beq.w	8007bae <_printf_float+0xc2>
 8007d60:	f108 0801 	add.w	r8, r8, #1
 8007d64:	e7e6      	b.n	8007d34 <_printf_float+0x248>
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc39      	bgt.n	8007de0 <_printf_float+0x2f4>
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <_printf_float+0x2f0>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	47b8      	blx	r7
 8007d76:	3001      	adds	r0, #1
 8007d78:	f43f af19 	beq.w	8007bae <_printf_float+0xc2>
 8007d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d102      	bne.n	8007d8a <_printf_float+0x29e>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	07d9      	lsls	r1, r3, #31
 8007d88:	d5d8      	bpl.n	8007d3c <_printf_float+0x250>
 8007d8a:	ee18 3a10 	vmov	r3, s16
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af09 	beq.w	8007bae <_printf_float+0xc2>
 8007d9c:	f04f 0900 	mov.w	r9, #0
 8007da0:	f104 0a1a 	add.w	sl, r4, #26
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	425b      	negs	r3, r3
 8007da8:	454b      	cmp	r3, r9
 8007daa:	dc01      	bgt.n	8007db0 <_printf_float+0x2c4>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dae:	e792      	b.n	8007cd6 <_printf_float+0x1ea>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f aef7 	beq.w	8007bae <_printf_float+0xc2>
 8007dc0:	f109 0901 	add.w	r9, r9, #1
 8007dc4:	e7ee      	b.n	8007da4 <_printf_float+0x2b8>
 8007dc6:	bf00      	nop
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	0800a7a8 	.word	0x0800a7a8
 8007dd0:	0800a7ac 	.word	0x0800a7ac
 8007dd4:	0800a7b4 	.word	0x0800a7b4
 8007dd8:	0800a7b0 	.word	0x0800a7b0
 8007ddc:	0800a7b8 	.word	0x0800a7b8
 8007de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bfa8      	it	ge
 8007de8:	461a      	movge	r2, r3
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	4691      	mov	r9, r2
 8007dee:	dc37      	bgt.n	8007e60 <_printf_float+0x374>
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df8:	f104 021a 	add.w	r2, r4, #26
 8007dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	eba3 0309 	sub.w	r3, r3, r9
 8007e04:	455b      	cmp	r3, fp
 8007e06:	dc33      	bgt.n	8007e70 <_printf_float+0x384>
 8007e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	db3b      	blt.n	8007e88 <_printf_float+0x39c>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d438      	bmi.n	8007e88 <_printf_float+0x39c>
 8007e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	eba2 0901 	sub.w	r9, r2, r1
 8007e22:	4599      	cmp	r9, r3
 8007e24:	bfa8      	it	ge
 8007e26:	4699      	movge	r9, r3
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	dc35      	bgt.n	8007e9a <_printf_float+0x3ae>
 8007e2e:	f04f 0800 	mov.w	r8, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 0a1a 	add.w	sl, r4, #26
 8007e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	eba3 0309 	sub.w	r3, r3, r9
 8007e44:	4543      	cmp	r3, r8
 8007e46:	f77f af79 	ble.w	8007d3c <_printf_float+0x250>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f aeaa 	beq.w	8007bae <_printf_float+0xc2>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	e7ec      	b.n	8007e3a <_printf_float+0x34e>
 8007e60:	4613      	mov	r3, r2
 8007e62:	4631      	mov	r1, r6
 8007e64:	4642      	mov	r2, r8
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1c0      	bne.n	8007df0 <_printf_float+0x304>
 8007e6e:	e69e      	b.n	8007bae <_printf_float+0xc2>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4631      	mov	r1, r6
 8007e74:	4628      	mov	r0, r5
 8007e76:	9205      	str	r2, [sp, #20]
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f ae97 	beq.w	8007bae <_printf_float+0xc2>
 8007e80:	9a05      	ldr	r2, [sp, #20]
 8007e82:	f10b 0b01 	add.w	fp, fp, #1
 8007e86:	e7b9      	b.n	8007dfc <_printf_float+0x310>
 8007e88:	ee18 3a10 	vmov	r3, s16
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d1be      	bne.n	8007e16 <_printf_float+0x32a>
 8007e98:	e689      	b.n	8007bae <_printf_float+0xc2>
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	4442      	add	r2, r8
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d1c1      	bne.n	8007e2e <_printf_float+0x342>
 8007eaa:	e680      	b.n	8007bae <_printf_float+0xc2>
 8007eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eae:	2a01      	cmp	r2, #1
 8007eb0:	dc01      	bgt.n	8007eb6 <_printf_float+0x3ca>
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d538      	bpl.n	8007f28 <_printf_float+0x43c>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4642      	mov	r2, r8
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f43f ae74 	beq.w	8007bae <_printf_float+0xc2>
 8007ec6:	ee18 3a10 	vmov	r3, s16
 8007eca:	4652      	mov	r2, sl
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f ae6b 	beq.w	8007bae <_printf_float+0xc2>
 8007ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f7f8 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_printf_float+0x432>
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	f108 0201 	add.w	r2, r8, #1
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d10e      	bne.n	8007f16 <_printf_float+0x42a>
 8007ef8:	e659      	b.n	8007bae <_printf_float+0xc2>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f ae52 	beq.w	8007bae <_printf_float+0xc2>
 8007f0a:	f108 0801 	add.w	r8, r8, #1
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	4543      	cmp	r3, r8
 8007f14:	dcf1      	bgt.n	8007efa <_printf_float+0x40e>
 8007f16:	464b      	mov	r3, r9
 8007f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f1c:	e6dc      	b.n	8007cd8 <_printf_float+0x1ec>
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	f104 0a1a 	add.w	sl, r4, #26
 8007f26:	e7f2      	b.n	8007f0e <_printf_float+0x422>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	e7df      	b.n	8007eee <_printf_float+0x402>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	464a      	mov	r2, r9
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae38 	beq.w	8007bae <_printf_float+0xc2>
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f46:	1a5b      	subs	r3, r3, r1
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	dcf0      	bgt.n	8007f2e <_printf_float+0x442>
 8007f4c:	e6fa      	b.n	8007d44 <_printf_float+0x258>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	f104 0919 	add.w	r9, r4, #25
 8007f56:	e7f4      	b.n	8007f42 <_printf_float+0x456>

08007f58 <_printf_common>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	4699      	mov	r9, r3
 8007f60:	688a      	ldr	r2, [r1, #8]
 8007f62:	690b      	ldr	r3, [r1, #16]
 8007f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfb8      	it	lt
 8007f6c:	4613      	movlt	r3, r2
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f74:	4607      	mov	r7, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	b10a      	cbz	r2, 8007f7e <_printf_common+0x26>
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	0699      	lsls	r1, r3, #26
 8007f82:	bf42      	ittt	mi
 8007f84:	6833      	ldrmi	r3, [r6, #0]
 8007f86:	3302      	addmi	r3, #2
 8007f88:	6033      	strmi	r3, [r6, #0]
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	f015 0506 	ands.w	r5, r5, #6
 8007f90:	d106      	bne.n	8007fa0 <_printf_common+0x48>
 8007f92:	f104 0a19 	add.w	sl, r4, #25
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	6832      	ldr	r2, [r6, #0]
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dc26      	bgt.n	8007fee <_printf_common+0x96>
 8007fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fa4:	1e13      	subs	r3, r2, #0
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	0692      	lsls	r2, r2, #26
 8007fae:	d42b      	bmi.n	8008008 <_printf_common+0xb0>
 8007fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	47c0      	blx	r8
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d01e      	beq.n	8007ffc <_printf_common+0xa4>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	68e5      	ldr	r5, [r4, #12]
 8007fc2:	6832      	ldr	r2, [r6, #0]
 8007fc4:	f003 0306 	and.w	r3, r3, #6
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	bf08      	it	eq
 8007fcc:	1aad      	subeq	r5, r5, r2
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	6922      	ldr	r2, [r4, #16]
 8007fd2:	bf0c      	ite	eq
 8007fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd8:	2500      	movne	r5, #0
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	bfc4      	itt	gt
 8007fde:	1a9b      	subgt	r3, r3, r2
 8007fe0:	18ed      	addgt	r5, r5, r3
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	341a      	adds	r4, #26
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	d11a      	bne.n	8008020 <_printf_common+0xc8>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e008      	b.n	8008000 <_printf_common+0xa8>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	47c0      	blx	r8
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d103      	bne.n	8008004 <_printf_common+0xac>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	3501      	adds	r5, #1
 8008006:	e7c6      	b.n	8007f96 <_printf_common+0x3e>
 8008008:	18e1      	adds	r1, r4, r3
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	2030      	movs	r0, #48	; 0x30
 800800e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008012:	4422      	add	r2, r4
 8008014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800801c:	3302      	adds	r3, #2
 800801e:	e7c7      	b.n	8007fb0 <_printf_common+0x58>
 8008020:	2301      	movs	r3, #1
 8008022:	4622      	mov	r2, r4
 8008024:	4649      	mov	r1, r9
 8008026:	4638      	mov	r0, r7
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0e6      	beq.n	8007ffc <_printf_common+0xa4>
 800802e:	3601      	adds	r6, #1
 8008030:	e7d9      	b.n	8007fe6 <_printf_common+0x8e>
	...

08008034 <_printf_i>:
 8008034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	4691      	mov	r9, r2
 800803c:	7e27      	ldrb	r7, [r4, #24]
 800803e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008040:	2f78      	cmp	r7, #120	; 0x78
 8008042:	4680      	mov	r8, r0
 8008044:	469a      	mov	sl, r3
 8008046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800804a:	d807      	bhi.n	800805c <_printf_i+0x28>
 800804c:	2f62      	cmp	r7, #98	; 0x62
 800804e:	d80a      	bhi.n	8008066 <_printf_i+0x32>
 8008050:	2f00      	cmp	r7, #0
 8008052:	f000 80d8 	beq.w	8008206 <_printf_i+0x1d2>
 8008056:	2f58      	cmp	r7, #88	; 0x58
 8008058:	f000 80a3 	beq.w	80081a2 <_printf_i+0x16e>
 800805c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008064:	e03a      	b.n	80080dc <_printf_i+0xa8>
 8008066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800806a:	2b15      	cmp	r3, #21
 800806c:	d8f6      	bhi.n	800805c <_printf_i+0x28>
 800806e:	a001      	add	r0, pc, #4	; (adr r0, 8008074 <_printf_i+0x40>)
 8008070:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080e1 	.word	0x080080e1
 800807c:	0800805d 	.word	0x0800805d
 8008080:	0800805d 	.word	0x0800805d
 8008084:	0800805d 	.word	0x0800805d
 8008088:	0800805d 	.word	0x0800805d
 800808c:	080080e1 	.word	0x080080e1
 8008090:	0800805d 	.word	0x0800805d
 8008094:	0800805d 	.word	0x0800805d
 8008098:	0800805d 	.word	0x0800805d
 800809c:	0800805d 	.word	0x0800805d
 80080a0:	080081ed 	.word	0x080081ed
 80080a4:	08008111 	.word	0x08008111
 80080a8:	080081cf 	.word	0x080081cf
 80080ac:	0800805d 	.word	0x0800805d
 80080b0:	0800805d 	.word	0x0800805d
 80080b4:	0800820f 	.word	0x0800820f
 80080b8:	0800805d 	.word	0x0800805d
 80080bc:	08008111 	.word	0x08008111
 80080c0:	0800805d 	.word	0x0800805d
 80080c4:	0800805d 	.word	0x0800805d
 80080c8:	080081d7 	.word	0x080081d7
 80080cc:	680b      	ldr	r3, [r1, #0]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	600a      	str	r2, [r1, #0]
 80080d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080dc:	2301      	movs	r3, #1
 80080de:	e0a3      	b.n	8008228 <_printf_i+0x1f4>
 80080e0:	6825      	ldr	r5, [r4, #0]
 80080e2:	6808      	ldr	r0, [r1, #0]
 80080e4:	062e      	lsls	r6, r5, #24
 80080e6:	f100 0304 	add.w	r3, r0, #4
 80080ea:	d50a      	bpl.n	8008102 <_printf_i+0xce>
 80080ec:	6805      	ldr	r5, [r0, #0]
 80080ee:	600b      	str	r3, [r1, #0]
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	da03      	bge.n	80080fc <_printf_i+0xc8>
 80080f4:	232d      	movs	r3, #45	; 0x2d
 80080f6:	426d      	negs	r5, r5
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fc:	485e      	ldr	r0, [pc, #376]	; (8008278 <_printf_i+0x244>)
 80080fe:	230a      	movs	r3, #10
 8008100:	e019      	b.n	8008136 <_printf_i+0x102>
 8008102:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008106:	6805      	ldr	r5, [r0, #0]
 8008108:	600b      	str	r3, [r1, #0]
 800810a:	bf18      	it	ne
 800810c:	b22d      	sxthne	r5, r5
 800810e:	e7ef      	b.n	80080f0 <_printf_i+0xbc>
 8008110:	680b      	ldr	r3, [r1, #0]
 8008112:	6825      	ldr	r5, [r4, #0]
 8008114:	1d18      	adds	r0, r3, #4
 8008116:	6008      	str	r0, [r1, #0]
 8008118:	0628      	lsls	r0, r5, #24
 800811a:	d501      	bpl.n	8008120 <_printf_i+0xec>
 800811c:	681d      	ldr	r5, [r3, #0]
 800811e:	e002      	b.n	8008126 <_printf_i+0xf2>
 8008120:	0669      	lsls	r1, r5, #25
 8008122:	d5fb      	bpl.n	800811c <_printf_i+0xe8>
 8008124:	881d      	ldrh	r5, [r3, #0]
 8008126:	4854      	ldr	r0, [pc, #336]	; (8008278 <_printf_i+0x244>)
 8008128:	2f6f      	cmp	r7, #111	; 0x6f
 800812a:	bf0c      	ite	eq
 800812c:	2308      	moveq	r3, #8
 800812e:	230a      	movne	r3, #10
 8008130:	2100      	movs	r1, #0
 8008132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008136:	6866      	ldr	r6, [r4, #4]
 8008138:	60a6      	str	r6, [r4, #8]
 800813a:	2e00      	cmp	r6, #0
 800813c:	bfa2      	ittt	ge
 800813e:	6821      	ldrge	r1, [r4, #0]
 8008140:	f021 0104 	bicge.w	r1, r1, #4
 8008144:	6021      	strge	r1, [r4, #0]
 8008146:	b90d      	cbnz	r5, 800814c <_printf_i+0x118>
 8008148:	2e00      	cmp	r6, #0
 800814a:	d04d      	beq.n	80081e8 <_printf_i+0x1b4>
 800814c:	4616      	mov	r6, r2
 800814e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008152:	fb03 5711 	mls	r7, r3, r1, r5
 8008156:	5dc7      	ldrb	r7, [r0, r7]
 8008158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800815c:	462f      	mov	r7, r5
 800815e:	42bb      	cmp	r3, r7
 8008160:	460d      	mov	r5, r1
 8008162:	d9f4      	bls.n	800814e <_printf_i+0x11a>
 8008164:	2b08      	cmp	r3, #8
 8008166:	d10b      	bne.n	8008180 <_printf_i+0x14c>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	07df      	lsls	r7, r3, #31
 800816c:	d508      	bpl.n	8008180 <_printf_i+0x14c>
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4299      	cmp	r1, r3
 8008174:	bfde      	ittt	le
 8008176:	2330      	movle	r3, #48	; 0x30
 8008178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800817c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008180:	1b92      	subs	r2, r2, r6
 8008182:	6122      	str	r2, [r4, #16]
 8008184:	f8cd a000 	str.w	sl, [sp]
 8008188:	464b      	mov	r3, r9
 800818a:	aa03      	add	r2, sp, #12
 800818c:	4621      	mov	r1, r4
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fee2 	bl	8007f58 <_printf_common>
 8008194:	3001      	adds	r0, #1
 8008196:	d14c      	bne.n	8008232 <_printf_i+0x1fe>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b004      	add	sp, #16
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	4835      	ldr	r0, [pc, #212]	; (8008278 <_printf_i+0x244>)
 80081a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	680e      	ldr	r6, [r1, #0]
 80081ac:	061f      	lsls	r7, r3, #24
 80081ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80081b2:	600e      	str	r6, [r1, #0]
 80081b4:	d514      	bpl.n	80081e0 <_printf_i+0x1ac>
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	bf44      	itt	mi
 80081ba:	f043 0320 	orrmi.w	r3, r3, #32
 80081be:	6023      	strmi	r3, [r4, #0]
 80081c0:	b91d      	cbnz	r5, 80081ca <_printf_i+0x196>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f023 0320 	bic.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	2310      	movs	r3, #16
 80081cc:	e7b0      	b.n	8008130 <_printf_i+0xfc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	2378      	movs	r3, #120	; 0x78
 80081d8:	4828      	ldr	r0, [pc, #160]	; (800827c <_printf_i+0x248>)
 80081da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081de:	e7e3      	b.n	80081a8 <_printf_i+0x174>
 80081e0:	065e      	lsls	r6, r3, #25
 80081e2:	bf48      	it	mi
 80081e4:	b2ad      	uxthmi	r5, r5
 80081e6:	e7e6      	b.n	80081b6 <_printf_i+0x182>
 80081e8:	4616      	mov	r6, r2
 80081ea:	e7bb      	b.n	8008164 <_printf_i+0x130>
 80081ec:	680b      	ldr	r3, [r1, #0]
 80081ee:	6826      	ldr	r6, [r4, #0]
 80081f0:	6960      	ldr	r0, [r4, #20]
 80081f2:	1d1d      	adds	r5, r3, #4
 80081f4:	600d      	str	r5, [r1, #0]
 80081f6:	0635      	lsls	r5, r6, #24
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0x1cc>
 80081fc:	6018      	str	r0, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0x1d2>
 8008200:	0671      	lsls	r1, r6, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0x1c8>
 8008204:	8018      	strh	r0, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	4616      	mov	r6, r2
 800820c:	e7ba      	b.n	8008184 <_printf_i+0x150>
 800820e:	680b      	ldr	r3, [r1, #0]
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	600a      	str	r2, [r1, #0]
 8008214:	681e      	ldr	r6, [r3, #0]
 8008216:	6862      	ldr	r2, [r4, #4]
 8008218:	2100      	movs	r1, #0
 800821a:	4630      	mov	r0, r6
 800821c:	f7f7 ffe0 	bl	80001e0 <memchr>
 8008220:	b108      	cbz	r0, 8008226 <_printf_i+0x1f2>
 8008222:	1b80      	subs	r0, r0, r6
 8008224:	6060      	str	r0, [r4, #4]
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	2300      	movs	r3, #0
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	e7a8      	b.n	8008184 <_printf_i+0x150>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	4632      	mov	r2, r6
 8008236:	4649      	mov	r1, r9
 8008238:	4640      	mov	r0, r8
 800823a:	47d0      	blx	sl
 800823c:	3001      	adds	r0, #1
 800823e:	d0ab      	beq.n	8008198 <_printf_i+0x164>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	079b      	lsls	r3, r3, #30
 8008244:	d413      	bmi.n	800826e <_printf_i+0x23a>
 8008246:	68e0      	ldr	r0, [r4, #12]
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	4298      	cmp	r0, r3
 800824c:	bfb8      	it	lt
 800824e:	4618      	movlt	r0, r3
 8008250:	e7a4      	b.n	800819c <_printf_i+0x168>
 8008252:	2301      	movs	r3, #1
 8008254:	4632      	mov	r2, r6
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	47d0      	blx	sl
 800825c:	3001      	adds	r0, #1
 800825e:	d09b      	beq.n	8008198 <_printf_i+0x164>
 8008260:	3501      	adds	r5, #1
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	9903      	ldr	r1, [sp, #12]
 8008266:	1a5b      	subs	r3, r3, r1
 8008268:	42ab      	cmp	r3, r5
 800826a:	dcf2      	bgt.n	8008252 <_printf_i+0x21e>
 800826c:	e7eb      	b.n	8008246 <_printf_i+0x212>
 800826e:	2500      	movs	r5, #0
 8008270:	f104 0619 	add.w	r6, r4, #25
 8008274:	e7f5      	b.n	8008262 <_printf_i+0x22e>
 8008276:	bf00      	nop
 8008278:	0800a7ba 	.word	0x0800a7ba
 800827c:	0800a7cb 	.word	0x0800a7cb

08008280 <siprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b500      	push	{lr}
 8008284:	b09c      	sub	sp, #112	; 0x70
 8008286:	ab1d      	add	r3, sp, #116	; 0x74
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008290:	4809      	ldr	r0, [pc, #36]	; (80082b8 <siprintf+0x38>)
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	9104      	str	r1, [sp, #16]
 8008296:	4909      	ldr	r1, [pc, #36]	; (80082bc <siprintf+0x3c>)
 8008298:	f853 2b04 	ldr.w	r2, [r3], #4
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	6800      	ldr	r0, [r0, #0]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	a902      	add	r1, sp, #8
 80082a4:	f001 fb42 	bl	800992c <_svfiprintf_r>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	b01c      	add	sp, #112	; 0x70
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	20000024 	.word	0x20000024
 80082bc:	ffff0208 	.word	0xffff0208

080082c0 <strcat>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	4602      	mov	r2, r0
 80082c4:	7814      	ldrb	r4, [r2, #0]
 80082c6:	4613      	mov	r3, r2
 80082c8:	3201      	adds	r2, #1
 80082ca:	2c00      	cmp	r4, #0
 80082cc:	d1fa      	bne.n	80082c4 <strcat+0x4>
 80082ce:	3b01      	subs	r3, #1
 80082d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d8:	2a00      	cmp	r2, #0
 80082da:	d1f9      	bne.n	80082d0 <strcat+0x10>
 80082dc:	bd10      	pop	{r4, pc}

080082de <quorem>:
 80082de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e2:	6903      	ldr	r3, [r0, #16]
 80082e4:	690c      	ldr	r4, [r1, #16]
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	4607      	mov	r7, r0
 80082ea:	f2c0 8081 	blt.w	80083f0 <quorem+0x112>
 80082ee:	3c01      	subs	r4, #1
 80082f0:	f101 0814 	add.w	r8, r1, #20
 80082f4:	f100 0514 	add.w	r5, r0, #20
 80082f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008306:	3301      	adds	r3, #1
 8008308:	429a      	cmp	r2, r3
 800830a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800830e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008312:	fbb2 f6f3 	udiv	r6, r2, r3
 8008316:	d331      	bcc.n	800837c <quorem+0x9e>
 8008318:	f04f 0e00 	mov.w	lr, #0
 800831c:	4640      	mov	r0, r8
 800831e:	46ac      	mov	ip, r5
 8008320:	46f2      	mov	sl, lr
 8008322:	f850 2b04 	ldr.w	r2, [r0], #4
 8008326:	b293      	uxth	r3, r2
 8008328:	fb06 e303 	mla	r3, r6, r3, lr
 800832c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008330:	b29b      	uxth	r3, r3
 8008332:	ebaa 0303 	sub.w	r3, sl, r3
 8008336:	0c12      	lsrs	r2, r2, #16
 8008338:	f8dc a000 	ldr.w	sl, [ip]
 800833c:	fb06 e202 	mla	r2, r6, r2, lr
 8008340:	fa13 f38a 	uxtah	r3, r3, sl
 8008344:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008348:	fa1f fa82 	uxth.w	sl, r2
 800834c:	f8dc 2000 	ldr.w	r2, [ip]
 8008350:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008358:	b29b      	uxth	r3, r3
 800835a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800835e:	4581      	cmp	r9, r0
 8008360:	f84c 3b04 	str.w	r3, [ip], #4
 8008364:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008368:	d2db      	bcs.n	8008322 <quorem+0x44>
 800836a:	f855 300b 	ldr.w	r3, [r5, fp]
 800836e:	b92b      	cbnz	r3, 800837c <quorem+0x9e>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	3b04      	subs	r3, #4
 8008374:	429d      	cmp	r5, r3
 8008376:	461a      	mov	r2, r3
 8008378:	d32e      	bcc.n	80083d8 <quorem+0xfa>
 800837a:	613c      	str	r4, [r7, #16]
 800837c:	4638      	mov	r0, r7
 800837e:	f001 f8bf 	bl	8009500 <__mcmp>
 8008382:	2800      	cmp	r0, #0
 8008384:	db24      	blt.n	80083d0 <quorem+0xf2>
 8008386:	3601      	adds	r6, #1
 8008388:	4628      	mov	r0, r5
 800838a:	f04f 0c00 	mov.w	ip, #0
 800838e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008392:	f8d0 e000 	ldr.w	lr, [r0]
 8008396:	b293      	uxth	r3, r2
 8008398:	ebac 0303 	sub.w	r3, ip, r3
 800839c:	0c12      	lsrs	r2, r2, #16
 800839e:	fa13 f38e 	uxtah	r3, r3, lr
 80083a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b0:	45c1      	cmp	r9, r8
 80083b2:	f840 3b04 	str.w	r3, [r0], #4
 80083b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083ba:	d2e8      	bcs.n	800838e <quorem+0xb0>
 80083bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083c4:	b922      	cbnz	r2, 80083d0 <quorem+0xf2>
 80083c6:	3b04      	subs	r3, #4
 80083c8:	429d      	cmp	r5, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	d30a      	bcc.n	80083e4 <quorem+0x106>
 80083ce:	613c      	str	r4, [r7, #16]
 80083d0:	4630      	mov	r0, r6
 80083d2:	b003      	add	sp, #12
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	3b04      	subs	r3, #4
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d1cc      	bne.n	800837a <quorem+0x9c>
 80083e0:	3c01      	subs	r4, #1
 80083e2:	e7c7      	b.n	8008374 <quorem+0x96>
 80083e4:	6812      	ldr	r2, [r2, #0]
 80083e6:	3b04      	subs	r3, #4
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	d1f0      	bne.n	80083ce <quorem+0xf0>
 80083ec:	3c01      	subs	r4, #1
 80083ee:	e7eb      	b.n	80083c8 <quorem+0xea>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e7ee      	b.n	80083d2 <quorem+0xf4>
 80083f4:	0000      	movs	r0, r0
	...

080083f8 <_dtoa_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ed2d 8b02 	vpush	{d8}
 8008400:	ec57 6b10 	vmov	r6, r7, d0
 8008404:	b095      	sub	sp, #84	; 0x54
 8008406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800840c:	9105      	str	r1, [sp, #20]
 800840e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008412:	4604      	mov	r4, r0
 8008414:	9209      	str	r2, [sp, #36]	; 0x24
 8008416:	930f      	str	r3, [sp, #60]	; 0x3c
 8008418:	b975      	cbnz	r5, 8008438 <_dtoa_r+0x40>
 800841a:	2010      	movs	r0, #16
 800841c:	f000 fddc 	bl	8008fd8 <malloc>
 8008420:	4602      	mov	r2, r0
 8008422:	6260      	str	r0, [r4, #36]	; 0x24
 8008424:	b920      	cbnz	r0, 8008430 <_dtoa_r+0x38>
 8008426:	4bb2      	ldr	r3, [pc, #712]	; (80086f0 <_dtoa_r+0x2f8>)
 8008428:	21ea      	movs	r1, #234	; 0xea
 800842a:	48b2      	ldr	r0, [pc, #712]	; (80086f4 <_dtoa_r+0x2fc>)
 800842c:	f001 fb8e 	bl	8009b4c <__assert_func>
 8008430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008434:	6005      	str	r5, [r0, #0]
 8008436:	60c5      	str	r5, [r0, #12]
 8008438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800843a:	6819      	ldr	r1, [r3, #0]
 800843c:	b151      	cbz	r1, 8008454 <_dtoa_r+0x5c>
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	604a      	str	r2, [r1, #4]
 8008442:	2301      	movs	r3, #1
 8008444:	4093      	lsls	r3, r2
 8008446:	608b      	str	r3, [r1, #8]
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fe1b 	bl	8009084 <_Bfree>
 800844e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	1e3b      	subs	r3, r7, #0
 8008456:	bfb9      	ittee	lt
 8008458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800845c:	9303      	strlt	r3, [sp, #12]
 800845e:	2300      	movge	r3, #0
 8008460:	f8c8 3000 	strge.w	r3, [r8]
 8008464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008468:	4ba3      	ldr	r3, [pc, #652]	; (80086f8 <_dtoa_r+0x300>)
 800846a:	bfbc      	itt	lt
 800846c:	2201      	movlt	r2, #1
 800846e:	f8c8 2000 	strlt.w	r2, [r8]
 8008472:	ea33 0309 	bics.w	r3, r3, r9
 8008476:	d11b      	bne.n	80084b0 <_dtoa_r+0xb8>
 8008478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800847a:	f242 730f 	movw	r3, #9999	; 0x270f
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008484:	4333      	orrs	r3, r6
 8008486:	f000 857a 	beq.w	8008f7e <_dtoa_r+0xb86>
 800848a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800848c:	b963      	cbnz	r3, 80084a8 <_dtoa_r+0xb0>
 800848e:	4b9b      	ldr	r3, [pc, #620]	; (80086fc <_dtoa_r+0x304>)
 8008490:	e024      	b.n	80084dc <_dtoa_r+0xe4>
 8008492:	4b9b      	ldr	r3, [pc, #620]	; (8008700 <_dtoa_r+0x308>)
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	9800      	ldr	r0, [sp, #0]
 800849e:	b015      	add	sp, #84	; 0x54
 80084a0:	ecbd 8b02 	vpop	{d8}
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	4b94      	ldr	r3, [pc, #592]	; (80086fc <_dtoa_r+0x304>)
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	3303      	adds	r3, #3
 80084ae:	e7f3      	b.n	8008498 <_dtoa_r+0xa0>
 80084b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084b4:	2200      	movs	r2, #0
 80084b6:	ec51 0b17 	vmov	r0, r1, d7
 80084ba:	2300      	movs	r3, #0
 80084bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80084c0:	f7f8 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c4:	4680      	mov	r8, r0
 80084c6:	b158      	cbz	r0, 80084e0 <_dtoa_r+0xe8>
 80084c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084ca:	2301      	movs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8551 	beq.w	8008f78 <_dtoa_r+0xb80>
 80084d6:	488b      	ldr	r0, [pc, #556]	; (8008704 <_dtoa_r+0x30c>)
 80084d8:	6018      	str	r0, [r3, #0]
 80084da:	1e43      	subs	r3, r0, #1
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	e7dd      	b.n	800849c <_dtoa_r+0xa4>
 80084e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80084e4:	aa12      	add	r2, sp, #72	; 0x48
 80084e6:	a913      	add	r1, sp, #76	; 0x4c
 80084e8:	4620      	mov	r0, r4
 80084ea:	f001 f8ad 	bl	8009648 <__d2b>
 80084ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084f2:	4683      	mov	fp, r0
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	d07c      	beq.n	80085f2 <_dtoa_r+0x1fa>
 80084f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80084fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008502:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008506:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800850a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800850e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008512:	4b7d      	ldr	r3, [pc, #500]	; (8008708 <_dtoa_r+0x310>)
 8008514:	2200      	movs	r2, #0
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 feb5 	bl	8000288 <__aeabi_dsub>
 800851e:	a36e      	add	r3, pc, #440	; (adr r3, 80086d8 <_dtoa_r+0x2e0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f8 f868 	bl	80005f8 <__aeabi_dmul>
 8008528:	a36d      	add	r3, pc, #436	; (adr r3, 80086e0 <_dtoa_r+0x2e8>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f7f7 fead 	bl	800028c <__adddf3>
 8008532:	4606      	mov	r6, r0
 8008534:	4628      	mov	r0, r5
 8008536:	460f      	mov	r7, r1
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	a36a      	add	r3, pc, #424	; (adr r3, 80086e8 <_dtoa_r+0x2f0>)
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f7f8 f859 	bl	80005f8 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4630      	mov	r0, r6
 800854c:	4639      	mov	r1, r7
 800854e:	f7f7 fe9d 	bl	800028c <__adddf3>
 8008552:	4606      	mov	r6, r0
 8008554:	460f      	mov	r7, r1
 8008556:	f7f8 faff 	bl	8000b58 <__aeabi_d2iz>
 800855a:	2200      	movs	r2, #0
 800855c:	4682      	mov	sl, r0
 800855e:	2300      	movs	r3, #0
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 faba 	bl	8000adc <__aeabi_dcmplt>
 8008568:	b148      	cbz	r0, 800857e <_dtoa_r+0x186>
 800856a:	4650      	mov	r0, sl
 800856c:	f7f7 ffda 	bl	8000524 <__aeabi_i2d>
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	f7f8 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008578:	b908      	cbnz	r0, 800857e <_dtoa_r+0x186>
 800857a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800857e:	f1ba 0f16 	cmp.w	sl, #22
 8008582:	d854      	bhi.n	800862e <_dtoa_r+0x236>
 8008584:	4b61      	ldr	r3, [pc, #388]	; (800870c <_dtoa_r+0x314>)
 8008586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008592:	f7f8 faa3 	bl	8000adc <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	d04b      	beq.n	8008632 <_dtoa_r+0x23a>
 800859a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800859e:	2300      	movs	r3, #0
 80085a0:	930e      	str	r3, [sp, #56]	; 0x38
 80085a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085a4:	1b5d      	subs	r5, r3, r5
 80085a6:	1e6b      	subs	r3, r5, #1
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	bf43      	ittte	mi
 80085ac:	2300      	movmi	r3, #0
 80085ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80085b2:	9304      	strmi	r3, [sp, #16]
 80085b4:	f04f 0800 	movpl.w	r8, #0
 80085b8:	f1ba 0f00 	cmp.w	sl, #0
 80085bc:	db3b      	blt.n	8008636 <_dtoa_r+0x23e>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80085c4:	4453      	add	r3, sl
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	2300      	movs	r3, #0
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	d869      	bhi.n	80086a6 <_dtoa_r+0x2ae>
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	bfc4      	itt	gt
 80085d6:	3b04      	subgt	r3, #4
 80085d8:	9305      	strgt	r3, [sp, #20]
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	f1a3 0302 	sub.w	r3, r3, #2
 80085e0:	bfcc      	ite	gt
 80085e2:	2500      	movgt	r5, #0
 80085e4:	2501      	movle	r5, #1
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d869      	bhi.n	80086be <_dtoa_r+0x2c6>
 80085ea:	e8df f003 	tbb	[pc, r3]
 80085ee:	4e2c      	.short	0x4e2c
 80085f0:	5a4c      	.short	0x5a4c
 80085f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80085f6:	441d      	add	r5, r3
 80085f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	bfc1      	itttt	gt
 8008600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008604:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008608:	fa09 f303 	lslgt.w	r3, r9, r3
 800860c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008610:	bfda      	itte	le
 8008612:	f1c3 0320 	rsble	r3, r3, #32
 8008616:	fa06 f003 	lslle.w	r0, r6, r3
 800861a:	4318      	orrgt	r0, r3
 800861c:	f7f7 ff72 	bl	8000504 <__aeabi_ui2d>
 8008620:	2301      	movs	r3, #1
 8008622:	4606      	mov	r6, r0
 8008624:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008628:	3d01      	subs	r5, #1
 800862a:	9310      	str	r3, [sp, #64]	; 0x40
 800862c:	e771      	b.n	8008512 <_dtoa_r+0x11a>
 800862e:	2301      	movs	r3, #1
 8008630:	e7b6      	b.n	80085a0 <_dtoa_r+0x1a8>
 8008632:	900e      	str	r0, [sp, #56]	; 0x38
 8008634:	e7b5      	b.n	80085a2 <_dtoa_r+0x1aa>
 8008636:	f1ca 0300 	rsb	r3, sl, #0
 800863a:	9306      	str	r3, [sp, #24]
 800863c:	2300      	movs	r3, #0
 800863e:	eba8 080a 	sub.w	r8, r8, sl
 8008642:	930d      	str	r3, [sp, #52]	; 0x34
 8008644:	e7c2      	b.n	80085cc <_dtoa_r+0x1d4>
 8008646:	2300      	movs	r3, #0
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	dc39      	bgt.n	80086c4 <_dtoa_r+0x2cc>
 8008650:	f04f 0901 	mov.w	r9, #1
 8008654:	f8cd 9004 	str.w	r9, [sp, #4]
 8008658:	464b      	mov	r3, r9
 800865a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800865e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008660:	2200      	movs	r2, #0
 8008662:	6042      	str	r2, [r0, #4]
 8008664:	2204      	movs	r2, #4
 8008666:	f102 0614 	add.w	r6, r2, #20
 800866a:	429e      	cmp	r6, r3
 800866c:	6841      	ldr	r1, [r0, #4]
 800866e:	d92f      	bls.n	80086d0 <_dtoa_r+0x2d8>
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fcc7 	bl	8009004 <_Balloc>
 8008676:	9000      	str	r0, [sp, #0]
 8008678:	2800      	cmp	r0, #0
 800867a:	d14b      	bne.n	8008714 <_dtoa_r+0x31c>
 800867c:	4b24      	ldr	r3, [pc, #144]	; (8008710 <_dtoa_r+0x318>)
 800867e:	4602      	mov	r2, r0
 8008680:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008684:	e6d1      	b.n	800842a <_dtoa_r+0x32>
 8008686:	2301      	movs	r3, #1
 8008688:	e7de      	b.n	8008648 <_dtoa_r+0x250>
 800868a:	2300      	movs	r3, #0
 800868c:	9308      	str	r3, [sp, #32]
 800868e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008690:	eb0a 0903 	add.w	r9, sl, r3
 8008694:	f109 0301 	add.w	r3, r9, #1
 8008698:	2b01      	cmp	r3, #1
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	bfb8      	it	lt
 800869e:	2301      	movlt	r3, #1
 80086a0:	e7dd      	b.n	800865e <_dtoa_r+0x266>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e7f2      	b.n	800868c <_dtoa_r+0x294>
 80086a6:	2501      	movs	r5, #1
 80086a8:	2300      	movs	r3, #0
 80086aa:	9305      	str	r3, [sp, #20]
 80086ac:	9508      	str	r5, [sp, #32]
 80086ae:	f04f 39ff 	mov.w	r9, #4294967295
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086b8:	2312      	movs	r3, #18
 80086ba:	9209      	str	r2, [sp, #36]	; 0x24
 80086bc:	e7cf      	b.n	800865e <_dtoa_r+0x266>
 80086be:	2301      	movs	r3, #1
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	e7f4      	b.n	80086ae <_dtoa_r+0x2b6>
 80086c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80086c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80086cc:	464b      	mov	r3, r9
 80086ce:	e7c6      	b.n	800865e <_dtoa_r+0x266>
 80086d0:	3101      	adds	r1, #1
 80086d2:	6041      	str	r1, [r0, #4]
 80086d4:	0052      	lsls	r2, r2, #1
 80086d6:	e7c6      	b.n	8008666 <_dtoa_r+0x26e>
 80086d8:	636f4361 	.word	0x636f4361
 80086dc:	3fd287a7 	.word	0x3fd287a7
 80086e0:	8b60c8b3 	.word	0x8b60c8b3
 80086e4:	3fc68a28 	.word	0x3fc68a28
 80086e8:	509f79fb 	.word	0x509f79fb
 80086ec:	3fd34413 	.word	0x3fd34413
 80086f0:	0800a7e9 	.word	0x0800a7e9
 80086f4:	0800a800 	.word	0x0800a800
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	0800a7e5 	.word	0x0800a7e5
 8008700:	0800a7dc 	.word	0x0800a7dc
 8008704:	0800a7b9 	.word	0x0800a7b9
 8008708:	3ff80000 	.word	0x3ff80000
 800870c:	0800a8f8 	.word	0x0800a8f8
 8008710:	0800a85f 	.word	0x0800a85f
 8008714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008716:	9a00      	ldr	r2, [sp, #0]
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	2b0e      	cmp	r3, #14
 800871e:	f200 80ad 	bhi.w	800887c <_dtoa_r+0x484>
 8008722:	2d00      	cmp	r5, #0
 8008724:	f000 80aa 	beq.w	800887c <_dtoa_r+0x484>
 8008728:	f1ba 0f00 	cmp.w	sl, #0
 800872c:	dd36      	ble.n	800879c <_dtoa_r+0x3a4>
 800872e:	4ac3      	ldr	r2, [pc, #780]	; (8008a3c <_dtoa_r+0x644>)
 8008730:	f00a 030f 	and.w	r3, sl, #15
 8008734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008738:	ed93 7b00 	vldr	d7, [r3]
 800873c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008740:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008744:	eeb0 8a47 	vmov.f32	s16, s14
 8008748:	eef0 8a67 	vmov.f32	s17, s15
 800874c:	d016      	beq.n	800877c <_dtoa_r+0x384>
 800874e:	4bbc      	ldr	r3, [pc, #752]	; (8008a40 <_dtoa_r+0x648>)
 8008750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008758:	f7f8 f878 	bl	800084c <__aeabi_ddiv>
 800875c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008760:	f007 070f 	and.w	r7, r7, #15
 8008764:	2503      	movs	r5, #3
 8008766:	4eb6      	ldr	r6, [pc, #728]	; (8008a40 <_dtoa_r+0x648>)
 8008768:	b957      	cbnz	r7, 8008780 <_dtoa_r+0x388>
 800876a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876e:	ec53 2b18 	vmov	r2, r3, d8
 8008772:	f7f8 f86b 	bl	800084c <__aeabi_ddiv>
 8008776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800877a:	e029      	b.n	80087d0 <_dtoa_r+0x3d8>
 800877c:	2502      	movs	r5, #2
 800877e:	e7f2      	b.n	8008766 <_dtoa_r+0x36e>
 8008780:	07f9      	lsls	r1, r7, #31
 8008782:	d508      	bpl.n	8008796 <_dtoa_r+0x39e>
 8008784:	ec51 0b18 	vmov	r0, r1, d8
 8008788:	e9d6 2300 	ldrd	r2, r3, [r6]
 800878c:	f7f7 ff34 	bl	80005f8 <__aeabi_dmul>
 8008790:	ec41 0b18 	vmov	d8, r0, r1
 8008794:	3501      	adds	r5, #1
 8008796:	107f      	asrs	r7, r7, #1
 8008798:	3608      	adds	r6, #8
 800879a:	e7e5      	b.n	8008768 <_dtoa_r+0x370>
 800879c:	f000 80a6 	beq.w	80088ec <_dtoa_r+0x4f4>
 80087a0:	f1ca 0600 	rsb	r6, sl, #0
 80087a4:	4ba5      	ldr	r3, [pc, #660]	; (8008a3c <_dtoa_r+0x644>)
 80087a6:	4fa6      	ldr	r7, [pc, #664]	; (8008a40 <_dtoa_r+0x648>)
 80087a8:	f006 020f 	and.w	r2, r6, #15
 80087ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c0:	1136      	asrs	r6, r6, #4
 80087c2:	2300      	movs	r3, #0
 80087c4:	2502      	movs	r5, #2
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	f040 8085 	bne.w	80088d6 <_dtoa_r+0x4de>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1d2      	bne.n	8008776 <_dtoa_r+0x37e>
 80087d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 808c 	beq.w	80088f0 <_dtoa_r+0x4f8>
 80087d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087dc:	4b99      	ldr	r3, [pc, #612]	; (8008a44 <_dtoa_r+0x64c>)
 80087de:	2200      	movs	r2, #0
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f8 f97a 	bl	8000adc <__aeabi_dcmplt>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f000 8081 	beq.w	80088f0 <_dtoa_r+0x4f8>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d07d      	beq.n	80088f0 <_dtoa_r+0x4f8>
 80087f4:	f1b9 0f00 	cmp.w	r9, #0
 80087f8:	dd3c      	ble.n	8008874 <_dtoa_r+0x47c>
 80087fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80087fe:	9307      	str	r3, [sp, #28]
 8008800:	2200      	movs	r2, #0
 8008802:	4b91      	ldr	r3, [pc, #580]	; (8008a48 <_dtoa_r+0x650>)
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008810:	3501      	adds	r5, #1
 8008812:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800881a:	4628      	mov	r0, r5
 800881c:	f7f7 fe82 	bl	8000524 <__aeabi_i2d>
 8008820:	4632      	mov	r2, r6
 8008822:	463b      	mov	r3, r7
 8008824:	f7f7 fee8 	bl	80005f8 <__aeabi_dmul>
 8008828:	4b88      	ldr	r3, [pc, #544]	; (8008a4c <_dtoa_r+0x654>)
 800882a:	2200      	movs	r2, #0
 800882c:	f7f7 fd2e 	bl	800028c <__adddf3>
 8008830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d15c      	bne.n	80088fa <_dtoa_r+0x502>
 8008840:	4b83      	ldr	r3, [pc, #524]	; (8008a50 <_dtoa_r+0x658>)
 8008842:	2200      	movs	r2, #0
 8008844:	4630      	mov	r0, r6
 8008846:	4639      	mov	r1, r7
 8008848:	f7f7 fd1e 	bl	8000288 <__aeabi_dsub>
 800884c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008850:	4606      	mov	r6, r0
 8008852:	460f      	mov	r7, r1
 8008854:	f7f8 f960 	bl	8000b18 <__aeabi_dcmpgt>
 8008858:	2800      	cmp	r0, #0
 800885a:	f040 8296 	bne.w	8008d8a <_dtoa_r+0x992>
 800885e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008862:	4630      	mov	r0, r6
 8008864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008868:	4639      	mov	r1, r7
 800886a:	f7f8 f937 	bl	8000adc <__aeabi_dcmplt>
 800886e:	2800      	cmp	r0, #0
 8008870:	f040 8288 	bne.w	8008d84 <_dtoa_r+0x98c>
 8008874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008878:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800887c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800887e:	2b00      	cmp	r3, #0
 8008880:	f2c0 8158 	blt.w	8008b34 <_dtoa_r+0x73c>
 8008884:	f1ba 0f0e 	cmp.w	sl, #14
 8008888:	f300 8154 	bgt.w	8008b34 <_dtoa_r+0x73c>
 800888c:	4b6b      	ldr	r3, [pc, #428]	; (8008a3c <_dtoa_r+0x644>)
 800888e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008892:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	f280 80e3 	bge.w	8008a64 <_dtoa_r+0x66c>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f300 80df 	bgt.w	8008a64 <_dtoa_r+0x66c>
 80088a6:	f040 826d 	bne.w	8008d84 <_dtoa_r+0x98c>
 80088aa:	4b69      	ldr	r3, [pc, #420]	; (8008a50 <_dtoa_r+0x658>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	4640      	mov	r0, r8
 80088b0:	4649      	mov	r1, r9
 80088b2:	f7f7 fea1 	bl	80005f8 <__aeabi_dmul>
 80088b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ba:	f7f8 f923 	bl	8000b04 <__aeabi_dcmpge>
 80088be:	9e01      	ldr	r6, [sp, #4]
 80088c0:	4637      	mov	r7, r6
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f040 8243 	bne.w	8008d4e <_dtoa_r+0x956>
 80088c8:	9d00      	ldr	r5, [sp, #0]
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	f805 3b01 	strb.w	r3, [r5], #1
 80088d0:	f10a 0a01 	add.w	sl, sl, #1
 80088d4:	e23f      	b.n	8008d56 <_dtoa_r+0x95e>
 80088d6:	07f2      	lsls	r2, r6, #31
 80088d8:	d505      	bpl.n	80088e6 <_dtoa_r+0x4ee>
 80088da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088de:	f7f7 fe8b 	bl	80005f8 <__aeabi_dmul>
 80088e2:	3501      	adds	r5, #1
 80088e4:	2301      	movs	r3, #1
 80088e6:	1076      	asrs	r6, r6, #1
 80088e8:	3708      	adds	r7, #8
 80088ea:	e76c      	b.n	80087c6 <_dtoa_r+0x3ce>
 80088ec:	2502      	movs	r5, #2
 80088ee:	e76f      	b.n	80087d0 <_dtoa_r+0x3d8>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80088f6:	930c      	str	r3, [sp, #48]	; 0x30
 80088f8:	e78d      	b.n	8008816 <_dtoa_r+0x41e>
 80088fa:	9900      	ldr	r1, [sp, #0]
 80088fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80088fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008900:	4b4e      	ldr	r3, [pc, #312]	; (8008a3c <_dtoa_r+0x644>)
 8008902:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008906:	4401      	add	r1, r0
 8008908:	9102      	str	r1, [sp, #8]
 800890a:	9908      	ldr	r1, [sp, #32]
 800890c:	eeb0 8a47 	vmov.f32	s16, s14
 8008910:	eef0 8a67 	vmov.f32	s17, s15
 8008914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800891c:	2900      	cmp	r1, #0
 800891e:	d045      	beq.n	80089ac <_dtoa_r+0x5b4>
 8008920:	494c      	ldr	r1, [pc, #304]	; (8008a54 <_dtoa_r+0x65c>)
 8008922:	2000      	movs	r0, #0
 8008924:	f7f7 ff92 	bl	800084c <__aeabi_ddiv>
 8008928:	ec53 2b18 	vmov	r2, r3, d8
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	9d00      	ldr	r5, [sp, #0]
 8008932:	ec41 0b18 	vmov	d8, r0, r1
 8008936:	4639      	mov	r1, r7
 8008938:	4630      	mov	r0, r6
 800893a:	f7f8 f90d 	bl	8000b58 <__aeabi_d2iz>
 800893e:	900c      	str	r0, [sp, #48]	; 0x30
 8008940:	f7f7 fdf0 	bl	8000524 <__aeabi_i2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fc9c 	bl	8000288 <__aeabi_dsub>
 8008950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008952:	3330      	adds	r3, #48	; 0x30
 8008954:	f805 3b01 	strb.w	r3, [r5], #1
 8008958:	ec53 2b18 	vmov	r2, r3, d8
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	f7f8 f8bc 	bl	8000adc <__aeabi_dcmplt>
 8008964:	2800      	cmp	r0, #0
 8008966:	d165      	bne.n	8008a34 <_dtoa_r+0x63c>
 8008968:	4632      	mov	r2, r6
 800896a:	463b      	mov	r3, r7
 800896c:	4935      	ldr	r1, [pc, #212]	; (8008a44 <_dtoa_r+0x64c>)
 800896e:	2000      	movs	r0, #0
 8008970:	f7f7 fc8a 	bl	8000288 <__aeabi_dsub>
 8008974:	ec53 2b18 	vmov	r2, r3, d8
 8008978:	f7f8 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800897c:	2800      	cmp	r0, #0
 800897e:	f040 80b9 	bne.w	8008af4 <_dtoa_r+0x6fc>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	429d      	cmp	r5, r3
 8008986:	f43f af75 	beq.w	8008874 <_dtoa_r+0x47c>
 800898a:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <_dtoa_r+0x650>)
 800898c:	ec51 0b18 	vmov	r0, r1, d8
 8008990:	2200      	movs	r2, #0
 8008992:	f7f7 fe31 	bl	80005f8 <__aeabi_dmul>
 8008996:	4b2c      	ldr	r3, [pc, #176]	; (8008a48 <_dtoa_r+0x650>)
 8008998:	ec41 0b18 	vmov	d8, r0, r1
 800899c:	2200      	movs	r2, #0
 800899e:	4630      	mov	r0, r6
 80089a0:	4639      	mov	r1, r7
 80089a2:	f7f7 fe29 	bl	80005f8 <__aeabi_dmul>
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	e7c4      	b.n	8008936 <_dtoa_r+0x53e>
 80089ac:	ec51 0b17 	vmov	r0, r1, d7
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	9d00      	ldr	r5, [sp, #0]
 80089b8:	930c      	str	r3, [sp, #48]	; 0x30
 80089ba:	ec41 0b18 	vmov	d8, r0, r1
 80089be:	4639      	mov	r1, r7
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7f8 f8c9 	bl	8000b58 <__aeabi_d2iz>
 80089c6:	9011      	str	r0, [sp, #68]	; 0x44
 80089c8:	f7f7 fdac 	bl	8000524 <__aeabi_i2d>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f7 fc58 	bl	8000288 <__aeabi_dsub>
 80089d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089da:	3330      	adds	r3, #48	; 0x30
 80089dc:	f805 3b01 	strb.w	r3, [r5], #1
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	429d      	cmp	r5, r3
 80089e4:	4606      	mov	r6, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	d134      	bne.n	8008a58 <_dtoa_r+0x660>
 80089ee:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <_dtoa_r+0x65c>)
 80089f0:	ec51 0b18 	vmov	r0, r1, d8
 80089f4:	f7f7 fc4a 	bl	800028c <__adddf3>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4630      	mov	r0, r6
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f8 f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d175      	bne.n	8008af4 <_dtoa_r+0x6fc>
 8008a08:	ec53 2b18 	vmov	r2, r3, d8
 8008a0c:	4911      	ldr	r1, [pc, #68]	; (8008a54 <_dtoa_r+0x65c>)
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f7f7 fc3a 	bl	8000288 <__aeabi_dsub>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f8 f85e 	bl	8000adc <__aeabi_dcmplt>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f43f af27 	beq.w	8008874 <_dtoa_r+0x47c>
 8008a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a28:	1e6b      	subs	r3, r5, #1
 8008a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d0f8      	beq.n	8008a26 <_dtoa_r+0x62e>
 8008a34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008a38:	e04a      	b.n	8008ad0 <_dtoa_r+0x6d8>
 8008a3a:	bf00      	nop
 8008a3c:	0800a8f8 	.word	0x0800a8f8
 8008a40:	0800a8d0 	.word	0x0800a8d0
 8008a44:	3ff00000 	.word	0x3ff00000
 8008a48:	40240000 	.word	0x40240000
 8008a4c:	401c0000 	.word	0x401c0000
 8008a50:	40140000 	.word	0x40140000
 8008a54:	3fe00000 	.word	0x3fe00000
 8008a58:	4baf      	ldr	r3, [pc, #700]	; (8008d18 <_dtoa_r+0x920>)
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	e7ac      	b.n	80089be <_dtoa_r+0x5c6>
 8008a64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a68:	9d00      	ldr	r5, [sp, #0]
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	4630      	mov	r0, r6
 8008a70:	4639      	mov	r1, r7
 8008a72:	f7f7 feeb 	bl	800084c <__aeabi_ddiv>
 8008a76:	f7f8 f86f 	bl	8000b58 <__aeabi_d2iz>
 8008a7a:	9002      	str	r0, [sp, #8]
 8008a7c:	f7f7 fd52 	bl	8000524 <__aeabi_i2d>
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	f7f7 fdb8 	bl	80005f8 <__aeabi_dmul>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f7 fbfa 	bl	8000288 <__aeabi_dsub>
 8008a94:	9e02      	ldr	r6, [sp, #8]
 8008a96:	9f01      	ldr	r7, [sp, #4]
 8008a98:	3630      	adds	r6, #48	; 0x30
 8008a9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008a9e:	9e00      	ldr	r6, [sp, #0]
 8008aa0:	1bae      	subs	r6, r5, r6
 8008aa2:	42b7      	cmp	r7, r6
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	d137      	bne.n	8008b1a <_dtoa_r+0x722>
 8008aaa:	f7f7 fbef 	bl	800028c <__adddf3>
 8008aae:	4642      	mov	r2, r8
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f7f8 f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8008aba:	b9c8      	cbnz	r0, 8008af0 <_dtoa_r+0x6f8>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f8 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac8:	b110      	cbz	r0, 8008ad0 <_dtoa_r+0x6d8>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	d40f      	bmi.n	8008af0 <_dtoa_r+0x6f8>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	f000 fad6 	bl	8009084 <_Bfree>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	702b      	strb	r3, [r5, #0]
 8008adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ade:	f10a 0001 	add.w	r0, sl, #1
 8008ae2:	6018      	str	r0, [r3, #0]
 8008ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f43f acd8 	beq.w	800849c <_dtoa_r+0xa4>
 8008aec:	601d      	str	r5, [r3, #0]
 8008aee:	e4d5      	b.n	800849c <_dtoa_r+0xa4>
 8008af0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008af4:	462b      	mov	r3, r5
 8008af6:	461d      	mov	r5, r3
 8008af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008afc:	2a39      	cmp	r2, #57	; 0x39
 8008afe:	d108      	bne.n	8008b12 <_dtoa_r+0x71a>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d1f7      	bne.n	8008af6 <_dtoa_r+0x6fe>
 8008b06:	9a07      	ldr	r2, [sp, #28]
 8008b08:	9900      	ldr	r1, [sp, #0]
 8008b0a:	3201      	adds	r2, #1
 8008b0c:	9207      	str	r2, [sp, #28]
 8008b0e:	2230      	movs	r2, #48	; 0x30
 8008b10:	700a      	strb	r2, [r1, #0]
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	3201      	adds	r2, #1
 8008b16:	701a      	strb	r2, [r3, #0]
 8008b18:	e78c      	b.n	8008a34 <_dtoa_r+0x63c>
 8008b1a:	4b7f      	ldr	r3, [pc, #508]	; (8008d18 <_dtoa_r+0x920>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	2200      	movs	r2, #0
 8008b24:	2300      	movs	r3, #0
 8008b26:	4606      	mov	r6, r0
 8008b28:	460f      	mov	r7, r1
 8008b2a:	f7f7 ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d09b      	beq.n	8008a6a <_dtoa_r+0x672>
 8008b32:	e7cd      	b.n	8008ad0 <_dtoa_r+0x6d8>
 8008b34:	9a08      	ldr	r2, [sp, #32]
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	f000 80c4 	beq.w	8008cc4 <_dtoa_r+0x8cc>
 8008b3c:	9a05      	ldr	r2, [sp, #20]
 8008b3e:	2a01      	cmp	r2, #1
 8008b40:	f300 80a8 	bgt.w	8008c94 <_dtoa_r+0x89c>
 8008b44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	f000 80a0 	beq.w	8008c8c <_dtoa_r+0x894>
 8008b4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b50:	9e06      	ldr	r6, [sp, #24]
 8008b52:	4645      	mov	r5, r8
 8008b54:	9a04      	ldr	r2, [sp, #16]
 8008b56:	2101      	movs	r1, #1
 8008b58:	441a      	add	r2, r3
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4498      	add	r8, r3
 8008b5e:	9204      	str	r2, [sp, #16]
 8008b60:	f000 fb4c 	bl	80091fc <__i2b>
 8008b64:	4607      	mov	r7, r0
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	dd0b      	ble.n	8008b82 <_dtoa_r+0x78a>
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd08      	ble.n	8008b82 <_dtoa_r+0x78a>
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	9a04      	ldr	r2, [sp, #16]
 8008b74:	bfa8      	it	ge
 8008b76:	462b      	movge	r3, r5
 8008b78:	eba8 0803 	sub.w	r8, r8, r3
 8008b7c:	1aed      	subs	r5, r5, r3
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	b1fb      	cbz	r3, 8008bc6 <_dtoa_r+0x7ce>
 8008b86:	9b08      	ldr	r3, [sp, #32]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 809f 	beq.w	8008ccc <_dtoa_r+0x8d4>
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	dd11      	ble.n	8008bb6 <_dtoa_r+0x7be>
 8008b92:	4639      	mov	r1, r7
 8008b94:	4632      	mov	r2, r6
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 fbec 	bl	8009374 <__pow5mult>
 8008b9c:	465a      	mov	r2, fp
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 fb40 	bl	8009228 <__multiply>
 8008ba8:	4659      	mov	r1, fp
 8008baa:	9007      	str	r0, [sp, #28]
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fa69 	bl	8009084 <_Bfree>
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	469b      	mov	fp, r3
 8008bb6:	9b06      	ldr	r3, [sp, #24]
 8008bb8:	1b9a      	subs	r2, r3, r6
 8008bba:	d004      	beq.n	8008bc6 <_dtoa_r+0x7ce>
 8008bbc:	4659      	mov	r1, fp
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fbd8 	bl	8009374 <__pow5mult>
 8008bc4:	4683      	mov	fp, r0
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fb17 	bl	80091fc <__i2b>
 8008bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	dd7c      	ble.n	8008cd0 <_dtoa_r+0x8d8>
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4601      	mov	r1, r0
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fbca 	bl	8009374 <__pow5mult>
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	4606      	mov	r6, r0
 8008be6:	dd76      	ble.n	8008cd6 <_dtoa_r+0x8de>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9306      	str	r3, [sp, #24]
 8008bec:	6933      	ldr	r3, [r6, #16]
 8008bee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008bf2:	6918      	ldr	r0, [r3, #16]
 8008bf4:	f000 fab2 	bl	800915c <__hi0bits>
 8008bf8:	f1c0 0020 	rsb	r0, r0, #32
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	4418      	add	r0, r3
 8008c00:	f010 001f 	ands.w	r0, r0, #31
 8008c04:	f000 8086 	beq.w	8008d14 <_dtoa_r+0x91c>
 8008c08:	f1c0 0320 	rsb	r3, r0, #32
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	dd7f      	ble.n	8008d10 <_dtoa_r+0x918>
 8008c10:	f1c0 001c 	rsb	r0, r0, #28
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	4403      	add	r3, r0
 8008c18:	4480      	add	r8, r0
 8008c1a:	4405      	add	r5, r0
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	f1b8 0f00 	cmp.w	r8, #0
 8008c22:	dd05      	ble.n	8008c30 <_dtoa_r+0x838>
 8008c24:	4659      	mov	r1, fp
 8008c26:	4642      	mov	r2, r8
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fbfd 	bl	8009428 <__lshift>
 8008c2e:	4683      	mov	fp, r0
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dd05      	ble.n	8008c42 <_dtoa_r+0x84a>
 8008c36:	4631      	mov	r1, r6
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fbf4 	bl	8009428 <__lshift>
 8008c40:	4606      	mov	r6, r0
 8008c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d069      	beq.n	8008d1c <_dtoa_r+0x924>
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4658      	mov	r0, fp
 8008c4c:	f000 fc58 	bl	8009500 <__mcmp>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	da63      	bge.n	8008d1c <_dtoa_r+0x924>
 8008c54:	2300      	movs	r3, #0
 8008c56:	4659      	mov	r1, fp
 8008c58:	220a      	movs	r2, #10
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fa34 	bl	80090c8 <__multadd>
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c66:	4683      	mov	fp, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 818f 	beq.w	8008f8c <_dtoa_r+0xb94>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	2300      	movs	r3, #0
 8008c72:	220a      	movs	r2, #10
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fa27 	bl	80090c8 <__multadd>
 8008c7a:	f1b9 0f00 	cmp.w	r9, #0
 8008c7e:	4607      	mov	r7, r0
 8008c80:	f300 808e 	bgt.w	8008da0 <_dtoa_r+0x9a8>
 8008c84:	9b05      	ldr	r3, [sp, #20]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	dc50      	bgt.n	8008d2c <_dtoa_r+0x934>
 8008c8a:	e089      	b.n	8008da0 <_dtoa_r+0x9a8>
 8008c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c92:	e75d      	b.n	8008b50 <_dtoa_r+0x758>
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	1e5e      	subs	r6, r3, #1
 8008c98:	9b06      	ldr	r3, [sp, #24]
 8008c9a:	42b3      	cmp	r3, r6
 8008c9c:	bfbf      	itttt	lt
 8008c9e:	9b06      	ldrlt	r3, [sp, #24]
 8008ca0:	9606      	strlt	r6, [sp, #24]
 8008ca2:	1af2      	sublt	r2, r6, r3
 8008ca4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008ca6:	bfb6      	itet	lt
 8008ca8:	189b      	addlt	r3, r3, r2
 8008caa:	1b9e      	subge	r6, r3, r6
 8008cac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	bfb8      	it	lt
 8008cb2:	2600      	movlt	r6, #0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfb5      	itete	lt
 8008cb8:	eba8 0503 	sublt.w	r5, r8, r3
 8008cbc:	9b01      	ldrge	r3, [sp, #4]
 8008cbe:	2300      	movlt	r3, #0
 8008cc0:	4645      	movge	r5, r8
 8008cc2:	e747      	b.n	8008b54 <_dtoa_r+0x75c>
 8008cc4:	9e06      	ldr	r6, [sp, #24]
 8008cc6:	9f08      	ldr	r7, [sp, #32]
 8008cc8:	4645      	mov	r5, r8
 8008cca:	e74c      	b.n	8008b66 <_dtoa_r+0x76e>
 8008ccc:	9a06      	ldr	r2, [sp, #24]
 8008cce:	e775      	b.n	8008bbc <_dtoa_r+0x7c4>
 8008cd0:	9b05      	ldr	r3, [sp, #20]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	dc18      	bgt.n	8008d08 <_dtoa_r+0x910>
 8008cd6:	9b02      	ldr	r3, [sp, #8]
 8008cd8:	b9b3      	cbnz	r3, 8008d08 <_dtoa_r+0x910>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce0:	b9a3      	cbnz	r3, 8008d0c <_dtoa_r+0x914>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	0d1b      	lsrs	r3, r3, #20
 8008cea:	051b      	lsls	r3, r3, #20
 8008cec:	b12b      	cbz	r3, 8008cfa <_dtoa_r+0x902>
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	f108 0801 	add.w	r8, r8, #1
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	9306      	str	r3, [sp, #24]
 8008cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f47f af74 	bne.w	8008bec <_dtoa_r+0x7f4>
 8008d04:	2001      	movs	r0, #1
 8008d06:	e779      	b.n	8008bfc <_dtoa_r+0x804>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e7f6      	b.n	8008cfa <_dtoa_r+0x902>
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	e7f4      	b.n	8008cfa <_dtoa_r+0x902>
 8008d10:	d085      	beq.n	8008c1e <_dtoa_r+0x826>
 8008d12:	4618      	mov	r0, r3
 8008d14:	301c      	adds	r0, #28
 8008d16:	e77d      	b.n	8008c14 <_dtoa_r+0x81c>
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dc38      	bgt.n	8008d94 <_dtoa_r+0x99c>
 8008d22:	9b05      	ldr	r3, [sp, #20]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	dd35      	ble.n	8008d94 <_dtoa_r+0x99c>
 8008d28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d2c:	f1b9 0f00 	cmp.w	r9, #0
 8008d30:	d10d      	bne.n	8008d4e <_dtoa_r+0x956>
 8008d32:	4631      	mov	r1, r6
 8008d34:	464b      	mov	r3, r9
 8008d36:	2205      	movs	r2, #5
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 f9c5 	bl	80090c8 <__multadd>
 8008d3e:	4601      	mov	r1, r0
 8008d40:	4606      	mov	r6, r0
 8008d42:	4658      	mov	r0, fp
 8008d44:	f000 fbdc 	bl	8009500 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	f73f adbd 	bgt.w	80088c8 <_dtoa_r+0x4d0>
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	9d00      	ldr	r5, [sp, #0]
 8008d52:	ea6f 0a03 	mvn.w	sl, r3
 8008d56:	f04f 0800 	mov.w	r8, #0
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 f991 	bl	8009084 <_Bfree>
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	f43f aeb4 	beq.w	8008ad0 <_dtoa_r+0x6d8>
 8008d68:	f1b8 0f00 	cmp.w	r8, #0
 8008d6c:	d005      	beq.n	8008d7a <_dtoa_r+0x982>
 8008d6e:	45b8      	cmp	r8, r7
 8008d70:	d003      	beq.n	8008d7a <_dtoa_r+0x982>
 8008d72:	4641      	mov	r1, r8
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 f985 	bl	8009084 <_Bfree>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 f981 	bl	8009084 <_Bfree>
 8008d82:	e6a5      	b.n	8008ad0 <_dtoa_r+0x6d8>
 8008d84:	2600      	movs	r6, #0
 8008d86:	4637      	mov	r7, r6
 8008d88:	e7e1      	b.n	8008d4e <_dtoa_r+0x956>
 8008d8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d90:	4637      	mov	r7, r6
 8008d92:	e599      	b.n	80088c8 <_dtoa_r+0x4d0>
 8008d94:	9b08      	ldr	r3, [sp, #32]
 8008d96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80fd 	beq.w	8008f9a <_dtoa_r+0xba2>
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	dd05      	ble.n	8008db0 <_dtoa_r+0x9b8>
 8008da4:	4639      	mov	r1, r7
 8008da6:	462a      	mov	r2, r5
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb3d 	bl	8009428 <__lshift>
 8008dae:	4607      	mov	r7, r0
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d05c      	beq.n	8008e70 <_dtoa_r+0xa78>
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 f923 	bl	8009004 <_Balloc>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <_dtoa_r+0x9d6>
 8008dc2:	4b80      	ldr	r3, [pc, #512]	; (8008fc4 <_dtoa_r+0xbcc>)
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008dca:	f7ff bb2e 	b.w	800842a <_dtoa_r+0x32>
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	3202      	adds	r2, #2
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	f107 010c 	add.w	r1, r7, #12
 8008dd8:	300c      	adds	r0, #12
 8008dda:	f000 f905 	bl	8008fe8 <memcpy>
 8008dde:	2201      	movs	r2, #1
 8008de0:	4629      	mov	r1, r5
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fb20 	bl	8009428 <__lshift>
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	444b      	add	r3, r9
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	46b8      	mov	r8, r7
 8008dfc:	9306      	str	r3, [sp, #24]
 8008dfe:	4607      	mov	r7, r0
 8008e00:	9b01      	ldr	r3, [sp, #4]
 8008e02:	4631      	mov	r1, r6
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4658      	mov	r0, fp
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	f7ff fa68 	bl	80082de <quorem>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	3330      	adds	r3, #48	; 0x30
 8008e12:	9004      	str	r0, [sp, #16]
 8008e14:	4641      	mov	r1, r8
 8008e16:	4658      	mov	r0, fp
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	f000 fb71 	bl	8009500 <__mcmp>
 8008e1e:	463a      	mov	r2, r7
 8008e20:	4681      	mov	r9, r0
 8008e22:	4631      	mov	r1, r6
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fb87 	bl	8009538 <__mdiff>
 8008e2a:	68c2      	ldr	r2, [r0, #12]
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	4605      	mov	r5, r0
 8008e30:	bb02      	cbnz	r2, 8008e74 <_dtoa_r+0xa7c>
 8008e32:	4601      	mov	r1, r0
 8008e34:	4658      	mov	r0, fp
 8008e36:	f000 fb63 	bl	8009500 <__mcmp>
 8008e3a:	9b08      	ldr	r3, [sp, #32]
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4620      	mov	r0, r4
 8008e42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008e46:	f000 f91d 	bl	8009084 <_Bfree>
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e4e:	9d01      	ldr	r5, [sp, #4]
 8008e50:	ea43 0102 	orr.w	r1, r3, r2
 8008e54:	9b06      	ldr	r3, [sp, #24]
 8008e56:	430b      	orrs	r3, r1
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	d10d      	bne.n	8008e78 <_dtoa_r+0xa80>
 8008e5c:	2b39      	cmp	r3, #57	; 0x39
 8008e5e:	d029      	beq.n	8008eb4 <_dtoa_r+0xabc>
 8008e60:	f1b9 0f00 	cmp.w	r9, #0
 8008e64:	dd01      	ble.n	8008e6a <_dtoa_r+0xa72>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	3331      	adds	r3, #49	; 0x31
 8008e6a:	9a02      	ldr	r2, [sp, #8]
 8008e6c:	7013      	strb	r3, [r2, #0]
 8008e6e:	e774      	b.n	8008d5a <_dtoa_r+0x962>
 8008e70:	4638      	mov	r0, r7
 8008e72:	e7b9      	b.n	8008de8 <_dtoa_r+0x9f0>
 8008e74:	2201      	movs	r2, #1
 8008e76:	e7e2      	b.n	8008e3e <_dtoa_r+0xa46>
 8008e78:	f1b9 0f00 	cmp.w	r9, #0
 8008e7c:	db06      	blt.n	8008e8c <_dtoa_r+0xa94>
 8008e7e:	9905      	ldr	r1, [sp, #20]
 8008e80:	ea41 0909 	orr.w	r9, r1, r9
 8008e84:	9906      	ldr	r1, [sp, #24]
 8008e86:	ea59 0101 	orrs.w	r1, r9, r1
 8008e8a:	d120      	bne.n	8008ece <_dtoa_r+0xad6>
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	ddec      	ble.n	8008e6a <_dtoa_r+0xa72>
 8008e90:	4659      	mov	r1, fp
 8008e92:	2201      	movs	r2, #1
 8008e94:	4620      	mov	r0, r4
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	f000 fac6 	bl	8009428 <__lshift>
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4683      	mov	fp, r0
 8008ea0:	f000 fb2e 	bl	8009500 <__mcmp>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	dc02      	bgt.n	8008eb0 <_dtoa_r+0xab8>
 8008eaa:	d1de      	bne.n	8008e6a <_dtoa_r+0xa72>
 8008eac:	07da      	lsls	r2, r3, #31
 8008eae:	d5dc      	bpl.n	8008e6a <_dtoa_r+0xa72>
 8008eb0:	2b39      	cmp	r3, #57	; 0x39
 8008eb2:	d1d8      	bne.n	8008e66 <_dtoa_r+0xa6e>
 8008eb4:	9a02      	ldr	r2, [sp, #8]
 8008eb6:	2339      	movs	r3, #57	; 0x39
 8008eb8:	7013      	strb	r3, [r2, #0]
 8008eba:	462b      	mov	r3, r5
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ec4:	2a39      	cmp	r2, #57	; 0x39
 8008ec6:	d050      	beq.n	8008f6a <_dtoa_r+0xb72>
 8008ec8:	3201      	adds	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	e745      	b.n	8008d5a <_dtoa_r+0x962>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	dd03      	ble.n	8008eda <_dtoa_r+0xae2>
 8008ed2:	2b39      	cmp	r3, #57	; 0x39
 8008ed4:	d0ee      	beq.n	8008eb4 <_dtoa_r+0xabc>
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	e7c7      	b.n	8008e6a <_dtoa_r+0xa72>
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	9907      	ldr	r1, [sp, #28]
 8008ede:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ee2:	428a      	cmp	r2, r1
 8008ee4:	d02a      	beq.n	8008f3c <_dtoa_r+0xb44>
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	2300      	movs	r3, #0
 8008eea:	220a      	movs	r2, #10
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 f8eb 	bl	80090c8 <__multadd>
 8008ef2:	45b8      	cmp	r8, r7
 8008ef4:	4683      	mov	fp, r0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	f04f 020a 	mov.w	r2, #10
 8008efe:	4641      	mov	r1, r8
 8008f00:	4620      	mov	r0, r4
 8008f02:	d107      	bne.n	8008f14 <_dtoa_r+0xb1c>
 8008f04:	f000 f8e0 	bl	80090c8 <__multadd>
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	e775      	b.n	8008e00 <_dtoa_r+0xa08>
 8008f14:	f000 f8d8 	bl	80090c8 <__multadd>
 8008f18:	4639      	mov	r1, r7
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	220a      	movs	r2, #10
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 f8d1 	bl	80090c8 <__multadd>
 8008f26:	4607      	mov	r7, r0
 8008f28:	e7f0      	b.n	8008f0c <_dtoa_r+0xb14>
 8008f2a:	f1b9 0f00 	cmp.w	r9, #0
 8008f2e:	9a00      	ldr	r2, [sp, #0]
 8008f30:	bfcc      	ite	gt
 8008f32:	464d      	movgt	r5, r9
 8008f34:	2501      	movle	r5, #1
 8008f36:	4415      	add	r5, r2
 8008f38:	f04f 0800 	mov.w	r8, #0
 8008f3c:	4659      	mov	r1, fp
 8008f3e:	2201      	movs	r2, #1
 8008f40:	4620      	mov	r0, r4
 8008f42:	9301      	str	r3, [sp, #4]
 8008f44:	f000 fa70 	bl	8009428 <__lshift>
 8008f48:	4631      	mov	r1, r6
 8008f4a:	4683      	mov	fp, r0
 8008f4c:	f000 fad8 	bl	8009500 <__mcmp>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	dcb2      	bgt.n	8008eba <_dtoa_r+0xac2>
 8008f54:	d102      	bne.n	8008f5c <_dtoa_r+0xb64>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	07db      	lsls	r3, r3, #31
 8008f5a:	d4ae      	bmi.n	8008eba <_dtoa_r+0xac2>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	461d      	mov	r5, r3
 8008f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f64:	2a30      	cmp	r2, #48	; 0x30
 8008f66:	d0fa      	beq.n	8008f5e <_dtoa_r+0xb66>
 8008f68:	e6f7      	b.n	8008d5a <_dtoa_r+0x962>
 8008f6a:	9a00      	ldr	r2, [sp, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d1a5      	bne.n	8008ebc <_dtoa_r+0xac4>
 8008f70:	f10a 0a01 	add.w	sl, sl, #1
 8008f74:	2331      	movs	r3, #49	; 0x31
 8008f76:	e779      	b.n	8008e6c <_dtoa_r+0xa74>
 8008f78:	4b13      	ldr	r3, [pc, #76]	; (8008fc8 <_dtoa_r+0xbd0>)
 8008f7a:	f7ff baaf 	b.w	80084dc <_dtoa_r+0xe4>
 8008f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f aa86 	bne.w	8008492 <_dtoa_r+0x9a>
 8008f86:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <_dtoa_r+0xbd4>)
 8008f88:	f7ff baa8 	b.w	80084dc <_dtoa_r+0xe4>
 8008f8c:	f1b9 0f00 	cmp.w	r9, #0
 8008f90:	dc03      	bgt.n	8008f9a <_dtoa_r+0xba2>
 8008f92:	9b05      	ldr	r3, [sp, #20]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	f73f aec9 	bgt.w	8008d2c <_dtoa_r+0x934>
 8008f9a:	9d00      	ldr	r5, [sp, #0]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	f7ff f99d 	bl	80082de <quorem>
 8008fa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008fa8:	f805 3b01 	strb.w	r3, [r5], #1
 8008fac:	9a00      	ldr	r2, [sp, #0]
 8008fae:	1aaa      	subs	r2, r5, r2
 8008fb0:	4591      	cmp	r9, r2
 8008fb2:	ddba      	ble.n	8008f2a <_dtoa_r+0xb32>
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	220a      	movs	r2, #10
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 f884 	bl	80090c8 <__multadd>
 8008fc0:	4683      	mov	fp, r0
 8008fc2:	e7eb      	b.n	8008f9c <_dtoa_r+0xba4>
 8008fc4:	0800a85f 	.word	0x0800a85f
 8008fc8:	0800a7b8 	.word	0x0800a7b8
 8008fcc:	0800a7dc 	.word	0x0800a7dc

08008fd0 <_localeconv_r>:
 8008fd0:	4800      	ldr	r0, [pc, #0]	; (8008fd4 <_localeconv_r+0x4>)
 8008fd2:	4770      	bx	lr
 8008fd4:	20000178 	.word	0x20000178

08008fd8 <malloc>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <malloc+0xc>)
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f000 bbef 	b.w	80097c0 <_malloc_r>
 8008fe2:	bf00      	nop
 8008fe4:	20000024 	.word	0x20000024

08008fe8 <memcpy>:
 8008fe8:	440a      	add	r2, r1
 8008fea:	4291      	cmp	r1, r2
 8008fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff0:	d100      	bne.n	8008ff4 <memcpy+0xc>
 8008ff2:	4770      	bx	lr
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ffe:	4291      	cmp	r1, r2
 8009000:	d1f9      	bne.n	8008ff6 <memcpy+0xe>
 8009002:	bd10      	pop	{r4, pc}

08009004 <_Balloc>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009008:	4604      	mov	r4, r0
 800900a:	460d      	mov	r5, r1
 800900c:	b976      	cbnz	r6, 800902c <_Balloc+0x28>
 800900e:	2010      	movs	r0, #16
 8009010:	f7ff ffe2 	bl	8008fd8 <malloc>
 8009014:	4602      	mov	r2, r0
 8009016:	6260      	str	r0, [r4, #36]	; 0x24
 8009018:	b920      	cbnz	r0, 8009024 <_Balloc+0x20>
 800901a:	4b18      	ldr	r3, [pc, #96]	; (800907c <_Balloc+0x78>)
 800901c:	4818      	ldr	r0, [pc, #96]	; (8009080 <_Balloc+0x7c>)
 800901e:	2166      	movs	r1, #102	; 0x66
 8009020:	f000 fd94 	bl	8009b4c <__assert_func>
 8009024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009028:	6006      	str	r6, [r0, #0]
 800902a:	60c6      	str	r6, [r0, #12]
 800902c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800902e:	68f3      	ldr	r3, [r6, #12]
 8009030:	b183      	cbz	r3, 8009054 <_Balloc+0x50>
 8009032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800903a:	b9b8      	cbnz	r0, 800906c <_Balloc+0x68>
 800903c:	2101      	movs	r1, #1
 800903e:	fa01 f605 	lsl.w	r6, r1, r5
 8009042:	1d72      	adds	r2, r6, #5
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fb5a 	bl	8009700 <_calloc_r>
 800904c:	b160      	cbz	r0, 8009068 <_Balloc+0x64>
 800904e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009052:	e00e      	b.n	8009072 <_Balloc+0x6e>
 8009054:	2221      	movs	r2, #33	; 0x21
 8009056:	2104      	movs	r1, #4
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fb51 	bl	8009700 <_calloc_r>
 800905e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009060:	60f0      	str	r0, [r6, #12]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e4      	bne.n	8009032 <_Balloc+0x2e>
 8009068:	2000      	movs	r0, #0
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	6802      	ldr	r2, [r0, #0]
 800906e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009072:	2300      	movs	r3, #0
 8009074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009078:	e7f7      	b.n	800906a <_Balloc+0x66>
 800907a:	bf00      	nop
 800907c:	0800a7e9 	.word	0x0800a7e9
 8009080:	0800a870 	.word	0x0800a870

08009084 <_Bfree>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b976      	cbnz	r6, 80090ac <_Bfree+0x28>
 800908e:	2010      	movs	r0, #16
 8009090:	f7ff ffa2 	bl	8008fd8 <malloc>
 8009094:	4602      	mov	r2, r0
 8009096:	6268      	str	r0, [r5, #36]	; 0x24
 8009098:	b920      	cbnz	r0, 80090a4 <_Bfree+0x20>
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <_Bfree+0x3c>)
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <_Bfree+0x40>)
 800909e:	218a      	movs	r1, #138	; 0x8a
 80090a0:	f000 fd54 	bl	8009b4c <__assert_func>
 80090a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090a8:	6006      	str	r6, [r0, #0]
 80090aa:	60c6      	str	r6, [r0, #12]
 80090ac:	b13c      	cbz	r4, 80090be <_Bfree+0x3a>
 80090ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090b0:	6862      	ldr	r2, [r4, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090b8:	6021      	str	r1, [r4, #0]
 80090ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	0800a7e9 	.word	0x0800a7e9
 80090c4:	0800a870 	.word	0x0800a870

080090c8 <__multadd>:
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	690e      	ldr	r6, [r1, #16]
 80090ce:	4607      	mov	r7, r0
 80090d0:	4698      	mov	r8, r3
 80090d2:	460c      	mov	r4, r1
 80090d4:	f101 0014 	add.w	r0, r1, #20
 80090d8:	2300      	movs	r3, #0
 80090da:	6805      	ldr	r5, [r0, #0]
 80090dc:	b2a9      	uxth	r1, r5
 80090de:	fb02 8101 	mla	r1, r2, r1, r8
 80090e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80090e6:	0c2d      	lsrs	r5, r5, #16
 80090e8:	fb02 c505 	mla	r5, r2, r5, ip
 80090ec:	b289      	uxth	r1, r1
 80090ee:	3301      	adds	r3, #1
 80090f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80090f4:	429e      	cmp	r6, r3
 80090f6:	f840 1b04 	str.w	r1, [r0], #4
 80090fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80090fe:	dcec      	bgt.n	80090da <__multadd+0x12>
 8009100:	f1b8 0f00 	cmp.w	r8, #0
 8009104:	d022      	beq.n	800914c <__multadd+0x84>
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	42b3      	cmp	r3, r6
 800910a:	dc19      	bgt.n	8009140 <__multadd+0x78>
 800910c:	6861      	ldr	r1, [r4, #4]
 800910e:	4638      	mov	r0, r7
 8009110:	3101      	adds	r1, #1
 8009112:	f7ff ff77 	bl	8009004 <_Balloc>
 8009116:	4605      	mov	r5, r0
 8009118:	b928      	cbnz	r0, 8009126 <__multadd+0x5e>
 800911a:	4602      	mov	r2, r0
 800911c:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <__multadd+0x8c>)
 800911e:	480e      	ldr	r0, [pc, #56]	; (8009158 <__multadd+0x90>)
 8009120:	21b5      	movs	r1, #181	; 0xb5
 8009122:	f000 fd13 	bl	8009b4c <__assert_func>
 8009126:	6922      	ldr	r2, [r4, #16]
 8009128:	3202      	adds	r2, #2
 800912a:	f104 010c 	add.w	r1, r4, #12
 800912e:	0092      	lsls	r2, r2, #2
 8009130:	300c      	adds	r0, #12
 8009132:	f7ff ff59 	bl	8008fe8 <memcpy>
 8009136:	4621      	mov	r1, r4
 8009138:	4638      	mov	r0, r7
 800913a:	f7ff ffa3 	bl	8009084 <_Bfree>
 800913e:	462c      	mov	r4, r5
 8009140:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009144:	3601      	adds	r6, #1
 8009146:	f8c3 8014 	str.w	r8, [r3, #20]
 800914a:	6126      	str	r6, [r4, #16]
 800914c:	4620      	mov	r0, r4
 800914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009152:	bf00      	nop
 8009154:	0800a85f 	.word	0x0800a85f
 8009158:	0800a870 	.word	0x0800a870

0800915c <__hi0bits>:
 800915c:	0c03      	lsrs	r3, r0, #16
 800915e:	041b      	lsls	r3, r3, #16
 8009160:	b9d3      	cbnz	r3, 8009198 <__hi0bits+0x3c>
 8009162:	0400      	lsls	r0, r0, #16
 8009164:	2310      	movs	r3, #16
 8009166:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800916a:	bf04      	itt	eq
 800916c:	0200      	lsleq	r0, r0, #8
 800916e:	3308      	addeq	r3, #8
 8009170:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009174:	bf04      	itt	eq
 8009176:	0100      	lsleq	r0, r0, #4
 8009178:	3304      	addeq	r3, #4
 800917a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800917e:	bf04      	itt	eq
 8009180:	0080      	lsleq	r0, r0, #2
 8009182:	3302      	addeq	r3, #2
 8009184:	2800      	cmp	r0, #0
 8009186:	db05      	blt.n	8009194 <__hi0bits+0x38>
 8009188:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800918c:	f103 0301 	add.w	r3, r3, #1
 8009190:	bf08      	it	eq
 8009192:	2320      	moveq	r3, #32
 8009194:	4618      	mov	r0, r3
 8009196:	4770      	bx	lr
 8009198:	2300      	movs	r3, #0
 800919a:	e7e4      	b.n	8009166 <__hi0bits+0xa>

0800919c <__lo0bits>:
 800919c:	6803      	ldr	r3, [r0, #0]
 800919e:	f013 0207 	ands.w	r2, r3, #7
 80091a2:	4601      	mov	r1, r0
 80091a4:	d00b      	beq.n	80091be <__lo0bits+0x22>
 80091a6:	07da      	lsls	r2, r3, #31
 80091a8:	d424      	bmi.n	80091f4 <__lo0bits+0x58>
 80091aa:	0798      	lsls	r0, r3, #30
 80091ac:	bf49      	itett	mi
 80091ae:	085b      	lsrmi	r3, r3, #1
 80091b0:	089b      	lsrpl	r3, r3, #2
 80091b2:	2001      	movmi	r0, #1
 80091b4:	600b      	strmi	r3, [r1, #0]
 80091b6:	bf5c      	itt	pl
 80091b8:	600b      	strpl	r3, [r1, #0]
 80091ba:	2002      	movpl	r0, #2
 80091bc:	4770      	bx	lr
 80091be:	b298      	uxth	r0, r3
 80091c0:	b9b0      	cbnz	r0, 80091f0 <__lo0bits+0x54>
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	2010      	movs	r0, #16
 80091c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091ca:	bf04      	itt	eq
 80091cc:	0a1b      	lsreq	r3, r3, #8
 80091ce:	3008      	addeq	r0, #8
 80091d0:	071a      	lsls	r2, r3, #28
 80091d2:	bf04      	itt	eq
 80091d4:	091b      	lsreq	r3, r3, #4
 80091d6:	3004      	addeq	r0, #4
 80091d8:	079a      	lsls	r2, r3, #30
 80091da:	bf04      	itt	eq
 80091dc:	089b      	lsreq	r3, r3, #2
 80091de:	3002      	addeq	r0, #2
 80091e0:	07da      	lsls	r2, r3, #31
 80091e2:	d403      	bmi.n	80091ec <__lo0bits+0x50>
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	f100 0001 	add.w	r0, r0, #1
 80091ea:	d005      	beq.n	80091f8 <__lo0bits+0x5c>
 80091ec:	600b      	str	r3, [r1, #0]
 80091ee:	4770      	bx	lr
 80091f0:	4610      	mov	r0, r2
 80091f2:	e7e8      	b.n	80091c6 <__lo0bits+0x2a>
 80091f4:	2000      	movs	r0, #0
 80091f6:	4770      	bx	lr
 80091f8:	2020      	movs	r0, #32
 80091fa:	4770      	bx	lr

080091fc <__i2b>:
 80091fc:	b510      	push	{r4, lr}
 80091fe:	460c      	mov	r4, r1
 8009200:	2101      	movs	r1, #1
 8009202:	f7ff feff 	bl	8009004 <_Balloc>
 8009206:	4602      	mov	r2, r0
 8009208:	b928      	cbnz	r0, 8009216 <__i2b+0x1a>
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <__i2b+0x24>)
 800920c:	4805      	ldr	r0, [pc, #20]	; (8009224 <__i2b+0x28>)
 800920e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009212:	f000 fc9b 	bl	8009b4c <__assert_func>
 8009216:	2301      	movs	r3, #1
 8009218:	6144      	str	r4, [r0, #20]
 800921a:	6103      	str	r3, [r0, #16]
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	0800a85f 	.word	0x0800a85f
 8009224:	0800a870 	.word	0x0800a870

08009228 <__multiply>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	4614      	mov	r4, r2
 800922e:	690a      	ldr	r2, [r1, #16]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	429a      	cmp	r2, r3
 8009234:	bfb8      	it	lt
 8009236:	460b      	movlt	r3, r1
 8009238:	460d      	mov	r5, r1
 800923a:	bfbc      	itt	lt
 800923c:	4625      	movlt	r5, r4
 800923e:	461c      	movlt	r4, r3
 8009240:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009244:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009248:	68ab      	ldr	r3, [r5, #8]
 800924a:	6869      	ldr	r1, [r5, #4]
 800924c:	eb0a 0709 	add.w	r7, sl, r9
 8009250:	42bb      	cmp	r3, r7
 8009252:	b085      	sub	sp, #20
 8009254:	bfb8      	it	lt
 8009256:	3101      	addlt	r1, #1
 8009258:	f7ff fed4 	bl	8009004 <_Balloc>
 800925c:	b930      	cbnz	r0, 800926c <__multiply+0x44>
 800925e:	4602      	mov	r2, r0
 8009260:	4b42      	ldr	r3, [pc, #264]	; (800936c <__multiply+0x144>)
 8009262:	4843      	ldr	r0, [pc, #268]	; (8009370 <__multiply+0x148>)
 8009264:	f240 115d 	movw	r1, #349	; 0x15d
 8009268:	f000 fc70 	bl	8009b4c <__assert_func>
 800926c:	f100 0614 	add.w	r6, r0, #20
 8009270:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009274:	4633      	mov	r3, r6
 8009276:	2200      	movs	r2, #0
 8009278:	4543      	cmp	r3, r8
 800927a:	d31e      	bcc.n	80092ba <__multiply+0x92>
 800927c:	f105 0c14 	add.w	ip, r5, #20
 8009280:	f104 0314 	add.w	r3, r4, #20
 8009284:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009288:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800928c:	9202      	str	r2, [sp, #8]
 800928e:	ebac 0205 	sub.w	r2, ip, r5
 8009292:	3a15      	subs	r2, #21
 8009294:	f022 0203 	bic.w	r2, r2, #3
 8009298:	3204      	adds	r2, #4
 800929a:	f105 0115 	add.w	r1, r5, #21
 800929e:	458c      	cmp	ip, r1
 80092a0:	bf38      	it	cc
 80092a2:	2204      	movcc	r2, #4
 80092a4:	9201      	str	r2, [sp, #4]
 80092a6:	9a02      	ldr	r2, [sp, #8]
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d808      	bhi.n	80092c0 <__multiply+0x98>
 80092ae:	2f00      	cmp	r7, #0
 80092b0:	dc55      	bgt.n	800935e <__multiply+0x136>
 80092b2:	6107      	str	r7, [r0, #16]
 80092b4:	b005      	add	sp, #20
 80092b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ba:	f843 2b04 	str.w	r2, [r3], #4
 80092be:	e7db      	b.n	8009278 <__multiply+0x50>
 80092c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80092c4:	f1ba 0f00 	cmp.w	sl, #0
 80092c8:	d020      	beq.n	800930c <__multiply+0xe4>
 80092ca:	f105 0e14 	add.w	lr, r5, #20
 80092ce:	46b1      	mov	r9, r6
 80092d0:	2200      	movs	r2, #0
 80092d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80092d6:	f8d9 b000 	ldr.w	fp, [r9]
 80092da:	b2a1      	uxth	r1, r4
 80092dc:	fa1f fb8b 	uxth.w	fp, fp
 80092e0:	fb0a b101 	mla	r1, sl, r1, fp
 80092e4:	4411      	add	r1, r2
 80092e6:	f8d9 2000 	ldr.w	r2, [r9]
 80092ea:	0c24      	lsrs	r4, r4, #16
 80092ec:	0c12      	lsrs	r2, r2, #16
 80092ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80092f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80092f6:	b289      	uxth	r1, r1
 80092f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092fc:	45f4      	cmp	ip, lr
 80092fe:	f849 1b04 	str.w	r1, [r9], #4
 8009302:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009306:	d8e4      	bhi.n	80092d2 <__multiply+0xaa>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	5072      	str	r2, [r6, r1]
 800930c:	9a03      	ldr	r2, [sp, #12]
 800930e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009312:	3304      	adds	r3, #4
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	d01f      	beq.n	800935a <__multiply+0x132>
 800931a:	6834      	ldr	r4, [r6, #0]
 800931c:	f105 0114 	add.w	r1, r5, #20
 8009320:	46b6      	mov	lr, r6
 8009322:	f04f 0a00 	mov.w	sl, #0
 8009326:	880a      	ldrh	r2, [r1, #0]
 8009328:	f8be b002 	ldrh.w	fp, [lr, #2]
 800932c:	fb09 b202 	mla	r2, r9, r2, fp
 8009330:	4492      	add	sl, r2
 8009332:	b2a4      	uxth	r4, r4
 8009334:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009338:	f84e 4b04 	str.w	r4, [lr], #4
 800933c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009340:	f8be 2000 	ldrh.w	r2, [lr]
 8009344:	0c24      	lsrs	r4, r4, #16
 8009346:	fb09 2404 	mla	r4, r9, r4, r2
 800934a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800934e:	458c      	cmp	ip, r1
 8009350:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009354:	d8e7      	bhi.n	8009326 <__multiply+0xfe>
 8009356:	9a01      	ldr	r2, [sp, #4]
 8009358:	50b4      	str	r4, [r6, r2]
 800935a:	3604      	adds	r6, #4
 800935c:	e7a3      	b.n	80092a6 <__multiply+0x7e>
 800935e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1a5      	bne.n	80092b2 <__multiply+0x8a>
 8009366:	3f01      	subs	r7, #1
 8009368:	e7a1      	b.n	80092ae <__multiply+0x86>
 800936a:	bf00      	nop
 800936c:	0800a85f 	.word	0x0800a85f
 8009370:	0800a870 	.word	0x0800a870

08009374 <__pow5mult>:
 8009374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009378:	4615      	mov	r5, r2
 800937a:	f012 0203 	ands.w	r2, r2, #3
 800937e:	4606      	mov	r6, r0
 8009380:	460f      	mov	r7, r1
 8009382:	d007      	beq.n	8009394 <__pow5mult+0x20>
 8009384:	4c25      	ldr	r4, [pc, #148]	; (800941c <__pow5mult+0xa8>)
 8009386:	3a01      	subs	r2, #1
 8009388:	2300      	movs	r3, #0
 800938a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800938e:	f7ff fe9b 	bl	80090c8 <__multadd>
 8009392:	4607      	mov	r7, r0
 8009394:	10ad      	asrs	r5, r5, #2
 8009396:	d03d      	beq.n	8009414 <__pow5mult+0xa0>
 8009398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800939a:	b97c      	cbnz	r4, 80093bc <__pow5mult+0x48>
 800939c:	2010      	movs	r0, #16
 800939e:	f7ff fe1b 	bl	8008fd8 <malloc>
 80093a2:	4602      	mov	r2, r0
 80093a4:	6270      	str	r0, [r6, #36]	; 0x24
 80093a6:	b928      	cbnz	r0, 80093b4 <__pow5mult+0x40>
 80093a8:	4b1d      	ldr	r3, [pc, #116]	; (8009420 <__pow5mult+0xac>)
 80093aa:	481e      	ldr	r0, [pc, #120]	; (8009424 <__pow5mult+0xb0>)
 80093ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093b0:	f000 fbcc 	bl	8009b4c <__assert_func>
 80093b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093b8:	6004      	str	r4, [r0, #0]
 80093ba:	60c4      	str	r4, [r0, #12]
 80093bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093c4:	b94c      	cbnz	r4, 80093da <__pow5mult+0x66>
 80093c6:	f240 2171 	movw	r1, #625	; 0x271
 80093ca:	4630      	mov	r0, r6
 80093cc:	f7ff ff16 	bl	80091fc <__i2b>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80093d6:	4604      	mov	r4, r0
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	f04f 0900 	mov.w	r9, #0
 80093de:	07eb      	lsls	r3, r5, #31
 80093e0:	d50a      	bpl.n	80093f8 <__pow5mult+0x84>
 80093e2:	4639      	mov	r1, r7
 80093e4:	4622      	mov	r2, r4
 80093e6:	4630      	mov	r0, r6
 80093e8:	f7ff ff1e 	bl	8009228 <__multiply>
 80093ec:	4639      	mov	r1, r7
 80093ee:	4680      	mov	r8, r0
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7ff fe47 	bl	8009084 <_Bfree>
 80093f6:	4647      	mov	r7, r8
 80093f8:	106d      	asrs	r5, r5, #1
 80093fa:	d00b      	beq.n	8009414 <__pow5mult+0xa0>
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	b938      	cbnz	r0, 8009410 <__pow5mult+0x9c>
 8009400:	4622      	mov	r2, r4
 8009402:	4621      	mov	r1, r4
 8009404:	4630      	mov	r0, r6
 8009406:	f7ff ff0f 	bl	8009228 <__multiply>
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	f8c0 9000 	str.w	r9, [r0]
 8009410:	4604      	mov	r4, r0
 8009412:	e7e4      	b.n	80093de <__pow5mult+0x6a>
 8009414:	4638      	mov	r0, r7
 8009416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941a:	bf00      	nop
 800941c:	0800a9c0 	.word	0x0800a9c0
 8009420:	0800a7e9 	.word	0x0800a7e9
 8009424:	0800a870 	.word	0x0800a870

08009428 <__lshift>:
 8009428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800942c:	460c      	mov	r4, r1
 800942e:	6849      	ldr	r1, [r1, #4]
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	4607      	mov	r7, r0
 800943a:	4691      	mov	r9, r2
 800943c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009440:	f108 0601 	add.w	r6, r8, #1
 8009444:	42b3      	cmp	r3, r6
 8009446:	db0b      	blt.n	8009460 <__lshift+0x38>
 8009448:	4638      	mov	r0, r7
 800944a:	f7ff fddb 	bl	8009004 <_Balloc>
 800944e:	4605      	mov	r5, r0
 8009450:	b948      	cbnz	r0, 8009466 <__lshift+0x3e>
 8009452:	4602      	mov	r2, r0
 8009454:	4b28      	ldr	r3, [pc, #160]	; (80094f8 <__lshift+0xd0>)
 8009456:	4829      	ldr	r0, [pc, #164]	; (80094fc <__lshift+0xd4>)
 8009458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800945c:	f000 fb76 	bl	8009b4c <__assert_func>
 8009460:	3101      	adds	r1, #1
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	e7ee      	b.n	8009444 <__lshift+0x1c>
 8009466:	2300      	movs	r3, #0
 8009468:	f100 0114 	add.w	r1, r0, #20
 800946c:	f100 0210 	add.w	r2, r0, #16
 8009470:	4618      	mov	r0, r3
 8009472:	4553      	cmp	r3, sl
 8009474:	db33      	blt.n	80094de <__lshift+0xb6>
 8009476:	6920      	ldr	r0, [r4, #16]
 8009478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800947c:	f104 0314 	add.w	r3, r4, #20
 8009480:	f019 091f 	ands.w	r9, r9, #31
 8009484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800948c:	d02b      	beq.n	80094e6 <__lshift+0xbe>
 800948e:	f1c9 0e20 	rsb	lr, r9, #32
 8009492:	468a      	mov	sl, r1
 8009494:	2200      	movs	r2, #0
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	fa00 f009 	lsl.w	r0, r0, r9
 800949c:	4302      	orrs	r2, r0
 800949e:	f84a 2b04 	str.w	r2, [sl], #4
 80094a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a6:	459c      	cmp	ip, r3
 80094a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80094ac:	d8f3      	bhi.n	8009496 <__lshift+0x6e>
 80094ae:	ebac 0304 	sub.w	r3, ip, r4
 80094b2:	3b15      	subs	r3, #21
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3304      	adds	r3, #4
 80094ba:	f104 0015 	add.w	r0, r4, #21
 80094be:	4584      	cmp	ip, r0
 80094c0:	bf38      	it	cc
 80094c2:	2304      	movcc	r3, #4
 80094c4:	50ca      	str	r2, [r1, r3]
 80094c6:	b10a      	cbz	r2, 80094cc <__lshift+0xa4>
 80094c8:	f108 0602 	add.w	r6, r8, #2
 80094cc:	3e01      	subs	r6, #1
 80094ce:	4638      	mov	r0, r7
 80094d0:	612e      	str	r6, [r5, #16]
 80094d2:	4621      	mov	r1, r4
 80094d4:	f7ff fdd6 	bl	8009084 <_Bfree>
 80094d8:	4628      	mov	r0, r5
 80094da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094de:	f842 0f04 	str.w	r0, [r2, #4]!
 80094e2:	3301      	adds	r3, #1
 80094e4:	e7c5      	b.n	8009472 <__lshift+0x4a>
 80094e6:	3904      	subs	r1, #4
 80094e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80094f0:	459c      	cmp	ip, r3
 80094f2:	d8f9      	bhi.n	80094e8 <__lshift+0xc0>
 80094f4:	e7ea      	b.n	80094cc <__lshift+0xa4>
 80094f6:	bf00      	nop
 80094f8:	0800a85f 	.word	0x0800a85f
 80094fc:	0800a870 	.word	0x0800a870

08009500 <__mcmp>:
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	6902      	ldr	r2, [r0, #16]
 8009504:	690c      	ldr	r4, [r1, #16]
 8009506:	1b12      	subs	r2, r2, r4
 8009508:	d10e      	bne.n	8009528 <__mcmp+0x28>
 800950a:	f100 0314 	add.w	r3, r0, #20
 800950e:	3114      	adds	r1, #20
 8009510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800951c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009520:	42a5      	cmp	r5, r4
 8009522:	d003      	beq.n	800952c <__mcmp+0x2c>
 8009524:	d305      	bcc.n	8009532 <__mcmp+0x32>
 8009526:	2201      	movs	r2, #1
 8009528:	4610      	mov	r0, r2
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	4283      	cmp	r3, r0
 800952e:	d3f3      	bcc.n	8009518 <__mcmp+0x18>
 8009530:	e7fa      	b.n	8009528 <__mcmp+0x28>
 8009532:	f04f 32ff 	mov.w	r2, #4294967295
 8009536:	e7f7      	b.n	8009528 <__mcmp+0x28>

08009538 <__mdiff>:
 8009538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	460c      	mov	r4, r1
 800953e:	4606      	mov	r6, r0
 8009540:	4611      	mov	r1, r2
 8009542:	4620      	mov	r0, r4
 8009544:	4617      	mov	r7, r2
 8009546:	f7ff ffdb 	bl	8009500 <__mcmp>
 800954a:	1e05      	subs	r5, r0, #0
 800954c:	d110      	bne.n	8009570 <__mdiff+0x38>
 800954e:	4629      	mov	r1, r5
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff fd57 	bl	8009004 <_Balloc>
 8009556:	b930      	cbnz	r0, 8009566 <__mdiff+0x2e>
 8009558:	4b39      	ldr	r3, [pc, #228]	; (8009640 <__mdiff+0x108>)
 800955a:	4602      	mov	r2, r0
 800955c:	f240 2132 	movw	r1, #562	; 0x232
 8009560:	4838      	ldr	r0, [pc, #224]	; (8009644 <__mdiff+0x10c>)
 8009562:	f000 faf3 	bl	8009b4c <__assert_func>
 8009566:	2301      	movs	r3, #1
 8009568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800956c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009570:	bfa4      	itt	ge
 8009572:	463b      	movge	r3, r7
 8009574:	4627      	movge	r7, r4
 8009576:	4630      	mov	r0, r6
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	bfa6      	itte	ge
 800957c:	461c      	movge	r4, r3
 800957e:	2500      	movge	r5, #0
 8009580:	2501      	movlt	r5, #1
 8009582:	f7ff fd3f 	bl	8009004 <_Balloc>
 8009586:	b920      	cbnz	r0, 8009592 <__mdiff+0x5a>
 8009588:	4b2d      	ldr	r3, [pc, #180]	; (8009640 <__mdiff+0x108>)
 800958a:	4602      	mov	r2, r0
 800958c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009590:	e7e6      	b.n	8009560 <__mdiff+0x28>
 8009592:	693e      	ldr	r6, [r7, #16]
 8009594:	60c5      	str	r5, [r0, #12]
 8009596:	6925      	ldr	r5, [r4, #16]
 8009598:	f107 0114 	add.w	r1, r7, #20
 800959c:	f104 0914 	add.w	r9, r4, #20
 80095a0:	f100 0e14 	add.w	lr, r0, #20
 80095a4:	f107 0210 	add.w	r2, r7, #16
 80095a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80095ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80095b0:	46f2      	mov	sl, lr
 80095b2:	2700      	movs	r7, #0
 80095b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095bc:	fa1f f883 	uxth.w	r8, r3
 80095c0:	fa17 f78b 	uxtah	r7, r7, fp
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	eba7 0808 	sub.w	r8, r7, r8
 80095ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095d2:	fa1f f888 	uxth.w	r8, r8
 80095d6:	141f      	asrs	r7, r3, #16
 80095d8:	454d      	cmp	r5, r9
 80095da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095de:	f84a 3b04 	str.w	r3, [sl], #4
 80095e2:	d8e7      	bhi.n	80095b4 <__mdiff+0x7c>
 80095e4:	1b2b      	subs	r3, r5, r4
 80095e6:	3b15      	subs	r3, #21
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	3304      	adds	r3, #4
 80095ee:	3415      	adds	r4, #21
 80095f0:	42a5      	cmp	r5, r4
 80095f2:	bf38      	it	cc
 80095f4:	2304      	movcc	r3, #4
 80095f6:	4419      	add	r1, r3
 80095f8:	4473      	add	r3, lr
 80095fa:	469e      	mov	lr, r3
 80095fc:	460d      	mov	r5, r1
 80095fe:	4565      	cmp	r5, ip
 8009600:	d30e      	bcc.n	8009620 <__mdiff+0xe8>
 8009602:	f10c 0203 	add.w	r2, ip, #3
 8009606:	1a52      	subs	r2, r2, r1
 8009608:	f022 0203 	bic.w	r2, r2, #3
 800960c:	3903      	subs	r1, #3
 800960e:	458c      	cmp	ip, r1
 8009610:	bf38      	it	cc
 8009612:	2200      	movcc	r2, #0
 8009614:	441a      	add	r2, r3
 8009616:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800961a:	b17b      	cbz	r3, 800963c <__mdiff+0x104>
 800961c:	6106      	str	r6, [r0, #16]
 800961e:	e7a5      	b.n	800956c <__mdiff+0x34>
 8009620:	f855 8b04 	ldr.w	r8, [r5], #4
 8009624:	fa17 f488 	uxtah	r4, r7, r8
 8009628:	1422      	asrs	r2, r4, #16
 800962a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800962e:	b2a4      	uxth	r4, r4
 8009630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009634:	f84e 4b04 	str.w	r4, [lr], #4
 8009638:	1417      	asrs	r7, r2, #16
 800963a:	e7e0      	b.n	80095fe <__mdiff+0xc6>
 800963c:	3e01      	subs	r6, #1
 800963e:	e7ea      	b.n	8009616 <__mdiff+0xde>
 8009640:	0800a85f 	.word	0x0800a85f
 8009644:	0800a870 	.word	0x0800a870

08009648 <__d2b>:
 8009648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4689      	mov	r9, r1
 800964e:	2101      	movs	r1, #1
 8009650:	ec57 6b10 	vmov	r6, r7, d0
 8009654:	4690      	mov	r8, r2
 8009656:	f7ff fcd5 	bl	8009004 <_Balloc>
 800965a:	4604      	mov	r4, r0
 800965c:	b930      	cbnz	r0, 800966c <__d2b+0x24>
 800965e:	4602      	mov	r2, r0
 8009660:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <__d2b+0xb0>)
 8009662:	4826      	ldr	r0, [pc, #152]	; (80096fc <__d2b+0xb4>)
 8009664:	f240 310a 	movw	r1, #778	; 0x30a
 8009668:	f000 fa70 	bl	8009b4c <__assert_func>
 800966c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009674:	bb35      	cbnz	r5, 80096c4 <__d2b+0x7c>
 8009676:	2e00      	cmp	r6, #0
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	d028      	beq.n	80096ce <__d2b+0x86>
 800967c:	4668      	mov	r0, sp
 800967e:	9600      	str	r6, [sp, #0]
 8009680:	f7ff fd8c 	bl	800919c <__lo0bits>
 8009684:	9900      	ldr	r1, [sp, #0]
 8009686:	b300      	cbz	r0, 80096ca <__d2b+0x82>
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	f1c0 0320 	rsb	r3, r0, #32
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	430b      	orrs	r3, r1
 8009694:	40c2      	lsrs	r2, r0
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	9201      	str	r2, [sp, #4]
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	61a3      	str	r3, [r4, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bf14      	ite	ne
 80096a2:	2202      	movne	r2, #2
 80096a4:	2201      	moveq	r2, #1
 80096a6:	6122      	str	r2, [r4, #16]
 80096a8:	b1d5      	cbz	r5, 80096e0 <__d2b+0x98>
 80096aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096ae:	4405      	add	r5, r0
 80096b0:	f8c9 5000 	str.w	r5, [r9]
 80096b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096b8:	f8c8 0000 	str.w	r0, [r8]
 80096bc:	4620      	mov	r0, r4
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c8:	e7d5      	b.n	8009676 <__d2b+0x2e>
 80096ca:	6161      	str	r1, [r4, #20]
 80096cc:	e7e5      	b.n	800969a <__d2b+0x52>
 80096ce:	a801      	add	r0, sp, #4
 80096d0:	f7ff fd64 	bl	800919c <__lo0bits>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	6163      	str	r3, [r4, #20]
 80096d8:	2201      	movs	r2, #1
 80096da:	6122      	str	r2, [r4, #16]
 80096dc:	3020      	adds	r0, #32
 80096de:	e7e3      	b.n	80096a8 <__d2b+0x60>
 80096e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096e8:	f8c9 0000 	str.w	r0, [r9]
 80096ec:	6918      	ldr	r0, [r3, #16]
 80096ee:	f7ff fd35 	bl	800915c <__hi0bits>
 80096f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096f6:	e7df      	b.n	80096b8 <__d2b+0x70>
 80096f8:	0800a85f 	.word	0x0800a85f
 80096fc:	0800a870 	.word	0x0800a870

08009700 <_calloc_r>:
 8009700:	b513      	push	{r0, r1, r4, lr}
 8009702:	434a      	muls	r2, r1
 8009704:	4611      	mov	r1, r2
 8009706:	9201      	str	r2, [sp, #4]
 8009708:	f000 f85a 	bl	80097c0 <_malloc_r>
 800970c:	4604      	mov	r4, r0
 800970e:	b118      	cbz	r0, 8009718 <_calloc_r+0x18>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	2100      	movs	r1, #0
 8009714:	f7fe f942 	bl	800799c <memset>
 8009718:	4620      	mov	r0, r4
 800971a:	b002      	add	sp, #8
 800971c:	bd10      	pop	{r4, pc}
	...

08009720 <_free_r>:
 8009720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009722:	2900      	cmp	r1, #0
 8009724:	d048      	beq.n	80097b8 <_free_r+0x98>
 8009726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972a:	9001      	str	r0, [sp, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f1a1 0404 	sub.w	r4, r1, #4
 8009732:	bfb8      	it	lt
 8009734:	18e4      	addlt	r4, r4, r3
 8009736:	f000 fa65 	bl	8009c04 <__malloc_lock>
 800973a:	4a20      	ldr	r2, [pc, #128]	; (80097bc <_free_r+0x9c>)
 800973c:	9801      	ldr	r0, [sp, #4]
 800973e:	6813      	ldr	r3, [r2, #0]
 8009740:	4615      	mov	r5, r2
 8009742:	b933      	cbnz	r3, 8009752 <_free_r+0x32>
 8009744:	6063      	str	r3, [r4, #4]
 8009746:	6014      	str	r4, [r2, #0]
 8009748:	b003      	add	sp, #12
 800974a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800974e:	f000 ba5f 	b.w	8009c10 <__malloc_unlock>
 8009752:	42a3      	cmp	r3, r4
 8009754:	d90b      	bls.n	800976e <_free_r+0x4e>
 8009756:	6821      	ldr	r1, [r4, #0]
 8009758:	1862      	adds	r2, r4, r1
 800975a:	4293      	cmp	r3, r2
 800975c:	bf04      	itt	eq
 800975e:	681a      	ldreq	r2, [r3, #0]
 8009760:	685b      	ldreq	r3, [r3, #4]
 8009762:	6063      	str	r3, [r4, #4]
 8009764:	bf04      	itt	eq
 8009766:	1852      	addeq	r2, r2, r1
 8009768:	6022      	streq	r2, [r4, #0]
 800976a:	602c      	str	r4, [r5, #0]
 800976c:	e7ec      	b.n	8009748 <_free_r+0x28>
 800976e:	461a      	mov	r2, r3
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	b10b      	cbz	r3, 8009778 <_free_r+0x58>
 8009774:	42a3      	cmp	r3, r4
 8009776:	d9fa      	bls.n	800976e <_free_r+0x4e>
 8009778:	6811      	ldr	r1, [r2, #0]
 800977a:	1855      	adds	r5, r2, r1
 800977c:	42a5      	cmp	r5, r4
 800977e:	d10b      	bne.n	8009798 <_free_r+0x78>
 8009780:	6824      	ldr	r4, [r4, #0]
 8009782:	4421      	add	r1, r4
 8009784:	1854      	adds	r4, r2, r1
 8009786:	42a3      	cmp	r3, r4
 8009788:	6011      	str	r1, [r2, #0]
 800978a:	d1dd      	bne.n	8009748 <_free_r+0x28>
 800978c:	681c      	ldr	r4, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	6053      	str	r3, [r2, #4]
 8009792:	4421      	add	r1, r4
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	e7d7      	b.n	8009748 <_free_r+0x28>
 8009798:	d902      	bls.n	80097a0 <_free_r+0x80>
 800979a:	230c      	movs	r3, #12
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	e7d3      	b.n	8009748 <_free_r+0x28>
 80097a0:	6825      	ldr	r5, [r4, #0]
 80097a2:	1961      	adds	r1, r4, r5
 80097a4:	428b      	cmp	r3, r1
 80097a6:	bf04      	itt	eq
 80097a8:	6819      	ldreq	r1, [r3, #0]
 80097aa:	685b      	ldreq	r3, [r3, #4]
 80097ac:	6063      	str	r3, [r4, #4]
 80097ae:	bf04      	itt	eq
 80097b0:	1949      	addeq	r1, r1, r5
 80097b2:	6021      	streq	r1, [r4, #0]
 80097b4:	6054      	str	r4, [r2, #4]
 80097b6:	e7c7      	b.n	8009748 <_free_r+0x28>
 80097b8:	b003      	add	sp, #12
 80097ba:	bd30      	pop	{r4, r5, pc}
 80097bc:	2000032c 	.word	0x2000032c

080097c0 <_malloc_r>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	1ccd      	adds	r5, r1, #3
 80097c4:	f025 0503 	bic.w	r5, r5, #3
 80097c8:	3508      	adds	r5, #8
 80097ca:	2d0c      	cmp	r5, #12
 80097cc:	bf38      	it	cc
 80097ce:	250c      	movcc	r5, #12
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	4606      	mov	r6, r0
 80097d4:	db01      	blt.n	80097da <_malloc_r+0x1a>
 80097d6:	42a9      	cmp	r1, r5
 80097d8:	d903      	bls.n	80097e2 <_malloc_r+0x22>
 80097da:	230c      	movs	r3, #12
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	2000      	movs	r0, #0
 80097e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e2:	f000 fa0f 	bl	8009c04 <__malloc_lock>
 80097e6:	4921      	ldr	r1, [pc, #132]	; (800986c <_malloc_r+0xac>)
 80097e8:	680a      	ldr	r2, [r1, #0]
 80097ea:	4614      	mov	r4, r2
 80097ec:	b99c      	cbnz	r4, 8009816 <_malloc_r+0x56>
 80097ee:	4f20      	ldr	r7, [pc, #128]	; (8009870 <_malloc_r+0xb0>)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	b923      	cbnz	r3, 80097fe <_malloc_r+0x3e>
 80097f4:	4621      	mov	r1, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 f998 	bl	8009b2c <_sbrk_r>
 80097fc:	6038      	str	r0, [r7, #0]
 80097fe:	4629      	mov	r1, r5
 8009800:	4630      	mov	r0, r6
 8009802:	f000 f993 	bl	8009b2c <_sbrk_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d123      	bne.n	8009852 <_malloc_r+0x92>
 800980a:	230c      	movs	r3, #12
 800980c:	6033      	str	r3, [r6, #0]
 800980e:	4630      	mov	r0, r6
 8009810:	f000 f9fe 	bl	8009c10 <__malloc_unlock>
 8009814:	e7e3      	b.n	80097de <_malloc_r+0x1e>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	1b5b      	subs	r3, r3, r5
 800981a:	d417      	bmi.n	800984c <_malloc_r+0x8c>
 800981c:	2b0b      	cmp	r3, #11
 800981e:	d903      	bls.n	8009828 <_malloc_r+0x68>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	441c      	add	r4, r3
 8009824:	6025      	str	r5, [r4, #0]
 8009826:	e004      	b.n	8009832 <_malloc_r+0x72>
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	42a2      	cmp	r2, r4
 800982c:	bf0c      	ite	eq
 800982e:	600b      	streq	r3, [r1, #0]
 8009830:	6053      	strne	r3, [r2, #4]
 8009832:	4630      	mov	r0, r6
 8009834:	f000 f9ec 	bl	8009c10 <__malloc_unlock>
 8009838:	f104 000b 	add.w	r0, r4, #11
 800983c:	1d23      	adds	r3, r4, #4
 800983e:	f020 0007 	bic.w	r0, r0, #7
 8009842:	1ac2      	subs	r2, r0, r3
 8009844:	d0cc      	beq.n	80097e0 <_malloc_r+0x20>
 8009846:	1a1b      	subs	r3, r3, r0
 8009848:	50a3      	str	r3, [r4, r2]
 800984a:	e7c9      	b.n	80097e0 <_malloc_r+0x20>
 800984c:	4622      	mov	r2, r4
 800984e:	6864      	ldr	r4, [r4, #4]
 8009850:	e7cc      	b.n	80097ec <_malloc_r+0x2c>
 8009852:	1cc4      	adds	r4, r0, #3
 8009854:	f024 0403 	bic.w	r4, r4, #3
 8009858:	42a0      	cmp	r0, r4
 800985a:	d0e3      	beq.n	8009824 <_malloc_r+0x64>
 800985c:	1a21      	subs	r1, r4, r0
 800985e:	4630      	mov	r0, r6
 8009860:	f000 f964 	bl	8009b2c <_sbrk_r>
 8009864:	3001      	adds	r0, #1
 8009866:	d1dd      	bne.n	8009824 <_malloc_r+0x64>
 8009868:	e7cf      	b.n	800980a <_malloc_r+0x4a>
 800986a:	bf00      	nop
 800986c:	2000032c 	.word	0x2000032c
 8009870:	20000330 	.word	0x20000330

08009874 <__ssputs_r>:
 8009874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	688e      	ldr	r6, [r1, #8]
 800987a:	429e      	cmp	r6, r3
 800987c:	4682      	mov	sl, r0
 800987e:	460c      	mov	r4, r1
 8009880:	4690      	mov	r8, r2
 8009882:	461f      	mov	r7, r3
 8009884:	d838      	bhi.n	80098f8 <__ssputs_r+0x84>
 8009886:	898a      	ldrh	r2, [r1, #12]
 8009888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800988c:	d032      	beq.n	80098f4 <__ssputs_r+0x80>
 800988e:	6825      	ldr	r5, [r4, #0]
 8009890:	6909      	ldr	r1, [r1, #16]
 8009892:	eba5 0901 	sub.w	r9, r5, r1
 8009896:	6965      	ldr	r5, [r4, #20]
 8009898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800989c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098a0:	3301      	adds	r3, #1
 80098a2:	444b      	add	r3, r9
 80098a4:	106d      	asrs	r5, r5, #1
 80098a6:	429d      	cmp	r5, r3
 80098a8:	bf38      	it	cc
 80098aa:	461d      	movcc	r5, r3
 80098ac:	0553      	lsls	r3, r2, #21
 80098ae:	d531      	bpl.n	8009914 <__ssputs_r+0xa0>
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7ff ff85 	bl	80097c0 <_malloc_r>
 80098b6:	4606      	mov	r6, r0
 80098b8:	b950      	cbnz	r0, 80098d0 <__ssputs_r+0x5c>
 80098ba:	230c      	movs	r3, #12
 80098bc:	f8ca 3000 	str.w	r3, [sl]
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d0:	6921      	ldr	r1, [r4, #16]
 80098d2:	464a      	mov	r2, r9
 80098d4:	f7ff fb88 	bl	8008fe8 <memcpy>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	6126      	str	r6, [r4, #16]
 80098e6:	6165      	str	r5, [r4, #20]
 80098e8:	444e      	add	r6, r9
 80098ea:	eba5 0509 	sub.w	r5, r5, r9
 80098ee:	6026      	str	r6, [r4, #0]
 80098f0:	60a5      	str	r5, [r4, #8]
 80098f2:	463e      	mov	r6, r7
 80098f4:	42be      	cmp	r6, r7
 80098f6:	d900      	bls.n	80098fa <__ssputs_r+0x86>
 80098f8:	463e      	mov	r6, r7
 80098fa:	4632      	mov	r2, r6
 80098fc:	6820      	ldr	r0, [r4, #0]
 80098fe:	4641      	mov	r1, r8
 8009900:	f000 f966 	bl	8009bd0 <memmove>
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	1b9b      	subs	r3, r3, r6
 800990a:	4432      	add	r2, r6
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	2000      	movs	r0, #0
 8009912:	e7db      	b.n	80098cc <__ssputs_r+0x58>
 8009914:	462a      	mov	r2, r5
 8009916:	f000 f981 	bl	8009c1c <_realloc_r>
 800991a:	4606      	mov	r6, r0
 800991c:	2800      	cmp	r0, #0
 800991e:	d1e1      	bne.n	80098e4 <__ssputs_r+0x70>
 8009920:	6921      	ldr	r1, [r4, #16]
 8009922:	4650      	mov	r0, sl
 8009924:	f7ff fefc 	bl	8009720 <_free_r>
 8009928:	e7c7      	b.n	80098ba <__ssputs_r+0x46>
	...

0800992c <_svfiprintf_r>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	4698      	mov	r8, r3
 8009932:	898b      	ldrh	r3, [r1, #12]
 8009934:	061b      	lsls	r3, r3, #24
 8009936:	b09d      	sub	sp, #116	; 0x74
 8009938:	4607      	mov	r7, r0
 800993a:	460d      	mov	r5, r1
 800993c:	4614      	mov	r4, r2
 800993e:	d50e      	bpl.n	800995e <_svfiprintf_r+0x32>
 8009940:	690b      	ldr	r3, [r1, #16]
 8009942:	b963      	cbnz	r3, 800995e <_svfiprintf_r+0x32>
 8009944:	2140      	movs	r1, #64	; 0x40
 8009946:	f7ff ff3b 	bl	80097c0 <_malloc_r>
 800994a:	6028      	str	r0, [r5, #0]
 800994c:	6128      	str	r0, [r5, #16]
 800994e:	b920      	cbnz	r0, 800995a <_svfiprintf_r+0x2e>
 8009950:	230c      	movs	r3, #12
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	e0d1      	b.n	8009afe <_svfiprintf_r+0x1d2>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	616b      	str	r3, [r5, #20]
 800995e:	2300      	movs	r3, #0
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	2320      	movs	r3, #32
 8009964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009968:	f8cd 800c 	str.w	r8, [sp, #12]
 800996c:	2330      	movs	r3, #48	; 0x30
 800996e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b18 <_svfiprintf_r+0x1ec>
 8009972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009976:	f04f 0901 	mov.w	r9, #1
 800997a:	4623      	mov	r3, r4
 800997c:	469a      	mov	sl, r3
 800997e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009982:	b10a      	cbz	r2, 8009988 <_svfiprintf_r+0x5c>
 8009984:	2a25      	cmp	r2, #37	; 0x25
 8009986:	d1f9      	bne.n	800997c <_svfiprintf_r+0x50>
 8009988:	ebba 0b04 	subs.w	fp, sl, r4
 800998c:	d00b      	beq.n	80099a6 <_svfiprintf_r+0x7a>
 800998e:	465b      	mov	r3, fp
 8009990:	4622      	mov	r2, r4
 8009992:	4629      	mov	r1, r5
 8009994:	4638      	mov	r0, r7
 8009996:	f7ff ff6d 	bl	8009874 <__ssputs_r>
 800999a:	3001      	adds	r0, #1
 800999c:	f000 80aa 	beq.w	8009af4 <_svfiprintf_r+0x1c8>
 80099a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a2:	445a      	add	r2, fp
 80099a4:	9209      	str	r2, [sp, #36]	; 0x24
 80099a6:	f89a 3000 	ldrb.w	r3, [sl]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80a2 	beq.w	8009af4 <_svfiprintf_r+0x1c8>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ba:	f10a 0a01 	add.w	sl, sl, #1
 80099be:	9304      	str	r3, [sp, #16]
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c6:	931a      	str	r3, [sp, #104]	; 0x68
 80099c8:	4654      	mov	r4, sl
 80099ca:	2205      	movs	r2, #5
 80099cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d0:	4851      	ldr	r0, [pc, #324]	; (8009b18 <_svfiprintf_r+0x1ec>)
 80099d2:	f7f6 fc05 	bl	80001e0 <memchr>
 80099d6:	9a04      	ldr	r2, [sp, #16]
 80099d8:	b9d8      	cbnz	r0, 8009a12 <_svfiprintf_r+0xe6>
 80099da:	06d0      	lsls	r0, r2, #27
 80099dc:	bf44      	itt	mi
 80099de:	2320      	movmi	r3, #32
 80099e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e4:	0711      	lsls	r1, r2, #28
 80099e6:	bf44      	itt	mi
 80099e8:	232b      	movmi	r3, #43	; 0x2b
 80099ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ee:	f89a 3000 	ldrb.w	r3, [sl]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d015      	beq.n	8009a22 <_svfiprintf_r+0xf6>
 80099f6:	9a07      	ldr	r2, [sp, #28]
 80099f8:	4654      	mov	r4, sl
 80099fa:	2000      	movs	r0, #0
 80099fc:	f04f 0c0a 	mov.w	ip, #10
 8009a00:	4621      	mov	r1, r4
 8009a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a06:	3b30      	subs	r3, #48	; 0x30
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d94e      	bls.n	8009aaa <_svfiprintf_r+0x17e>
 8009a0c:	b1b0      	cbz	r0, 8009a3c <_svfiprintf_r+0x110>
 8009a0e:	9207      	str	r2, [sp, #28]
 8009a10:	e014      	b.n	8009a3c <_svfiprintf_r+0x110>
 8009a12:	eba0 0308 	sub.w	r3, r0, r8
 8009a16:	fa09 f303 	lsl.w	r3, r9, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	46a2      	mov	sl, r4
 8009a20:	e7d2      	b.n	80099c8 <_svfiprintf_r+0x9c>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	1d19      	adds	r1, r3, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	9103      	str	r1, [sp, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfbb      	ittet	lt
 8009a2e:	425b      	neglt	r3, r3
 8009a30:	f042 0202 	orrlt.w	r2, r2, #2
 8009a34:	9307      	strge	r3, [sp, #28]
 8009a36:	9307      	strlt	r3, [sp, #28]
 8009a38:	bfb8      	it	lt
 8009a3a:	9204      	strlt	r2, [sp, #16]
 8009a3c:	7823      	ldrb	r3, [r4, #0]
 8009a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a40:	d10c      	bne.n	8009a5c <_svfiprintf_r+0x130>
 8009a42:	7863      	ldrb	r3, [r4, #1]
 8009a44:	2b2a      	cmp	r3, #42	; 0x2a
 8009a46:	d135      	bne.n	8009ab4 <_svfiprintf_r+0x188>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9203      	str	r2, [sp, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bfb8      	it	lt
 8009a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a58:	3402      	adds	r4, #2
 8009a5a:	9305      	str	r3, [sp, #20]
 8009a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b28 <_svfiprintf_r+0x1fc>
 8009a60:	7821      	ldrb	r1, [r4, #0]
 8009a62:	2203      	movs	r2, #3
 8009a64:	4650      	mov	r0, sl
 8009a66:	f7f6 fbbb 	bl	80001e0 <memchr>
 8009a6a:	b140      	cbz	r0, 8009a7e <_svfiprintf_r+0x152>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	eba0 000a 	sub.w	r0, r0, sl
 8009a72:	fa03 f000 	lsl.w	r0, r3, r0
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	4303      	orrs	r3, r0
 8009a7a:	3401      	adds	r4, #1
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a82:	4826      	ldr	r0, [pc, #152]	; (8009b1c <_svfiprintf_r+0x1f0>)
 8009a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a88:	2206      	movs	r2, #6
 8009a8a:	f7f6 fba9 	bl	80001e0 <memchr>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d038      	beq.n	8009b04 <_svfiprintf_r+0x1d8>
 8009a92:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <_svfiprintf_r+0x1f4>)
 8009a94:	bb1b      	cbnz	r3, 8009ade <_svfiprintf_r+0x1b2>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	3307      	adds	r3, #7
 8009a9a:	f023 0307 	bic.w	r3, r3, #7
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	9303      	str	r3, [sp, #12]
 8009aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa4:	4433      	add	r3, r6
 8009aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa8:	e767      	b.n	800997a <_svfiprintf_r+0x4e>
 8009aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aae:	460c      	mov	r4, r1
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	e7a5      	b.n	8009a00 <_svfiprintf_r+0xd4>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	3401      	adds	r4, #1
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	4619      	mov	r1, r3
 8009abc:	f04f 0c0a 	mov.w	ip, #10
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac6:	3a30      	subs	r2, #48	; 0x30
 8009ac8:	2a09      	cmp	r2, #9
 8009aca:	d903      	bls.n	8009ad4 <_svfiprintf_r+0x1a8>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0c5      	beq.n	8009a5c <_svfiprintf_r+0x130>
 8009ad0:	9105      	str	r1, [sp, #20]
 8009ad2:	e7c3      	b.n	8009a5c <_svfiprintf_r+0x130>
 8009ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad8:	4604      	mov	r4, r0
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7f0      	b.n	8009ac0 <_svfiprintf_r+0x194>
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <_svfiprintf_r+0x1f8>)
 8009ae6:	a904      	add	r1, sp, #16
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7fd ffff 	bl	8007aec <_printf_float>
 8009aee:	1c42      	adds	r2, r0, #1
 8009af0:	4606      	mov	r6, r0
 8009af2:	d1d6      	bne.n	8009aa2 <_svfiprintf_r+0x176>
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	065b      	lsls	r3, r3, #25
 8009af8:	f53f af2c 	bmi.w	8009954 <_svfiprintf_r+0x28>
 8009afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009afe:	b01d      	add	sp, #116	; 0x74
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	ab03      	add	r3, sp, #12
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <_svfiprintf_r+0x1f8>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f7fe fa90 	bl	8008034 <_printf_i>
 8009b14:	e7eb      	b.n	8009aee <_svfiprintf_r+0x1c2>
 8009b16:	bf00      	nop
 8009b18:	0800a9cc 	.word	0x0800a9cc
 8009b1c:	0800a9d6 	.word	0x0800a9d6
 8009b20:	08007aed 	.word	0x08007aed
 8009b24:	08009875 	.word	0x08009875
 8009b28:	0800a9d2 	.word	0x0800a9d2

08009b2c <_sbrk_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d06      	ldr	r5, [pc, #24]	; (8009b48 <_sbrk_r+0x1c>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f8 f9f0 	bl	8001f1c <_sbrk>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_sbrk_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_sbrk_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	200006e8 	.word	0x200006e8

08009b4c <__assert_func>:
 8009b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b4e:	4614      	mov	r4, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <__assert_func+0x2c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4605      	mov	r5, r0
 8009b58:	68d8      	ldr	r0, [r3, #12]
 8009b5a:	b14c      	cbz	r4, 8009b70 <__assert_func+0x24>
 8009b5c:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <__assert_func+0x30>)
 8009b5e:	9100      	str	r1, [sp, #0]
 8009b60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b64:	4906      	ldr	r1, [pc, #24]	; (8009b80 <__assert_func+0x34>)
 8009b66:	462b      	mov	r3, r5
 8009b68:	f000 f80e 	bl	8009b88 <fiprintf>
 8009b6c:	f000 faa4 	bl	800a0b8 <abort>
 8009b70:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <__assert_func+0x38>)
 8009b72:	461c      	mov	r4, r3
 8009b74:	e7f3      	b.n	8009b5e <__assert_func+0x12>
 8009b76:	bf00      	nop
 8009b78:	20000024 	.word	0x20000024
 8009b7c:	0800a9dd 	.word	0x0800a9dd
 8009b80:	0800a9ea 	.word	0x0800a9ea
 8009b84:	0800aa18 	.word	0x0800aa18

08009b88 <fiprintf>:
 8009b88:	b40e      	push	{r1, r2, r3}
 8009b8a:	b503      	push	{r0, r1, lr}
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	4805      	ldr	r0, [pc, #20]	; (8009ba8 <fiprintf+0x20>)
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	6800      	ldr	r0, [r0, #0]
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	f000 f88f 	bl	8009cbc <_vfiprintf_r>
 8009b9e:	b002      	add	sp, #8
 8009ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ba4:	b003      	add	sp, #12
 8009ba6:	4770      	bx	lr
 8009ba8:	20000024 	.word	0x20000024

08009bac <__ascii_mbtowc>:
 8009bac:	b082      	sub	sp, #8
 8009bae:	b901      	cbnz	r1, 8009bb2 <__ascii_mbtowc+0x6>
 8009bb0:	a901      	add	r1, sp, #4
 8009bb2:	b142      	cbz	r2, 8009bc6 <__ascii_mbtowc+0x1a>
 8009bb4:	b14b      	cbz	r3, 8009bca <__ascii_mbtowc+0x1e>
 8009bb6:	7813      	ldrb	r3, [r2, #0]
 8009bb8:	600b      	str	r3, [r1, #0]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	1e10      	subs	r0, r2, #0
 8009bbe:	bf18      	it	ne
 8009bc0:	2001      	movne	r0, #1
 8009bc2:	b002      	add	sp, #8
 8009bc4:	4770      	bx	lr
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	e7fb      	b.n	8009bc2 <__ascii_mbtowc+0x16>
 8009bca:	f06f 0001 	mvn.w	r0, #1
 8009bce:	e7f8      	b.n	8009bc2 <__ascii_mbtowc+0x16>

08009bd0 <memmove>:
 8009bd0:	4288      	cmp	r0, r1
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	eb01 0402 	add.w	r4, r1, r2
 8009bd8:	d902      	bls.n	8009be0 <memmove+0x10>
 8009bda:	4284      	cmp	r4, r0
 8009bdc:	4623      	mov	r3, r4
 8009bde:	d807      	bhi.n	8009bf0 <memmove+0x20>
 8009be0:	1e43      	subs	r3, r0, #1
 8009be2:	42a1      	cmp	r1, r4
 8009be4:	d008      	beq.n	8009bf8 <memmove+0x28>
 8009be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bee:	e7f8      	b.n	8009be2 <memmove+0x12>
 8009bf0:	4402      	add	r2, r0
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	428a      	cmp	r2, r1
 8009bf6:	d100      	bne.n	8009bfa <memmove+0x2a>
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c02:	e7f7      	b.n	8009bf4 <memmove+0x24>

08009c04 <__malloc_lock>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__malloc_lock+0x8>)
 8009c06:	f000 bc17 	b.w	800a438 <__retarget_lock_acquire_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	200006f0 	.word	0x200006f0

08009c10 <__malloc_unlock>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__malloc_unlock+0x8>)
 8009c12:	f000 bc12 	b.w	800a43a <__retarget_lock_release_recursive>
 8009c16:	bf00      	nop
 8009c18:	200006f0 	.word	0x200006f0

08009c1c <_realloc_r>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	4607      	mov	r7, r0
 8009c20:	4614      	mov	r4, r2
 8009c22:	460e      	mov	r6, r1
 8009c24:	b921      	cbnz	r1, 8009c30 <_realloc_r+0x14>
 8009c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	f7ff bdc8 	b.w	80097c0 <_malloc_r>
 8009c30:	b922      	cbnz	r2, 8009c3c <_realloc_r+0x20>
 8009c32:	f7ff fd75 	bl	8009720 <_free_r>
 8009c36:	4625      	mov	r5, r4
 8009c38:	4628      	mov	r0, r5
 8009c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c3c:	f000 fc62 	bl	800a504 <_malloc_usable_size_r>
 8009c40:	42a0      	cmp	r0, r4
 8009c42:	d20f      	bcs.n	8009c64 <_realloc_r+0x48>
 8009c44:	4621      	mov	r1, r4
 8009c46:	4638      	mov	r0, r7
 8009c48:	f7ff fdba 	bl	80097c0 <_malloc_r>
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d0f2      	beq.n	8009c38 <_realloc_r+0x1c>
 8009c52:	4631      	mov	r1, r6
 8009c54:	4622      	mov	r2, r4
 8009c56:	f7ff f9c7 	bl	8008fe8 <memcpy>
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff fd5f 	bl	8009720 <_free_r>
 8009c62:	e7e9      	b.n	8009c38 <_realloc_r+0x1c>
 8009c64:	4635      	mov	r5, r6
 8009c66:	e7e7      	b.n	8009c38 <_realloc_r+0x1c>

08009c68 <__sfputc_r>:
 8009c68:	6893      	ldr	r3, [r2, #8]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	b410      	push	{r4}
 8009c70:	6093      	str	r3, [r2, #8]
 8009c72:	da08      	bge.n	8009c86 <__sfputc_r+0x1e>
 8009c74:	6994      	ldr	r4, [r2, #24]
 8009c76:	42a3      	cmp	r3, r4
 8009c78:	db01      	blt.n	8009c7e <__sfputc_r+0x16>
 8009c7a:	290a      	cmp	r1, #10
 8009c7c:	d103      	bne.n	8009c86 <__sfputc_r+0x1e>
 8009c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c82:	f000 b94b 	b.w	8009f1c <__swbuf_r>
 8009c86:	6813      	ldr	r3, [r2, #0]
 8009c88:	1c58      	adds	r0, r3, #1
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	7019      	strb	r1, [r3, #0]
 8009c8e:	4608      	mov	r0, r1
 8009c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <__sfputs_r>:
 8009c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	18d5      	adds	r5, r2, r3
 8009ca0:	42ac      	cmp	r4, r5
 8009ca2:	d101      	bne.n	8009ca8 <__sfputs_r+0x12>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e007      	b.n	8009cb8 <__sfputs_r+0x22>
 8009ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cac:	463a      	mov	r2, r7
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7ff ffda 	bl	8009c68 <__sfputc_r>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d1f3      	bne.n	8009ca0 <__sfputs_r+0xa>
 8009cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cbc <_vfiprintf_r>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	b09d      	sub	sp, #116	; 0x74
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4698      	mov	r8, r3
 8009cc8:	4606      	mov	r6, r0
 8009cca:	b118      	cbz	r0, 8009cd4 <_vfiprintf_r+0x18>
 8009ccc:	6983      	ldr	r3, [r0, #24]
 8009cce:	b90b      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x18>
 8009cd0:	f000 fb14 	bl	800a2fc <__sinit>
 8009cd4:	4b89      	ldr	r3, [pc, #548]	; (8009efc <_vfiprintf_r+0x240>)
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	d11b      	bne.n	8009d12 <_vfiprintf_r+0x56>
 8009cda:	6875      	ldr	r5, [r6, #4]
 8009cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cde:	07d9      	lsls	r1, r3, #31
 8009ce0:	d405      	bmi.n	8009cee <_vfiprintf_r+0x32>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	059a      	lsls	r2, r3, #22
 8009ce6:	d402      	bmi.n	8009cee <_vfiprintf_r+0x32>
 8009ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cea:	f000 fba5 	bl	800a438 <__retarget_lock_acquire_recursive>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	071b      	lsls	r3, r3, #28
 8009cf2:	d501      	bpl.n	8009cf8 <_vfiprintf_r+0x3c>
 8009cf4:	692b      	ldr	r3, [r5, #16]
 8009cf6:	b9eb      	cbnz	r3, 8009d34 <_vfiprintf_r+0x78>
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 f96e 	bl	8009fdc <__swsetup_r>
 8009d00:	b1c0      	cbz	r0, 8009d34 <_vfiprintf_r+0x78>
 8009d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d04:	07dc      	lsls	r4, r3, #31
 8009d06:	d50e      	bpl.n	8009d26 <_vfiprintf_r+0x6a>
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	b01d      	add	sp, #116	; 0x74
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	4b7b      	ldr	r3, [pc, #492]	; (8009f00 <_vfiprintf_r+0x244>)
 8009d14:	429d      	cmp	r5, r3
 8009d16:	d101      	bne.n	8009d1c <_vfiprintf_r+0x60>
 8009d18:	68b5      	ldr	r5, [r6, #8]
 8009d1a:	e7df      	b.n	8009cdc <_vfiprintf_r+0x20>
 8009d1c:	4b79      	ldr	r3, [pc, #484]	; (8009f04 <_vfiprintf_r+0x248>)
 8009d1e:	429d      	cmp	r5, r3
 8009d20:	bf08      	it	eq
 8009d22:	68f5      	ldreq	r5, [r6, #12]
 8009d24:	e7da      	b.n	8009cdc <_vfiprintf_r+0x20>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	0598      	lsls	r0, r3, #22
 8009d2a:	d4ed      	bmi.n	8009d08 <_vfiprintf_r+0x4c>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d2e:	f000 fb84 	bl	800a43a <__retarget_lock_release_recursive>
 8009d32:	e7e9      	b.n	8009d08 <_vfiprintf_r+0x4c>
 8009d34:	2300      	movs	r3, #0
 8009d36:	9309      	str	r3, [sp, #36]	; 0x24
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d42:	2330      	movs	r3, #48	; 0x30
 8009d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f08 <_vfiprintf_r+0x24c>
 8009d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d4c:	f04f 0901 	mov.w	r9, #1
 8009d50:	4623      	mov	r3, r4
 8009d52:	469a      	mov	sl, r3
 8009d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d58:	b10a      	cbz	r2, 8009d5e <_vfiprintf_r+0xa2>
 8009d5a:	2a25      	cmp	r2, #37	; 0x25
 8009d5c:	d1f9      	bne.n	8009d52 <_vfiprintf_r+0x96>
 8009d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d62:	d00b      	beq.n	8009d7c <_vfiprintf_r+0xc0>
 8009d64:	465b      	mov	r3, fp
 8009d66:	4622      	mov	r2, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ff93 	bl	8009c96 <__sfputs_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	f000 80aa 	beq.w	8009eca <_vfiprintf_r+0x20e>
 8009d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d78:	445a      	add	r2, fp
 8009d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80a2 	beq.w	8009eca <_vfiprintf_r+0x20e>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d90:	f10a 0a01 	add.w	sl, sl, #1
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d9e:	4654      	mov	r4, sl
 8009da0:	2205      	movs	r2, #5
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4858      	ldr	r0, [pc, #352]	; (8009f08 <_vfiprintf_r+0x24c>)
 8009da8:	f7f6 fa1a 	bl	80001e0 <memchr>
 8009dac:	9a04      	ldr	r2, [sp, #16]
 8009dae:	b9d8      	cbnz	r0, 8009de8 <_vfiprintf_r+0x12c>
 8009db0:	06d1      	lsls	r1, r2, #27
 8009db2:	bf44      	itt	mi
 8009db4:	2320      	movmi	r3, #32
 8009db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dba:	0713      	lsls	r3, r2, #28
 8009dbc:	bf44      	itt	mi
 8009dbe:	232b      	movmi	r3, #43	; 0x2b
 8009dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dca:	d015      	beq.n	8009df8 <_vfiprintf_r+0x13c>
 8009dcc:	9a07      	ldr	r2, [sp, #28]
 8009dce:	4654      	mov	r4, sl
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f04f 0c0a 	mov.w	ip, #10
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ddc:	3b30      	subs	r3, #48	; 0x30
 8009dde:	2b09      	cmp	r3, #9
 8009de0:	d94e      	bls.n	8009e80 <_vfiprintf_r+0x1c4>
 8009de2:	b1b0      	cbz	r0, 8009e12 <_vfiprintf_r+0x156>
 8009de4:	9207      	str	r2, [sp, #28]
 8009de6:	e014      	b.n	8009e12 <_vfiprintf_r+0x156>
 8009de8:	eba0 0308 	sub.w	r3, r0, r8
 8009dec:	fa09 f303 	lsl.w	r3, r9, r3
 8009df0:	4313      	orrs	r3, r2
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	46a2      	mov	sl, r4
 8009df6:	e7d2      	b.n	8009d9e <_vfiprintf_r+0xe2>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d19      	adds	r1, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9103      	str	r1, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfbb      	ittet	lt
 8009e04:	425b      	neglt	r3, r3
 8009e06:	f042 0202 	orrlt.w	r2, r2, #2
 8009e0a:	9307      	strge	r3, [sp, #28]
 8009e0c:	9307      	strlt	r3, [sp, #28]
 8009e0e:	bfb8      	it	lt
 8009e10:	9204      	strlt	r2, [sp, #16]
 8009e12:	7823      	ldrb	r3, [r4, #0]
 8009e14:	2b2e      	cmp	r3, #46	; 0x2e
 8009e16:	d10c      	bne.n	8009e32 <_vfiprintf_r+0x176>
 8009e18:	7863      	ldrb	r3, [r4, #1]
 8009e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1c:	d135      	bne.n	8009e8a <_vfiprintf_r+0x1ce>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9203      	str	r2, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfb8      	it	lt
 8009e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e2e:	3402      	adds	r4, #2
 8009e30:	9305      	str	r3, [sp, #20]
 8009e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f18 <_vfiprintf_r+0x25c>
 8009e36:	7821      	ldrb	r1, [r4, #0]
 8009e38:	2203      	movs	r2, #3
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	f7f6 f9d0 	bl	80001e0 <memchr>
 8009e40:	b140      	cbz	r0, 8009e54 <_vfiprintf_r+0x198>
 8009e42:	2340      	movs	r3, #64	; 0x40
 8009e44:	eba0 000a 	sub.w	r0, r0, sl
 8009e48:	fa03 f000 	lsl.w	r0, r3, r0
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	4303      	orrs	r3, r0
 8009e50:	3401      	adds	r4, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	482c      	ldr	r0, [pc, #176]	; (8009f0c <_vfiprintf_r+0x250>)
 8009e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e5e:	2206      	movs	r2, #6
 8009e60:	f7f6 f9be 	bl	80001e0 <memchr>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d03f      	beq.n	8009ee8 <_vfiprintf_r+0x22c>
 8009e68:	4b29      	ldr	r3, [pc, #164]	; (8009f10 <_vfiprintf_r+0x254>)
 8009e6a:	bb1b      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x1f8>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	3307      	adds	r3, #7
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7a:	443b      	add	r3, r7
 8009e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7e:	e767      	b.n	8009d50 <_vfiprintf_r+0x94>
 8009e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e84:	460c      	mov	r4, r1
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7a5      	b.n	8009dd6 <_vfiprintf_r+0x11a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	3401      	adds	r4, #1
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4620      	mov	r0, r4
 8009e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9c:	3a30      	subs	r2, #48	; 0x30
 8009e9e:	2a09      	cmp	r2, #9
 8009ea0:	d903      	bls.n	8009eaa <_vfiprintf_r+0x1ee>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0c5      	beq.n	8009e32 <_vfiprintf_r+0x176>
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	e7c3      	b.n	8009e32 <_vfiprintf_r+0x176>
 8009eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eae:	4604      	mov	r4, r0
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7f0      	b.n	8009e96 <_vfiprintf_r+0x1da>
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <_vfiprintf_r+0x258>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7fd fe14 	bl	8007aec <_printf_float>
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	1c78      	adds	r0, r7, #1
 8009ec8:	d1d6      	bne.n	8009e78 <_vfiprintf_r+0x1bc>
 8009eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ecc:	07d9      	lsls	r1, r3, #31
 8009ece:	d405      	bmi.n	8009edc <_vfiprintf_r+0x220>
 8009ed0:	89ab      	ldrh	r3, [r5, #12]
 8009ed2:	059a      	lsls	r2, r3, #22
 8009ed4:	d402      	bmi.n	8009edc <_vfiprintf_r+0x220>
 8009ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ed8:	f000 faaf 	bl	800a43a <__retarget_lock_release_recursive>
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	065b      	lsls	r3, r3, #25
 8009ee0:	f53f af12 	bmi.w	8009d08 <_vfiprintf_r+0x4c>
 8009ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee6:	e711      	b.n	8009d0c <_vfiprintf_r+0x50>
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <_vfiprintf_r+0x258>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7fe f89e 	bl	8008034 <_printf_i>
 8009ef8:	e7e4      	b.n	8009ec4 <_vfiprintf_r+0x208>
 8009efa:	bf00      	nop
 8009efc:	0800ab44 	.word	0x0800ab44
 8009f00:	0800ab64 	.word	0x0800ab64
 8009f04:	0800ab24 	.word	0x0800ab24
 8009f08:	0800a9cc 	.word	0x0800a9cc
 8009f0c:	0800a9d6 	.word	0x0800a9d6
 8009f10:	08007aed 	.word	0x08007aed
 8009f14:	08009c97 	.word	0x08009c97
 8009f18:	0800a9d2 	.word	0x0800a9d2

08009f1c <__swbuf_r>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	460e      	mov	r6, r1
 8009f20:	4614      	mov	r4, r2
 8009f22:	4605      	mov	r5, r0
 8009f24:	b118      	cbz	r0, 8009f2e <__swbuf_r+0x12>
 8009f26:	6983      	ldr	r3, [r0, #24]
 8009f28:	b90b      	cbnz	r3, 8009f2e <__swbuf_r+0x12>
 8009f2a:	f000 f9e7 	bl	800a2fc <__sinit>
 8009f2e:	4b21      	ldr	r3, [pc, #132]	; (8009fb4 <__swbuf_r+0x98>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d12b      	bne.n	8009f8c <__swbuf_r+0x70>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	69a3      	ldr	r3, [r4, #24]
 8009f38:	60a3      	str	r3, [r4, #8]
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	d52f      	bpl.n	8009fa0 <__swbuf_r+0x84>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	b36b      	cbz	r3, 8009fa0 <__swbuf_r+0x84>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	1ac0      	subs	r0, r0, r3
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	b2f6      	uxtb	r6, r6
 8009f4e:	4283      	cmp	r3, r0
 8009f50:	4637      	mov	r7, r6
 8009f52:	dc04      	bgt.n	8009f5e <__swbuf_r+0x42>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 f93c 	bl	800a1d4 <_fflush_r>
 8009f5c:	bb30      	cbnz	r0, 8009fac <__swbuf_r+0x90>
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	6022      	str	r2, [r4, #0]
 8009f6a:	701e      	strb	r6, [r3, #0]
 8009f6c:	6963      	ldr	r3, [r4, #20]
 8009f6e:	3001      	adds	r0, #1
 8009f70:	4283      	cmp	r3, r0
 8009f72:	d004      	beq.n	8009f7e <__swbuf_r+0x62>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	07db      	lsls	r3, r3, #31
 8009f78:	d506      	bpl.n	8009f88 <__swbuf_r+0x6c>
 8009f7a:	2e0a      	cmp	r6, #10
 8009f7c:	d104      	bne.n	8009f88 <__swbuf_r+0x6c>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 f927 	bl	800a1d4 <_fflush_r>
 8009f86:	b988      	cbnz	r0, 8009fac <__swbuf_r+0x90>
 8009f88:	4638      	mov	r0, r7
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <__swbuf_r+0x9c>)
 8009f8e:	429c      	cmp	r4, r3
 8009f90:	d101      	bne.n	8009f96 <__swbuf_r+0x7a>
 8009f92:	68ac      	ldr	r4, [r5, #8]
 8009f94:	e7cf      	b.n	8009f36 <__swbuf_r+0x1a>
 8009f96:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <__swbuf_r+0xa0>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	bf08      	it	eq
 8009f9c:	68ec      	ldreq	r4, [r5, #12]
 8009f9e:	e7ca      	b.n	8009f36 <__swbuf_r+0x1a>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 f81a 	bl	8009fdc <__swsetup_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0cb      	beq.n	8009f44 <__swbuf_r+0x28>
 8009fac:	f04f 37ff 	mov.w	r7, #4294967295
 8009fb0:	e7ea      	b.n	8009f88 <__swbuf_r+0x6c>
 8009fb2:	bf00      	nop
 8009fb4:	0800ab44 	.word	0x0800ab44
 8009fb8:	0800ab64 	.word	0x0800ab64
 8009fbc:	0800ab24 	.word	0x0800ab24

08009fc0 <__ascii_wctomb>:
 8009fc0:	b149      	cbz	r1, 8009fd6 <__ascii_wctomb+0x16>
 8009fc2:	2aff      	cmp	r2, #255	; 0xff
 8009fc4:	bf85      	ittet	hi
 8009fc6:	238a      	movhi	r3, #138	; 0x8a
 8009fc8:	6003      	strhi	r3, [r0, #0]
 8009fca:	700a      	strbls	r2, [r1, #0]
 8009fcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fd0:	bf98      	it	ls
 8009fd2:	2001      	movls	r0, #1
 8009fd4:	4770      	bx	lr
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	4770      	bx	lr
	...

08009fdc <__swsetup_r>:
 8009fdc:	4b32      	ldr	r3, [pc, #200]	; (800a0a8 <__swsetup_r+0xcc>)
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	681d      	ldr	r5, [r3, #0]
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	b125      	cbz	r5, 8009ff2 <__swsetup_r+0x16>
 8009fe8:	69ab      	ldr	r3, [r5, #24]
 8009fea:	b913      	cbnz	r3, 8009ff2 <__swsetup_r+0x16>
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 f985 	bl	800a2fc <__sinit>
 8009ff2:	4b2e      	ldr	r3, [pc, #184]	; (800a0ac <__swsetup_r+0xd0>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	d10f      	bne.n	800a018 <__swsetup_r+0x3c>
 8009ff8:	686c      	ldr	r4, [r5, #4]
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a000:	0719      	lsls	r1, r3, #28
 800a002:	d42c      	bmi.n	800a05e <__swsetup_r+0x82>
 800a004:	06dd      	lsls	r5, r3, #27
 800a006:	d411      	bmi.n	800a02c <__swsetup_r+0x50>
 800a008:	2309      	movs	r3, #9
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	e03e      	b.n	800a096 <__swsetup_r+0xba>
 800a018:	4b25      	ldr	r3, [pc, #148]	; (800a0b0 <__swsetup_r+0xd4>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d101      	bne.n	800a022 <__swsetup_r+0x46>
 800a01e:	68ac      	ldr	r4, [r5, #8]
 800a020:	e7eb      	b.n	8009ffa <__swsetup_r+0x1e>
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <__swsetup_r+0xd8>)
 800a024:	429c      	cmp	r4, r3
 800a026:	bf08      	it	eq
 800a028:	68ec      	ldreq	r4, [r5, #12]
 800a02a:	e7e6      	b.n	8009ffa <__swsetup_r+0x1e>
 800a02c:	0758      	lsls	r0, r3, #29
 800a02e:	d512      	bpl.n	800a056 <__swsetup_r+0x7a>
 800a030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a032:	b141      	cbz	r1, 800a046 <__swsetup_r+0x6a>
 800a034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a038:	4299      	cmp	r1, r3
 800a03a:	d002      	beq.n	800a042 <__swsetup_r+0x66>
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7ff fb6f 	bl	8009720 <_free_r>
 800a042:	2300      	movs	r3, #0
 800a044:	6363      	str	r3, [r4, #52]	; 0x34
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	2300      	movs	r3, #0
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f043 0308 	orr.w	r3, r3, #8
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	6923      	ldr	r3, [r4, #16]
 800a060:	b94b      	cbnz	r3, 800a076 <__swsetup_r+0x9a>
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06c:	d003      	beq.n	800a076 <__swsetup_r+0x9a>
 800a06e:	4621      	mov	r1, r4
 800a070:	4630      	mov	r0, r6
 800a072:	f000 fa07 	bl	800a484 <__smakebuf_r>
 800a076:	89a0      	ldrh	r0, [r4, #12]
 800a078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07c:	f010 0301 	ands.w	r3, r0, #1
 800a080:	d00a      	beq.n	800a098 <__swsetup_r+0xbc>
 800a082:	2300      	movs	r3, #0
 800a084:	60a3      	str	r3, [r4, #8]
 800a086:	6963      	ldr	r3, [r4, #20]
 800a088:	425b      	negs	r3, r3
 800a08a:	61a3      	str	r3, [r4, #24]
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	b943      	cbnz	r3, 800a0a2 <__swsetup_r+0xc6>
 800a090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a094:	d1ba      	bne.n	800a00c <__swsetup_r+0x30>
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	0781      	lsls	r1, r0, #30
 800a09a:	bf58      	it	pl
 800a09c:	6963      	ldrpl	r3, [r4, #20]
 800a09e:	60a3      	str	r3, [r4, #8]
 800a0a0:	e7f4      	b.n	800a08c <__swsetup_r+0xb0>
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	e7f7      	b.n	800a096 <__swsetup_r+0xba>
 800a0a6:	bf00      	nop
 800a0a8:	20000024 	.word	0x20000024
 800a0ac:	0800ab44 	.word	0x0800ab44
 800a0b0:	0800ab64 	.word	0x0800ab64
 800a0b4:	0800ab24 	.word	0x0800ab24

0800a0b8 <abort>:
 800a0b8:	b508      	push	{r3, lr}
 800a0ba:	2006      	movs	r0, #6
 800a0bc:	f000 fa52 	bl	800a564 <raise>
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f7f7 feb3 	bl	8001e2c <_exit>
	...

0800a0c8 <__sflush_r>:
 800a0c8:	898a      	ldrh	r2, [r1, #12]
 800a0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	0710      	lsls	r0, r2, #28
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	d458      	bmi.n	800a188 <__sflush_r+0xc0>
 800a0d6:	684b      	ldr	r3, [r1, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	dc05      	bgt.n	800a0e8 <__sflush_r+0x20>
 800a0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dc02      	bgt.n	800a0e8 <__sflush_r+0x20>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	d0f9      	beq.n	800a0e2 <__sflush_r+0x1a>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0f4:	682f      	ldr	r7, [r5, #0]
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	d032      	beq.n	800a160 <__sflush_r+0x98>
 800a0fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	075a      	lsls	r2, r3, #29
 800a100:	d505      	bpl.n	800a10e <__sflush_r+0x46>
 800a102:	6863      	ldr	r3, [r4, #4]
 800a104:	1ac0      	subs	r0, r0, r3
 800a106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a108:	b10b      	cbz	r3, 800a10e <__sflush_r+0x46>
 800a10a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a10c:	1ac0      	subs	r0, r0, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	4602      	mov	r2, r0
 800a112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a114:	6a21      	ldr	r1, [r4, #32]
 800a116:	4628      	mov	r0, r5
 800a118:	47b0      	blx	r6
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	d106      	bne.n	800a12e <__sflush_r+0x66>
 800a120:	6829      	ldr	r1, [r5, #0]
 800a122:	291d      	cmp	r1, #29
 800a124:	d82c      	bhi.n	800a180 <__sflush_r+0xb8>
 800a126:	4a2a      	ldr	r2, [pc, #168]	; (800a1d0 <__sflush_r+0x108>)
 800a128:	40ca      	lsrs	r2, r1
 800a12a:	07d6      	lsls	r6, r2, #31
 800a12c:	d528      	bpl.n	800a180 <__sflush_r+0xb8>
 800a12e:	2200      	movs	r2, #0
 800a130:	6062      	str	r2, [r4, #4]
 800a132:	04d9      	lsls	r1, r3, #19
 800a134:	6922      	ldr	r2, [r4, #16]
 800a136:	6022      	str	r2, [r4, #0]
 800a138:	d504      	bpl.n	800a144 <__sflush_r+0x7c>
 800a13a:	1c42      	adds	r2, r0, #1
 800a13c:	d101      	bne.n	800a142 <__sflush_r+0x7a>
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	b903      	cbnz	r3, 800a144 <__sflush_r+0x7c>
 800a142:	6560      	str	r0, [r4, #84]	; 0x54
 800a144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a146:	602f      	str	r7, [r5, #0]
 800a148:	2900      	cmp	r1, #0
 800a14a:	d0ca      	beq.n	800a0e2 <__sflush_r+0x1a>
 800a14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a150:	4299      	cmp	r1, r3
 800a152:	d002      	beq.n	800a15a <__sflush_r+0x92>
 800a154:	4628      	mov	r0, r5
 800a156:	f7ff fae3 	bl	8009720 <_free_r>
 800a15a:	2000      	movs	r0, #0
 800a15c:	6360      	str	r0, [r4, #52]	; 0x34
 800a15e:	e7c1      	b.n	800a0e4 <__sflush_r+0x1c>
 800a160:	6a21      	ldr	r1, [r4, #32]
 800a162:	2301      	movs	r3, #1
 800a164:	4628      	mov	r0, r5
 800a166:	47b0      	blx	r6
 800a168:	1c41      	adds	r1, r0, #1
 800a16a:	d1c7      	bne.n	800a0fc <__sflush_r+0x34>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0c4      	beq.n	800a0fc <__sflush_r+0x34>
 800a172:	2b1d      	cmp	r3, #29
 800a174:	d001      	beq.n	800a17a <__sflush_r+0xb2>
 800a176:	2b16      	cmp	r3, #22
 800a178:	d101      	bne.n	800a17e <__sflush_r+0xb6>
 800a17a:	602f      	str	r7, [r5, #0]
 800a17c:	e7b1      	b.n	800a0e2 <__sflush_r+0x1a>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	e7ad      	b.n	800a0e4 <__sflush_r+0x1c>
 800a188:	690f      	ldr	r7, [r1, #16]
 800a18a:	2f00      	cmp	r7, #0
 800a18c:	d0a9      	beq.n	800a0e2 <__sflush_r+0x1a>
 800a18e:	0793      	lsls	r3, r2, #30
 800a190:	680e      	ldr	r6, [r1, #0]
 800a192:	bf08      	it	eq
 800a194:	694b      	ldreq	r3, [r1, #20]
 800a196:	600f      	str	r7, [r1, #0]
 800a198:	bf18      	it	ne
 800a19a:	2300      	movne	r3, #0
 800a19c:	eba6 0807 	sub.w	r8, r6, r7
 800a1a0:	608b      	str	r3, [r1, #8]
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	dd9c      	ble.n	800a0e2 <__sflush_r+0x1a>
 800a1a8:	6a21      	ldr	r1, [r4, #32]
 800a1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1ac:	4643      	mov	r3, r8
 800a1ae:	463a      	mov	r2, r7
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b0      	blx	r6
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dc06      	bgt.n	800a1c6 <__sflush_r+0xfe>
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c4:	e78e      	b.n	800a0e4 <__sflush_r+0x1c>
 800a1c6:	4407      	add	r7, r0
 800a1c8:	eba8 0800 	sub.w	r8, r8, r0
 800a1cc:	e7e9      	b.n	800a1a2 <__sflush_r+0xda>
 800a1ce:	bf00      	nop
 800a1d0:	20400001 	.word	0x20400001

0800a1d4 <_fflush_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	690b      	ldr	r3, [r1, #16]
 800a1d8:	4605      	mov	r5, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	b913      	cbnz	r3, 800a1e4 <_fflush_r+0x10>
 800a1de:	2500      	movs	r5, #0
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	b118      	cbz	r0, 800a1ee <_fflush_r+0x1a>
 800a1e6:	6983      	ldr	r3, [r0, #24]
 800a1e8:	b90b      	cbnz	r3, 800a1ee <_fflush_r+0x1a>
 800a1ea:	f000 f887 	bl	800a2fc <__sinit>
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <_fflush_r+0x6c>)
 800a1f0:	429c      	cmp	r4, r3
 800a1f2:	d11b      	bne.n	800a22c <_fflush_r+0x58>
 800a1f4:	686c      	ldr	r4, [r5, #4]
 800a1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0ef      	beq.n	800a1de <_fflush_r+0xa>
 800a1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a200:	07d0      	lsls	r0, r2, #31
 800a202:	d404      	bmi.n	800a20e <_fflush_r+0x3a>
 800a204:	0599      	lsls	r1, r3, #22
 800a206:	d402      	bmi.n	800a20e <_fflush_r+0x3a>
 800a208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a20a:	f000 f915 	bl	800a438 <__retarget_lock_acquire_recursive>
 800a20e:	4628      	mov	r0, r5
 800a210:	4621      	mov	r1, r4
 800a212:	f7ff ff59 	bl	800a0c8 <__sflush_r>
 800a216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a218:	07da      	lsls	r2, r3, #31
 800a21a:	4605      	mov	r5, r0
 800a21c:	d4e0      	bmi.n	800a1e0 <_fflush_r+0xc>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	059b      	lsls	r3, r3, #22
 800a222:	d4dd      	bmi.n	800a1e0 <_fflush_r+0xc>
 800a224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a226:	f000 f908 	bl	800a43a <__retarget_lock_release_recursive>
 800a22a:	e7d9      	b.n	800a1e0 <_fflush_r+0xc>
 800a22c:	4b05      	ldr	r3, [pc, #20]	; (800a244 <_fflush_r+0x70>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	d101      	bne.n	800a236 <_fflush_r+0x62>
 800a232:	68ac      	ldr	r4, [r5, #8]
 800a234:	e7df      	b.n	800a1f6 <_fflush_r+0x22>
 800a236:	4b04      	ldr	r3, [pc, #16]	; (800a248 <_fflush_r+0x74>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	bf08      	it	eq
 800a23c:	68ec      	ldreq	r4, [r5, #12]
 800a23e:	e7da      	b.n	800a1f6 <_fflush_r+0x22>
 800a240:	0800ab44 	.word	0x0800ab44
 800a244:	0800ab64 	.word	0x0800ab64
 800a248:	0800ab24 	.word	0x0800ab24

0800a24c <std>:
 800a24c:	2300      	movs	r3, #0
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	e9c0 3300 	strd	r3, r3, [r0]
 800a256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a25a:	6083      	str	r3, [r0, #8]
 800a25c:	8181      	strh	r1, [r0, #12]
 800a25e:	6643      	str	r3, [r0, #100]	; 0x64
 800a260:	81c2      	strh	r2, [r0, #14]
 800a262:	6183      	str	r3, [r0, #24]
 800a264:	4619      	mov	r1, r3
 800a266:	2208      	movs	r2, #8
 800a268:	305c      	adds	r0, #92	; 0x5c
 800a26a:	f7fd fb97 	bl	800799c <memset>
 800a26e:	4b05      	ldr	r3, [pc, #20]	; (800a284 <std+0x38>)
 800a270:	6263      	str	r3, [r4, #36]	; 0x24
 800a272:	4b05      	ldr	r3, [pc, #20]	; (800a288 <std+0x3c>)
 800a274:	62a3      	str	r3, [r4, #40]	; 0x28
 800a276:	4b05      	ldr	r3, [pc, #20]	; (800a28c <std+0x40>)
 800a278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a27a:	4b05      	ldr	r3, [pc, #20]	; (800a290 <std+0x44>)
 800a27c:	6224      	str	r4, [r4, #32]
 800a27e:	6323      	str	r3, [r4, #48]	; 0x30
 800a280:	bd10      	pop	{r4, pc}
 800a282:	bf00      	nop
 800a284:	0800a59d 	.word	0x0800a59d
 800a288:	0800a5bf 	.word	0x0800a5bf
 800a28c:	0800a5f7 	.word	0x0800a5f7
 800a290:	0800a61b 	.word	0x0800a61b

0800a294 <_cleanup_r>:
 800a294:	4901      	ldr	r1, [pc, #4]	; (800a29c <_cleanup_r+0x8>)
 800a296:	f000 b8af 	b.w	800a3f8 <_fwalk_reent>
 800a29a:	bf00      	nop
 800a29c:	0800a1d5 	.word	0x0800a1d5

0800a2a0 <__sfmoreglue>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	1e4a      	subs	r2, r1, #1
 800a2a4:	2568      	movs	r5, #104	; 0x68
 800a2a6:	4355      	muls	r5, r2
 800a2a8:	460e      	mov	r6, r1
 800a2aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2ae:	f7ff fa87 	bl	80097c0 <_malloc_r>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	b140      	cbz	r0, 800a2c8 <__sfmoreglue+0x28>
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a2bc:	300c      	adds	r0, #12
 800a2be:	60a0      	str	r0, [r4, #8]
 800a2c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2c4:	f7fd fb6a 	bl	800799c <memset>
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}

0800a2cc <__sfp_lock_acquire>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__sfp_lock_acquire+0x8>)
 800a2ce:	f000 b8b3 	b.w	800a438 <__retarget_lock_acquire_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	200006f4 	.word	0x200006f4

0800a2d8 <__sfp_lock_release>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__sfp_lock_release+0x8>)
 800a2da:	f000 b8ae 	b.w	800a43a <__retarget_lock_release_recursive>
 800a2de:	bf00      	nop
 800a2e0:	200006f4 	.word	0x200006f4

0800a2e4 <__sinit_lock_acquire>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__sinit_lock_acquire+0x8>)
 800a2e6:	f000 b8a7 	b.w	800a438 <__retarget_lock_acquire_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	200006ef 	.word	0x200006ef

0800a2f0 <__sinit_lock_release>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__sinit_lock_release+0x8>)
 800a2f2:	f000 b8a2 	b.w	800a43a <__retarget_lock_release_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	200006ef 	.word	0x200006ef

0800a2fc <__sinit>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	4604      	mov	r4, r0
 800a300:	f7ff fff0 	bl	800a2e4 <__sinit_lock_acquire>
 800a304:	69a3      	ldr	r3, [r4, #24]
 800a306:	b11b      	cbz	r3, 800a310 <__sinit+0x14>
 800a308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a30c:	f7ff bff0 	b.w	800a2f0 <__sinit_lock_release>
 800a310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a314:	6523      	str	r3, [r4, #80]	; 0x50
 800a316:	4b13      	ldr	r3, [pc, #76]	; (800a364 <__sinit+0x68>)
 800a318:	4a13      	ldr	r2, [pc, #76]	; (800a368 <__sinit+0x6c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a31e:	42a3      	cmp	r3, r4
 800a320:	bf04      	itt	eq
 800a322:	2301      	moveq	r3, #1
 800a324:	61a3      	streq	r3, [r4, #24]
 800a326:	4620      	mov	r0, r4
 800a328:	f000 f820 	bl	800a36c <__sfp>
 800a32c:	6060      	str	r0, [r4, #4]
 800a32e:	4620      	mov	r0, r4
 800a330:	f000 f81c 	bl	800a36c <__sfp>
 800a334:	60a0      	str	r0, [r4, #8]
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f818 	bl	800a36c <__sfp>
 800a33c:	2200      	movs	r2, #0
 800a33e:	60e0      	str	r0, [r4, #12]
 800a340:	2104      	movs	r1, #4
 800a342:	6860      	ldr	r0, [r4, #4]
 800a344:	f7ff ff82 	bl	800a24c <std>
 800a348:	68a0      	ldr	r0, [r4, #8]
 800a34a:	2201      	movs	r2, #1
 800a34c:	2109      	movs	r1, #9
 800a34e:	f7ff ff7d 	bl	800a24c <std>
 800a352:	68e0      	ldr	r0, [r4, #12]
 800a354:	2202      	movs	r2, #2
 800a356:	2112      	movs	r1, #18
 800a358:	f7ff ff78 	bl	800a24c <std>
 800a35c:	2301      	movs	r3, #1
 800a35e:	61a3      	str	r3, [r4, #24]
 800a360:	e7d2      	b.n	800a308 <__sinit+0xc>
 800a362:	bf00      	nop
 800a364:	0800a7a4 	.word	0x0800a7a4
 800a368:	0800a295 	.word	0x0800a295

0800a36c <__sfp>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	4607      	mov	r7, r0
 800a370:	f7ff ffac 	bl	800a2cc <__sfp_lock_acquire>
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <__sfp+0x84>)
 800a376:	681e      	ldr	r6, [r3, #0]
 800a378:	69b3      	ldr	r3, [r6, #24]
 800a37a:	b913      	cbnz	r3, 800a382 <__sfp+0x16>
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff ffbd 	bl	800a2fc <__sinit>
 800a382:	3648      	adds	r6, #72	; 0x48
 800a384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a388:	3b01      	subs	r3, #1
 800a38a:	d503      	bpl.n	800a394 <__sfp+0x28>
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	b30b      	cbz	r3, 800a3d4 <__sfp+0x68>
 800a390:	6836      	ldr	r6, [r6, #0]
 800a392:	e7f7      	b.n	800a384 <__sfp+0x18>
 800a394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a398:	b9d5      	cbnz	r5, 800a3d0 <__sfp+0x64>
 800a39a:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <__sfp+0x88>)
 800a39c:	60e3      	str	r3, [r4, #12]
 800a39e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a3a4:	f000 f847 	bl	800a436 <__retarget_lock_init_recursive>
 800a3a8:	f7ff ff96 	bl	800a2d8 <__sfp_lock_release>
 800a3ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3b4:	6025      	str	r5, [r4, #0]
 800a3b6:	61a5      	str	r5, [r4, #24]
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3c0:	f7fd faec 	bl	800799c <memset>
 800a3c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d0:	3468      	adds	r4, #104	; 0x68
 800a3d2:	e7d9      	b.n	800a388 <__sfp+0x1c>
 800a3d4:	2104      	movs	r1, #4
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7ff ff62 	bl	800a2a0 <__sfmoreglue>
 800a3dc:	4604      	mov	r4, r0
 800a3de:	6030      	str	r0, [r6, #0]
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d1d5      	bne.n	800a390 <__sfp+0x24>
 800a3e4:	f7ff ff78 	bl	800a2d8 <__sfp_lock_release>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	e7ee      	b.n	800a3cc <__sfp+0x60>
 800a3ee:	bf00      	nop
 800a3f0:	0800a7a4 	.word	0x0800a7a4
 800a3f4:	ffff0001 	.word	0xffff0001

0800a3f8 <_fwalk_reent>:
 800a3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	4688      	mov	r8, r1
 800a400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a404:	2700      	movs	r7, #0
 800a406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a40a:	f1b9 0901 	subs.w	r9, r9, #1
 800a40e:	d505      	bpl.n	800a41c <_fwalk_reent+0x24>
 800a410:	6824      	ldr	r4, [r4, #0]
 800a412:	2c00      	cmp	r4, #0
 800a414:	d1f7      	bne.n	800a406 <_fwalk_reent+0xe>
 800a416:	4638      	mov	r0, r7
 800a418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a41c:	89ab      	ldrh	r3, [r5, #12]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d907      	bls.n	800a432 <_fwalk_reent+0x3a>
 800a422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a426:	3301      	adds	r3, #1
 800a428:	d003      	beq.n	800a432 <_fwalk_reent+0x3a>
 800a42a:	4629      	mov	r1, r5
 800a42c:	4630      	mov	r0, r6
 800a42e:	47c0      	blx	r8
 800a430:	4307      	orrs	r7, r0
 800a432:	3568      	adds	r5, #104	; 0x68
 800a434:	e7e9      	b.n	800a40a <_fwalk_reent+0x12>

0800a436 <__retarget_lock_init_recursive>:
 800a436:	4770      	bx	lr

0800a438 <__retarget_lock_acquire_recursive>:
 800a438:	4770      	bx	lr

0800a43a <__retarget_lock_release_recursive>:
 800a43a:	4770      	bx	lr

0800a43c <__swhatbuf_r>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	460e      	mov	r6, r1
 800a440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a444:	2900      	cmp	r1, #0
 800a446:	b096      	sub	sp, #88	; 0x58
 800a448:	4614      	mov	r4, r2
 800a44a:	461d      	mov	r5, r3
 800a44c:	da07      	bge.n	800a45e <__swhatbuf_r+0x22>
 800a44e:	2300      	movs	r3, #0
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	89b3      	ldrh	r3, [r6, #12]
 800a454:	061a      	lsls	r2, r3, #24
 800a456:	d410      	bmi.n	800a47a <__swhatbuf_r+0x3e>
 800a458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45c:	e00e      	b.n	800a47c <__swhatbuf_r+0x40>
 800a45e:	466a      	mov	r2, sp
 800a460:	f000 f902 	bl	800a668 <_fstat_r>
 800a464:	2800      	cmp	r0, #0
 800a466:	dbf2      	blt.n	800a44e <__swhatbuf_r+0x12>
 800a468:	9a01      	ldr	r2, [sp, #4]
 800a46a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a46e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a472:	425a      	negs	r2, r3
 800a474:	415a      	adcs	r2, r3
 800a476:	602a      	str	r2, [r5, #0]
 800a478:	e7ee      	b.n	800a458 <__swhatbuf_r+0x1c>
 800a47a:	2340      	movs	r3, #64	; 0x40
 800a47c:	2000      	movs	r0, #0
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	b016      	add	sp, #88	; 0x58
 800a482:	bd70      	pop	{r4, r5, r6, pc}

0800a484 <__smakebuf_r>:
 800a484:	898b      	ldrh	r3, [r1, #12]
 800a486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a488:	079d      	lsls	r5, r3, #30
 800a48a:	4606      	mov	r6, r0
 800a48c:	460c      	mov	r4, r1
 800a48e:	d507      	bpl.n	800a4a0 <__smakebuf_r+0x1c>
 800a490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	6123      	str	r3, [r4, #16]
 800a498:	2301      	movs	r3, #1
 800a49a:	6163      	str	r3, [r4, #20]
 800a49c:	b002      	add	sp, #8
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	ab01      	add	r3, sp, #4
 800a4a2:	466a      	mov	r2, sp
 800a4a4:	f7ff ffca 	bl	800a43c <__swhatbuf_r>
 800a4a8:	9900      	ldr	r1, [sp, #0]
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff f987 	bl	80097c0 <_malloc_r>
 800a4b2:	b948      	cbnz	r0, 800a4c8 <__smakebuf_r+0x44>
 800a4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4b8:	059a      	lsls	r2, r3, #22
 800a4ba:	d4ef      	bmi.n	800a49c <__smakebuf_r+0x18>
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	f043 0302 	orr.w	r3, r3, #2
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	e7e3      	b.n	800a490 <__smakebuf_r+0xc>
 800a4c8:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <__smakebuf_r+0x7c>)
 800a4ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	6163      	str	r3, [r4, #20]
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	6120      	str	r0, [r4, #16]
 800a4de:	b15b      	cbz	r3, 800a4f8 <__smakebuf_r+0x74>
 800a4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f000 f8d1 	bl	800a68c <_isatty_r>
 800a4ea:	b128      	cbz	r0, 800a4f8 <__smakebuf_r+0x74>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	f043 0301 	orr.w	r3, r3, #1
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	89a0      	ldrh	r0, [r4, #12]
 800a4fa:	4305      	orrs	r5, r0
 800a4fc:	81a5      	strh	r5, [r4, #12]
 800a4fe:	e7cd      	b.n	800a49c <__smakebuf_r+0x18>
 800a500:	0800a295 	.word	0x0800a295

0800a504 <_malloc_usable_size_r>:
 800a504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a508:	1f18      	subs	r0, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbc      	itt	lt
 800a50e:	580b      	ldrlt	r3, [r1, r0]
 800a510:	18c0      	addlt	r0, r0, r3
 800a512:	4770      	bx	lr

0800a514 <_raise_r>:
 800a514:	291f      	cmp	r1, #31
 800a516:	b538      	push	{r3, r4, r5, lr}
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	d904      	bls.n	800a528 <_raise_r+0x14>
 800a51e:	2316      	movs	r3, #22
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	f04f 30ff 	mov.w	r0, #4294967295
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a52a:	b112      	cbz	r2, 800a532 <_raise_r+0x1e>
 800a52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a530:	b94b      	cbnz	r3, 800a546 <_raise_r+0x32>
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f830 	bl	800a598 <_getpid_r>
 800a538:	462a      	mov	r2, r5
 800a53a:	4601      	mov	r1, r0
 800a53c:	4620      	mov	r0, r4
 800a53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a542:	f000 b817 	b.w	800a574 <_kill_r>
 800a546:	2b01      	cmp	r3, #1
 800a548:	d00a      	beq.n	800a560 <_raise_r+0x4c>
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	d103      	bne.n	800a556 <_raise_r+0x42>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	2001      	movs	r0, #1
 800a554:	e7e7      	b.n	800a526 <_raise_r+0x12>
 800a556:	2400      	movs	r4, #0
 800a558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a55c:	4628      	mov	r0, r5
 800a55e:	4798      	blx	r3
 800a560:	2000      	movs	r0, #0
 800a562:	e7e0      	b.n	800a526 <_raise_r+0x12>

0800a564 <raise>:
 800a564:	4b02      	ldr	r3, [pc, #8]	; (800a570 <raise+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f7ff bfd3 	b.w	800a514 <_raise_r>
 800a56e:	bf00      	nop
 800a570:	20000024 	.word	0x20000024

0800a574 <_kill_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_kill_r+0x20>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f7 fc43 	bl	8001e0c <_kill>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_kill_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_kill_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	200006e8 	.word	0x200006e8

0800a598 <_getpid_r>:
 800a598:	f7f7 bc30 	b.w	8001dfc <_getpid>

0800a59c <__sread>:
 800a59c:	b510      	push	{r4, lr}
 800a59e:	460c      	mov	r4, r1
 800a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a4:	f000 f894 	bl	800a6d0 <_read_r>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	bfab      	itete	ge
 800a5ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a5b0:	181b      	addge	r3, r3, r0
 800a5b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5b6:	bfac      	ite	ge
 800a5b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5ba:	81a3      	strhlt	r3, [r4, #12]
 800a5bc:	bd10      	pop	{r4, pc}

0800a5be <__swrite>:
 800a5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c2:	461f      	mov	r7, r3
 800a5c4:	898b      	ldrh	r3, [r1, #12]
 800a5c6:	05db      	lsls	r3, r3, #23
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	4616      	mov	r6, r2
 800a5ce:	d505      	bpl.n	800a5dc <__swrite+0x1e>
 800a5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f000 f868 	bl	800a6ac <_lseek_r>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f2:	f000 b817 	b.w	800a624 <_write_r>

0800a5f6 <__sseek>:
 800a5f6:	b510      	push	{r4, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fe:	f000 f855 	bl	800a6ac <_lseek_r>
 800a602:	1c43      	adds	r3, r0, #1
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	bf15      	itete	ne
 800a608:	6560      	strne	r0, [r4, #84]	; 0x54
 800a60a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a60e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a612:	81a3      	strheq	r3, [r4, #12]
 800a614:	bf18      	it	ne
 800a616:	81a3      	strhne	r3, [r4, #12]
 800a618:	bd10      	pop	{r4, pc}

0800a61a <__sclose>:
 800a61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61e:	f000 b813 	b.w	800a648 <_close_r>
	...

0800a624 <_write_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	; (800a644 <_write_r+0x20>)
 800a628:	4604      	mov	r4, r0
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	f7f7 fc21 	bl	8001e7a <_write>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_write_r+0x1e>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_write_r+0x1e>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	200006e8 	.word	0x200006e8

0800a648 <_close_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d06      	ldr	r5, [pc, #24]	; (800a664 <_close_r+0x1c>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	4608      	mov	r0, r1
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	f7f7 fc2d 	bl	8001eb2 <_close>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_close_r+0x1a>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_close_r+0x1a>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	200006e8 	.word	0x200006e8

0800a668 <_fstat_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	; (800a688 <_fstat_r+0x20>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	4611      	mov	r1, r2
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f7f7 fc28 	bl	8001eca <_fstat>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d102      	bne.n	800a684 <_fstat_r+0x1c>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b103      	cbz	r3, 800a684 <_fstat_r+0x1c>
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	200006e8 	.word	0x200006e8

0800a68c <_isatty_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d06      	ldr	r5, [pc, #24]	; (800a6a8 <_isatty_r+0x1c>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f7 fc27 	bl	8001eea <_isatty>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_isatty_r+0x1a>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_isatty_r+0x1a>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	200006e8 	.word	0x200006e8

0800a6ac <_lseek_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_lseek_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f7 fc20 	bl	8001f00 <_lseek>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_lseek_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_lseek_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	200006e8 	.word	0x200006e8

0800a6d0 <_read_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_read_r+0x20>)
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4611      	mov	r1, r2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f7f7 fbae 	bl	8001e40 <_read>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_read_r+0x1e>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_read_r+0x1e>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	200006e8 	.word	0x200006e8

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
